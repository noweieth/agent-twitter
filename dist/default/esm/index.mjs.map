{"version":3,"file":"index.mjs","sources":["../../../src/errors.ts","../../../src/platform/platform-interface.ts","../../../src/platform/index.ts","../../../src/requests.ts","../../../src/api.ts","../../../src/auth.ts","../../../src/profile.ts","../../../src/auth-user.ts","../../../src/timeline-async.ts","../../../src/type-util.ts","../../../src/timeline-tweet-util.ts","../../../src/timeline-v2.ts","../../../src/timeline-search.ts","../../../src/search.ts","../../../src/timeline-relationship.ts","../../../src/relationships.ts","../../../src/trends.ts","../../../src/api-data.ts","../../../src/timeline-list.ts","../../../src/tweets.ts","../../../src/timeline-home.ts","../../../src/timeline-following.ts","../../../src/messages.ts","../../../src/spaces.ts","../../../src/grok.ts","../../../src/scraper.ts","../../../src/spaces/core/ChatClient.ts","../../../src/spaces/core/JanusAudio.ts","../../../src/spaces/core/JanusClient.ts","../../../src/spaces/utils.ts","../../../src/spaces/logger.ts","../../../src/spaces/core/Space.ts","../../../src/spaces/core/SpaceParticipant.ts","../../../src/spaces/plugins/SttTtsPlugin.ts","../../../src/spaces/plugins/RecordToDiskPlugin.ts","../../../src/spaces/plugins/MonitorAudioPlugin.ts","../../../src/spaces/plugins/IdleMonitorPlugin.ts","../../../src/spaces/plugins/HlsRecordPlugin.ts"],"sourcesContent":["export class ApiError extends Error {\n  private constructor(\n    readonly response: Response,\n    readonly data: any,\n    message: string,\n  ) {\n    super(message);\n  }\n\n  static async fromResponse(response: Response) {\n    // Try our best to parse the result, but don't bother if we can't\n    let data: string | object | undefined = undefined;\n    try {\n      data = await response.json();\n    } catch {\n      try {\n        data = await response.text();\n      } catch {}\n    }\n\n    return new ApiError(response, data, `Response status: ${response.status}`);\n  }\n}\n\ninterface Position {\n  line: number;\n  column: number;\n}\n\ninterface TraceInfo {\n  trace_id: string;\n}\n\ninterface TwitterApiErrorExtensions {\n  code?: number;\n  kind?: string;\n  name?: string;\n  source?: string;\n  tracing?: TraceInfo;\n}\n\nexport interface TwitterApiErrorRaw extends TwitterApiErrorExtensions {\n  message?: string;\n  locations?: Position[];\n  path?: string[];\n  extensions?: TwitterApiErrorExtensions;\n}\n","export interface PlatformExtensions {\n  /**\n   * Randomizes the runtime's TLS ciphers to bypass TLS client fingerprinting, which\n   * hopefully avoids random 404s on some requests.\n   *\n   * **References:**\n   * - https://github.com/imputnet/cobalt/pull/574\n   */\n  randomizeCiphers(): Promise<void>;\n}\n\nexport const genericPlatform = new (class implements PlatformExtensions {\n  randomizeCiphers(): Promise<void> {\n    return Promise.resolve();\n  }\n})();\n","import { PlatformExtensions, genericPlatform } from './platform-interface';\n\nexport * from './platform-interface';\n\ndeclare const PLATFORM_NODE: boolean;\ndeclare const PLATFORM_NODE_JEST: boolean;\n\nexport class Platform implements PlatformExtensions {\n  async randomizeCiphers() {\n    const platform = await Platform.importPlatform();\n    await platform?.randomizeCiphers();\n  }\n\n  private static async importPlatform(): Promise<null | PlatformExtensions> {\n    if (PLATFORM_NODE) {\n      const { platform } = await import('./node/index.js');\n      return platform as PlatformExtensions;\n    } else if (PLATFORM_NODE_JEST) {\n      // Jest gets unhappy when using an await import here, so we just use require instead.\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { platform } = require('./node');\n      return platform as PlatformExtensions;\n    }\n\n    return genericPlatform;\n  }\n}\n","import { Cookie, CookieJar } from 'tough-cookie';\nimport setCookie from 'set-cookie-parser';\nimport type { Headers as HeadersPolyfill } from 'headers-polyfill';\n\n/**\n * Updates a cookie jar with the Set-Cookie headers from the provided Headers instance.\n * @param cookieJar The cookie jar to update.\n * @param headers The response headers to populate the cookie jar with.\n */\nexport async function updateCookieJar(\n  cookieJar: CookieJar,\n  headers: Headers | HeadersPolyfill,\n) {\n  const setCookieHeader = headers.get('set-cookie');\n  if (setCookieHeader) {\n    const cookies = setCookie.splitCookiesString(setCookieHeader);\n    for (const cookie of cookies.map((c) => Cookie.parse(c))) {\n      if (!cookie) continue;\n      await cookieJar.setCookie(\n        cookie,\n        `${cookie.secure ? 'https' : 'http'}://${cookie.domain}${cookie.path}`,\n      );\n    }\n  } else if (typeof document !== 'undefined') {\n    for (const cookie of document.cookie.split(';')) {\n      const hardCookie = Cookie.parse(cookie);\n      if (hardCookie) {\n        await cookieJar.setCookie(hardCookie, document.location.toString());\n      }\n    }\n  }\n}\n","import { TwitterAuth } from './auth';\nimport { ApiError } from './errors';\nimport { Platform, PlatformExtensions } from './platform';\nimport { updateCookieJar } from './requests';\nimport { Headers } from 'headers-polyfill';\n\n// For some reason using Parameters<typeof fetch> reduces the request transform function to\n// `(url: string) => string` in tests.\ntype FetchParameters = [input: RequestInfo | URL, init?: RequestInit];\n\nexport interface FetchTransformOptions {\n  /**\n   * Transforms the request options before a request is made. This executes after all of the default\n   * parameters have been configured, and is stateless. It is safe to return new request options\n   * objects.\n   * @param args The request options.\n   * @returns The transformed request options.\n   */\n  request: (\n    ...args: FetchParameters\n  ) => FetchParameters | Promise<FetchParameters>;\n\n  /**\n   * Transforms the response after a request completes. This executes immediately after the request\n   * completes, and is stateless. It is safe to return a new response object.\n   * @param response The response object.\n   * @returns The transformed response object.\n   */\n  response: (response: Response) => Response | Promise<Response>;\n}\n\nexport const bearerToken =\n  'AAAAAAAAAAAAAAAAAAAAAFQODgEAAAAAVHTp76lzh3rFzcHbmHVvQxYYpTw%3DckAlMINMjmCwxUcaXbAN4XqJVdgMJaHqNOFgPMK0zN1qLqLQCF';\n\n/**\n * An API result container.\n */\nexport type RequestApiResult<T> =\n  | { success: true; value: T }\n  | { success: false; err: Error };\n\n/**\n * Used internally to send HTTP requests to the Twitter API.\n * @internal\n * @param url - The URL to send the request to.\n * @param auth - The instance of {@link TwitterAuth} that will be used to authorize this request.\n * @param method - The HTTP method used when sending this request.\n */\nexport async function requestApi<T>(\n  url: string,\n  auth: TwitterAuth,\n  method: 'GET' | 'POST' = 'GET',\n  platform: PlatformExtensions = new Platform(),\n  body?: any,\n): Promise<RequestApiResult<T>> {\n  const headers = new Headers();\n  await auth.installTo(headers, url);\n  await platform.randomizeCiphers();\n\n  let res: Response;\n  do {\n    try {\n      res = await auth.fetch(url, {\n        method,\n        headers,\n        credentials: 'include',\n        ...(body && { body: JSON.stringify(body) }),\n      });\n    } catch (err) {\n      if (!(err instanceof Error)) {\n        throw err;\n      }\n      return {\n        success: false,\n        err: new Error('Failed to perform request.'),\n      };\n    }\n\n    await updateCookieJar(auth.cookieJar(), res.headers);\n\n    if (res.status === 429) {\n      /*\n      Known headers at this point:\n      - x-rate-limit-limit: Maximum number of requests per time period?\n      - x-rate-limit-reset: UNIX timestamp when the current rate limit will be reset.\n      - x-rate-limit-remaining: Number of requests remaining in current time period?\n      */\n      const xRateLimitRemaining = res.headers.get('x-rate-limit-remaining');\n      const xRateLimitReset = res.headers.get('x-rate-limit-reset');\n      if (xRateLimitRemaining == '0' && xRateLimitReset) {\n        const currentTime = new Date().valueOf() / 1000;\n        const timeDeltaMs = 1000 * (parseInt(xRateLimitReset) - currentTime);\n\n        // I have seen this block for 800s (~13 *minutes*)\n        await new Promise((resolve) => setTimeout(resolve, timeDeltaMs));\n      }\n    }\n  } while (res.status === 429);\n\n  if (!res.ok) {\n    return {\n      success: false,\n      err: await ApiError.fromResponse(res),\n    };\n  }\n\n  // Check if response is chunked\n  const transferEncoding = res.headers.get('transfer-encoding');\n  if (transferEncoding === 'chunked') {\n    // Handle streaming response, if a reader is present\n    const reader = typeof res.body?.getReader === 'function' ? res.body.getReader() : null;\n    if (!reader) {\n      try {\n        const text = await res.text();\n        try {\n          const value = JSON.parse(text);\n          return { success: true, value };\n        } catch (e) {\n          // Return if just a normal string\n          return { success: true, value: { text } as any };\n        }\n      } catch (e) {\n        return {\n          success: false,\n          err: new Error('No readable stream available and cant parse'),\n        };\n      }\n    }\n\n    let chunks: any = '';\n    // Read all chunks before attempting to parse\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n\n      // Convert chunk to text and append\n      chunks += new TextDecoder().decode(value);\n\n      // Log chunk for debugging (optional)\n      // console.log('Received chunk:', new TextDecoder().decode(value));\n    }\n\n    // Now try to parse the complete accumulated response\n    try {\n      // console.log('attempting to parse chunks', chunks);\n      const value = JSON.parse(chunks);\n      return { success: true, value };\n    } catch (e) {\n      // console.log('parsing chunks failed, sending as raw text');\n      // If we can't parse as JSON, return the raw text\n      return { success: true, value: { text: chunks } as any };\n    }\n  }\n\n  // Handle non-streaming responses as before\n  const contentType = res.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    const value: T = await res.json();\n    if (res.headers.get('x-rate-limit-incoming') == '0') {\n      auth.deleteToken();\n    }\n    return { success: true, value };\n  }\n\n  return { success: true, value: {} as T };\n}\n\n/** @internal */\nexport function addApiFeatures(o: object) {\n  return {\n    ...o,\n    rweb_lists_timeline_redesign_enabled: true,\n    responsive_web_graphql_exclude_directive_enabled: true,\n    verified_phone_label_enabled: false,\n    creator_subscriptions_tweet_preview_api_enabled: true,\n    responsive_web_graphql_timeline_navigation_enabled: true,\n    responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\n    tweetypie_unmention_optimization_enabled: true,\n    responsive_web_edit_tweet_api_enabled: true,\n    graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n    view_counts_everywhere_api_enabled: true,\n    longform_notetweets_consumption_enabled: true,\n    tweet_awards_web_tipping_enabled: false,\n    freedom_of_speech_not_reach_fetch_enabled: true,\n    standardized_nudges_misinfo: true,\n    longform_notetweets_rich_text_read_enabled: true,\n    responsive_web_enhance_cards_enabled: false,\n    subscriptions_verification_info_enabled: true,\n    subscriptions_verification_info_reason_enabled: true,\n    subscriptions_verification_info_verified_since_enabled: true,\n    super_follow_badge_privacy_enabled: false,\n    super_follow_exclusive_tweet_notifications_enabled: false,\n    super_follow_tweet_api_enabled: false,\n    super_follow_user_api_enabled: false,\n    android_graphql_skip_api_media_color_palette: false,\n    creator_subscriptions_subscription_count_enabled: false,\n    blue_business_profile_image_shape_enabled: false,\n    unified_cards_ad_metadata_container_dynamic_card_content_query_enabled:\n      false,\n  };\n}\n\nexport function addApiParams(\n  params: URLSearchParams,\n  includeTweetReplies: boolean,\n): URLSearchParams {\n  params.set('include_profile_interstitial_type', '1');\n  params.set('include_blocking', '1');\n  params.set('include_blocked_by', '1');\n  params.set('include_followed_by', '1');\n  params.set('include_want_retweets', '1');\n  params.set('include_mute_edge', '1');\n  params.set('include_can_dm', '1');\n  params.set('include_can_media_tag', '1');\n  params.set('include_ext_has_nft_avatar', '1');\n  params.set('include_ext_is_blue_verified', '1');\n  params.set('include_ext_verified_type', '1');\n  params.set('skip_status', '1');\n  params.set('cards_platform', 'Web-12');\n  params.set('include_cards', '1');\n  params.set('include_ext_alt_text', 'true');\n  params.set('include_ext_limited_action_results', 'false');\n  params.set('include_quote_count', 'true');\n  params.set('include_reply_count', '1');\n  params.set('tweet_mode', 'extended');\n  params.set('include_ext_collab_control', 'true');\n  params.set('include_ext_views', 'true');\n  params.set('include_entities', 'true');\n  params.set('include_user_entities', 'true');\n  params.set('include_ext_media_color', 'true');\n  params.set('include_ext_media_availability', 'true');\n  params.set('include_ext_sensitive_media_warning', 'true');\n  params.set('include_ext_trusted_friends_metadata', 'true');\n  params.set('send_error_codes', 'true');\n  params.set('simple_quoted_tweet', 'true');\n  params.set('include_tweet_replies', `${includeTweetReplies}`);\n  params.set(\n    'ext',\n    'mediaStats,highlightedLabel,hasNftAvatar,voiceInfo,birdwatchPivot,enrichments,superFollowMetadata,unmentionInfo,editControl,collab_control,vibe',\n  );\n  return params;\n}\n","import { Cookie, CookieJar, MemoryCookieStore } from 'tough-cookie';\nimport { updateCookieJar } from './requests';\nimport { Headers } from 'headers-polyfill';\nimport { FetchTransformOptions } from './api';\nimport { TwitterApi } from 'twitter-api-v2';\nimport { Profile } from './profile';\n\nexport interface TwitterAuthOptions {\n  fetch: typeof fetch;\n  transform: Partial<FetchTransformOptions>;\n}\n\nexport interface TwitterAuth {\n  fetch: typeof fetch;\n\n  /**\n   * Returns the current cookie jar.\n   */\n  cookieJar(): CookieJar;\n\n  /**\n   * Logs into a Twitter account using the v2 API\n   */\n  loginWithV2(\n    appKey: string,\n    appSecret: string,\n    accessToken: string,\n    accessSecret: string,\n  ): void;\n\n  /**\n   * Get v2 API client if it exists\n   */\n  getV2Client(): TwitterApi | null;\n\n  /**\n   * Returns if a user is logged-in to Twitter through this instance.\n   * @returns `true` if a user is logged-in; otherwise `false`.\n   */\n  isLoggedIn(): Promise<boolean>;\n\n  /**\n   * Fetches the current user's profile.\n   */\n  me(): Promise<Profile | undefined>;\n\n  /**\n   * Logs into a Twitter account.\n   * @param username The username to log in with.\n   * @param password The password to log in with.\n   * @param email The email to log in with, if you have email confirmation enabled.\n   * @param twoFactorSecret The secret to generate two factor authentication tokens with, if you have two factor authentication enabled.\n   */\n  login(\n    username: string,\n    password: string,\n    email?: string,\n    twoFactorSecret?: string,\n  ): Promise<void>;\n\n  /**\n   * Logs out of the current session.\n   */\n  logout(): Promise<void>;\n\n  /**\n   * Deletes the current guest token token.\n   */\n  deleteToken(): void;\n\n  /**\n   * Returns if the authentication state has a token.\n   * @returns `true` if the authentication state has a token; `false` otherwise.\n   */\n  hasToken(): boolean;\n\n  /**\n   * Returns the time that authentication was performed.\n   * @returns The time at which the authentication token was created, or `null` if it hasn't been created yet.\n   */\n  authenticatedAt(): Date | null;\n\n  /**\n   * Installs the authentication information into a headers-like object. If needed, the\n   * authentication token will be updated from the API automatically.\n   * @param headers A Headers instance representing a request's headers.\n   */\n  installTo(headers: Headers, url: string): Promise<void>;\n}\n\n/**\n * Wraps the provided fetch function with transforms.\n * @param fetchFn The fetch function.\n * @param transform The transform options.\n * @returns The input fetch function, wrapped with the provided transforms.\n */\nfunction withTransform(\n  fetchFn: typeof fetch,\n  transform?: Partial<FetchTransformOptions>,\n): typeof fetch {\n  return async (input, init) => {\n    const fetchArgs = (await transform?.request?.(input, init)) ?? [\n      input,\n      init,\n    ];\n    const res = await fetchFn(...fetchArgs);\n    return (await transform?.response?.(res)) ?? res;\n  };\n}\n\n/**\n * A guest authentication token manager. Automatically handles token refreshes.\n */\nexport class TwitterGuestAuth implements TwitterAuth {\n  protected bearerToken: string;\n  protected jar: CookieJar;\n  protected guestToken?: string;\n  protected guestCreatedAt?: Date;\n  protected v2Client: TwitterApi | null;\n\n  fetch: typeof fetch;\n\n  constructor(\n    bearerToken: string,\n    protected readonly options?: Partial<TwitterAuthOptions>,\n  ) {\n    this.fetch = withTransform(options?.fetch ?? fetch, options?.transform);\n    this.bearerToken = bearerToken;\n    this.jar = new CookieJar();\n    this.v2Client = null;\n  }\n\n  cookieJar(): CookieJar {\n    return this.jar;\n  }\n\n  getV2Client(): TwitterApi | null {\n    return this.v2Client ?? null;\n  }\n\n  loginWithV2(\n    appKey: string,\n    appSecret: string,\n    accessToken: string,\n    accessSecret: string,\n  ): void {\n    const v2Client = new TwitterApi({\n      appKey,\n      appSecret,\n      accessToken,\n      accessSecret,\n    });\n    this.v2Client = v2Client;\n  }\n\n  isLoggedIn(): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  async me(): Promise<Profile | undefined> {\n    return undefined;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  login(_username: string, _password: string, _email?: string): Promise<void> {\n    return this.updateGuestToken();\n  }\n\n  logout(): Promise<void> {\n    this.deleteToken();\n    this.jar = new CookieJar();\n    return Promise.resolve();\n  }\n\n  deleteToken() {\n    delete this.guestToken;\n    delete this.guestCreatedAt;\n  }\n\n  hasToken(): boolean {\n    return this.guestToken != null;\n  }\n\n  authenticatedAt(): Date | null {\n    if (this.guestCreatedAt == null) {\n      return null;\n    }\n\n    return new Date(this.guestCreatedAt);\n  }\n\n  async installTo(headers: Headers): Promise<void> {\n    if (this.shouldUpdate()) {\n      await this.updateGuestToken();\n    }\n\n    const token = this.guestToken;\n    if (token == null) {\n      throw new Error('Authentication token is null or undefined.');\n    }\n\n    headers.set('authorization', `Bearer ${this.bearerToken}`);\n    headers.set('x-guest-token', token);\n\n    const cookies = await this.getCookies();\n    const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n    if (xCsrfToken) {\n      headers.set('x-csrf-token', xCsrfToken.value);\n    }\n\n    headers.set('cookie', await this.getCookieString());\n  }\n\n  protected getCookies(): Promise<Cookie[]> {\n    return this.jar.getCookies(this.getCookieJarUrl());\n  }\n\n  protected getCookieString(): Promise<string> {\n    return this.jar.getCookieString(this.getCookieJarUrl());\n  }\n\n  protected async removeCookie(key: string): Promise<void> {\n    //@ts-expect-error don't care\n    const store: MemoryCookieStore = this.jar.store;\n    const cookies = await this.jar.getCookies(this.getCookieJarUrl());\n    for (const cookie of cookies) {\n      if (!cookie.domain || !cookie.path) continue;\n      store.removeCookie(cookie.domain, cookie.path, key);\n\n      if (typeof document !== 'undefined') {\n        document.cookie = `${cookie.key}=; Max-Age=0; path=${cookie.path}; domain=${cookie.domain}`;\n      }\n    }\n  }\n\n  private getCookieJarUrl(): string {\n    return typeof document !== 'undefined'\n      ? document.location.toString()\n      : 'https://twitter.com';\n  }\n\n  /**\n   * Updates the authentication state with a new guest token from the Twitter API.\n   */\n  protected async updateGuestToken() {\n    const guestActivateUrl = 'https://api.twitter.com/1.1/guest/activate.json';\n\n    const headers = new Headers({\n      Authorization: `Bearer ${this.bearerToken}`,\n      Cookie: await this.getCookieString(),\n    });\n\n    const res = await this.fetch(guestActivateUrl, {\n      method: 'POST',\n      headers: headers,\n      referrerPolicy: 'no-referrer',\n    });\n\n    await updateCookieJar(this.jar, res.headers);\n\n    if (!res.ok) {\n      throw new Error(await res.text());\n    }\n\n    const o = await res.json();\n    if (o == null || o['guest_token'] == null) {\n      throw new Error('guest_token not found.');\n    }\n\n    const newGuestToken = o['guest_token'];\n    if (typeof newGuestToken !== 'string') {\n      throw new Error('guest_token was not a string.');\n    }\n\n    this.guestToken = newGuestToken;\n    this.guestCreatedAt = new Date();\n  }\n\n  /**\n   * Returns if the authentication token needs to be updated or not.\n   * @returns `true` if the token needs to be updated; `false` otherwise.\n   */\n  private shouldUpdate(): boolean {\n    return (\n      !this.hasToken() ||\n      (this.guestCreatedAt != null &&\n        this.guestCreatedAt <\n          new Date(new Date().valueOf() - 3 * 60 * 60 * 1000))\n    );\n  }\n}\n","import stringify from 'json-stable-stringify';\nimport { requestApi, RequestApiResult } from './api';\nimport { TwitterAuth } from './auth';\nimport { TwitterApiErrorRaw } from './errors';\n\nexport interface LegacyUserRaw {\n  created_at?: string;\n  description?: string;\n  entities?: {\n    url?: {\n      urls?: {\n        expanded_url?: string;\n      }[];\n    };\n  };\n  favourites_count?: number;\n  followers_count?: number;\n  friends_count?: number;\n  media_count?: number;\n  statuses_count?: number;\n  id_str?: string;\n  listed_count?: number;\n  name?: string;\n  location: string;\n  geo_enabled?: boolean;\n  pinned_tweet_ids_str?: string[];\n  profile_background_color?: string;\n  profile_banner_url?: string;\n  profile_image_url_https?: string;\n  protected?: boolean;\n  screen_name?: string;\n  verified?: boolean;\n  has_custom_timelines?: boolean;\n  has_extended_profile?: boolean;\n  url?: string;\n  can_dm?: boolean;\n}\n\n/**\n * A parsed profile object.\n */\nexport interface Profile {\n  avatar?: string;\n  banner?: string;\n  biography?: string;\n  birthday?: string;\n  followersCount?: number;\n  followingCount?: number;\n  friendsCount?: number;\n  mediaCount?: number;\n  statusesCount?: number;\n  isPrivate?: boolean;\n  isVerified?: boolean;\n  isBlueVerified?: boolean;\n  joined?: Date;\n  likesCount?: number;\n  listedCount?: number;\n  location: string;\n  name?: string;\n  pinnedTweetIds?: string[];\n  tweetsCount?: number;\n  url?: string;\n  userId?: string;\n  username?: string;\n  website?: string;\n  canDm?: boolean;\n}\n\nexport interface UserRaw {\n  data: {\n    user: {\n      result: {\n        rest_id?: string;\n        is_blue_verified?: boolean;\n        legacy: LegacyUserRaw;\n      };\n    };\n  };\n  errors?: TwitterApiErrorRaw[];\n}\n\nfunction getAvatarOriginalSizeUrl(avatarUrl: string | undefined) {\n  return avatarUrl ? avatarUrl.replace('_normal', '') : undefined;\n}\n\nexport function parseProfile(\n  user: LegacyUserRaw,\n  isBlueVerified?: boolean,\n): Profile {\n  const profile: Profile = {\n    avatar: getAvatarOriginalSizeUrl(user.profile_image_url_https),\n    banner: user.profile_banner_url,\n    biography: user.description,\n    followersCount: user.followers_count,\n    followingCount: user.friends_count,\n    friendsCount: user.friends_count,\n    mediaCount: user.media_count,\n    isPrivate: user.protected ?? false,\n    isVerified: user.verified,\n    likesCount: user.favourites_count,\n    listedCount: user.listed_count,\n    location: user.location,\n    name: user.name,\n    pinnedTweetIds: user.pinned_tweet_ids_str,\n    tweetsCount: user.statuses_count,\n    url: `https://twitter.com/${user.screen_name}`,\n    userId: user.id_str,\n    username: user.screen_name,\n    isBlueVerified: isBlueVerified ?? false,\n    canDm: user.can_dm,\n  };\n\n  if (user.created_at != null) {\n    profile.joined = new Date(Date.parse(user.created_at));\n  }\n\n  const urls = user.entities?.url?.urls;\n  if (urls?.length != null && urls?.length > 0) {\n    profile.website = urls[0].expanded_url;\n  }\n\n  return profile;\n}\n\nexport async function getProfile(\n  username: string,\n  auth: TwitterAuth,\n): Promise<RequestApiResult<Profile>> {\n  const params = new URLSearchParams();\n  params.set(\n    'variables',\n    stringify({\n      screen_name: username,\n      withSafetyModeUserFields: true,\n    }) ?? '',\n  );\n\n  params.set(\n    'features',\n    stringify({\n      hidden_profile_likes_enabled: false,\n      hidden_profile_subscriptions_enabled: false, // Auth-restricted\n      responsive_web_graphql_exclude_directive_enabled: true,\n      verified_phone_label_enabled: false,\n      subscriptions_verification_info_is_identity_verified_enabled: false,\n      subscriptions_verification_info_verified_since_enabled: true,\n      highlights_tweets_tab_ui_enabled: true,\n      creator_subscriptions_tweet_preview_api_enabled: true,\n      responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\n      responsive_web_graphql_timeline_navigation_enabled: true,\n    }) ?? '',\n  );\n\n  params.set('fieldToggles', stringify({ withAuxiliaryUserLabels: false }) ?? '');\n\n  const res = await requestApi<UserRaw>(\n    `https://twitter.com/i/api/graphql/G3KGOASz96M-Qu0nwmGXNg/UserByScreenName?${params.toString()}`,\n    auth,\n  );\n  if (!res.success) {\n    return res;\n  }\n\n  const { value } = res;\n  const { errors } = value;\n  if (errors != null && errors.length > 0) {\n    return {\n      success: false,\n      err: new Error(errors[0].message),\n    };\n  }\n\n  if (!value.data || !value.data.user || !value.data.user.result) {\n    return {\n      success: false,\n      err: new Error('User not found.'),\n    };\n  }\n  const { result: user } = value.data.user;\n  const { legacy } = user;\n\n  if (user.rest_id == null || user.rest_id.length === 0) {\n    return {\n      success: false,\n      err: new Error('rest_id not found.'),\n    };\n  }\n\n  legacy.id_str = user.rest_id;\n\n  if (legacy.screen_name == null || legacy.screen_name.length === 0) {\n    return {\n      success: false,\n      err: new Error(`Either ${username} does not exist or is private.`),\n    };\n  }\n\n  return {\n    success: true,\n    value: parseProfile(user.legacy, user.is_blue_verified),\n  };\n}\n\nconst idCache = new Map<string, string>();\n\nexport async function getScreenNameByUserId(\n  userId: string,\n  auth: TwitterAuth,\n): Promise<RequestApiResult<string>> {\n  const params = new URLSearchParams();\n  params.set(\n    'variables',\n    stringify({\n      userId: userId,\n      withSafetyModeUserFields: true,\n    }) ?? '',\n  );\n\n  params.set(\n    'features',\n    stringify({\n      hidden_profile_subscriptions_enabled: true,\n      rweb_tipjar_consumption_enabled: true,\n      responsive_web_graphql_exclude_directive_enabled: true,\n      verified_phone_label_enabled: false,\n      highlights_tweets_tab_ui_enabled: true,\n      responsive_web_twitter_article_notes_tab_enabled: true,\n      subscriptions_feature_can_gift_premium: false,\n      creator_subscriptions_tweet_preview_api_enabled: true,\n      responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\n      responsive_web_graphql_timeline_navigation_enabled: true,\n    }) ?? '',\n  );\n\n  const res = await requestApi<UserRaw>(\n    `https://twitter.com/i/api/graphql/xf3jd90KKBCUxdlI_tNHZw/UserByRestId?${params.toString()}`,\n    auth,\n  );\n\n  if (!res.success) {\n    return res;\n  }\n\n  const { value } = res;\n  const { errors } = value;\n  if (errors != null && errors.length > 0) {\n    return {\n      success: false,\n      err: new Error(errors[0].message),\n    };\n  }\n\n  if (!value.data || !value.data.user || !value.data.user.result) {\n    return {\n      success: false,\n      err: new Error('User not found.'),\n    };\n  }\n\n  const { result: user } = value.data.user;\n  const { legacy } = user;\n\n  if (legacy.screen_name == null || legacy.screen_name.length === 0) {\n    return {\n      success: false,\n      err: new Error(\n        `Either user with ID ${userId} does not exist or is private.`,\n      ),\n    };\n  }\n\n  return {\n    success: true,\n    value: legacy.screen_name,\n  };\n}\n\nexport async function getUserIdByScreenName(\n  screenName: string,\n  auth: TwitterAuth,\n): Promise<RequestApiResult<string>> {\n  const cached = idCache.get(screenName);\n  if (cached != null) {\n    return { success: true, value: cached };\n  }\n\n  const profileRes = await getProfile(screenName, auth);\n  if (!profileRes.success) {\n    return profileRes;\n  }\n\n  const profile = profileRes.value;\n  if (profile.userId != null) {\n    idCache.set(screenName, profile.userId);\n\n    return {\n      success: true,\n      value: profile.userId,\n    };\n  }\n\n  return {\n    success: false,\n    err: new Error('User ID is undefined.'),\n  };\n}\n","import { TwitterAuthOptions, TwitterGuestAuth } from './auth';\nimport { requestApi } from './api';\nimport { CookieJar } from 'tough-cookie';\nimport { updateCookieJar } from './requests';\nimport { Headers } from 'headers-polyfill';\nimport { TwitterApiErrorRaw } from './errors';\nimport { Type, type Static } from '@sinclair/typebox';\nimport { Check } from '@sinclair/typebox/value';\nimport * as OTPAuth from 'otpauth';\nimport { LegacyUserRaw, parseProfile, type Profile } from './profile';\n\ninterface TwitterUserAuthFlowInitRequest {\n  flow_name: string;\n  input_flow_data: Record<string, unknown>;\n}\n\ninterface TwitterUserAuthFlowSubtaskRequest {\n  flow_token: string;\n  subtask_inputs: ({\n    subtask_id: string;\n  } & Record<string, unknown>)[];\n}\n\ntype TwitterUserAuthFlowRequest =\n  | TwitterUserAuthFlowInitRequest\n  | TwitterUserAuthFlowSubtaskRequest;\n\ninterface TwitterUserAuthFlowResponse {\n  errors?: TwitterApiErrorRaw[];\n  flow_token?: string;\n  status?: string;\n  subtasks?: TwitterUserAuthSubtask[];\n}\n\ninterface TwitterUserAuthVerifyCredentials {\n  errors?: TwitterApiErrorRaw[];\n}\n\nconst TwitterUserAuthSubtask = Type.Object({\n  subtask_id: Type.String(),\n  enter_text: Type.Optional(Type.Object({})),\n});\ntype TwitterUserAuthSubtask = Static<typeof TwitterUserAuthSubtask>;\n\ntype FlowTokenResultSuccess = {\n  status: 'success';\n  flowToken: string;\n  subtask?: TwitterUserAuthSubtask;\n};\n\ntype FlowTokenResult = FlowTokenResultSuccess | { status: 'error'; err: Error };\n\n/**\n * A user authentication token manager.\n */\nexport class TwitterUserAuth extends TwitterGuestAuth {\n  private userProfile: Profile | undefined;\n\n  constructor(bearerToken: string, options?: Partial<TwitterAuthOptions>) {\n    super(bearerToken, options);\n  }\n\n  async isLoggedIn(): Promise<boolean> {\n    const res = await requestApi<TwitterUserAuthVerifyCredentials>(\n      'https://api.twitter.com/1.1/account/verify_credentials.json',\n      this,\n    );\n    if (!res.success) {\n      return false;\n    }\n\n    const { value: verify } = res;\n    this.userProfile = parseProfile(\n      verify as LegacyUserRaw,\n      (verify as unknown as { verified: boolean }).verified,\n    );\n    return verify && !verify.errors?.length;\n  }\n\n  async me(): Promise<Profile | undefined> {\n    if (this.userProfile) {\n      return this.userProfile;\n    }\n    await this.isLoggedIn();\n    return this.userProfile;\n  }\n\n  async login(\n    username: string,\n    password: string,\n    email?: string,\n    twoFactorSecret?: string,\n    appKey?: string,\n    appSecret?: string,\n    accessToken?: string,\n    accessSecret?: string,\n  ): Promise<void> {\n    await this.updateGuestToken();\n\n    let next = await this.initLogin();\n    while ('subtask' in next && next.subtask) {\n      if (next.subtask.subtask_id === 'LoginJsInstrumentationSubtask') {\n        next = await this.handleJsInstrumentationSubtask(next);\n      } else if (next.subtask.subtask_id === 'LoginEnterUserIdentifierSSO') {\n        next = await this.handleEnterUserIdentifierSSO(next, username);\n      } else if (\n        next.subtask.subtask_id === 'LoginEnterAlternateIdentifierSubtask'\n      ) {\n        next = await this.handleEnterAlternateIdentifierSubtask(\n          next,\n          email as string,\n        );\n      } else if (next.subtask.subtask_id === 'LoginEnterPassword') {\n        next = await this.handleEnterPassword(next, password);\n      } else if (next.subtask.subtask_id === 'AccountDuplicationCheck') {\n        next = await this.handleAccountDuplicationCheck(next);\n      } else if (next.subtask.subtask_id === 'LoginTwoFactorAuthChallenge') {\n        if (twoFactorSecret) {\n          next = await this.handleTwoFactorAuthChallenge(next, twoFactorSecret);\n        } else {\n          throw new Error(\n            'Requested two factor authentication code but no secret provided',\n          );\n        }\n      } else if (next.subtask.subtask_id === 'LoginAcid') {\n        next = await this.handleAcid(next, email);\n      } else if (next.subtask.subtask_id === 'LoginSuccessSubtask') {\n        next = await this.handleSuccessSubtask(next);\n      } else {\n        throw new Error(`Unknown subtask ${next.subtask.subtask_id}`);\n      }\n    }\n    if (appKey && appSecret && accessToken && accessSecret) {\n      this.loginWithV2(appKey, appSecret, accessToken, accessSecret);\n    }\n    if ('err' in next) {\n      throw next.err;\n    }\n  }\n\n  async logout(): Promise<void> {\n    if (!this.isLoggedIn()) {\n      return;\n    }\n\n    await requestApi<void>(\n      'https://api.twitter.com/1.1/account/logout.json',\n      this,\n      'POST',\n    );\n    this.deleteToken();\n    this.jar = new CookieJar();\n  }\n\n  async installCsrfToken(headers: Headers): Promise<void> {\n    const cookies = await this.getCookies();\n    const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n    if (xCsrfToken) {\n      headers.set('x-csrf-token', xCsrfToken.value);\n    }\n  }\n\n  async installTo(headers: Headers): Promise<void> {\n    headers.set('authorization', `Bearer ${this.bearerToken}`);\n    headers.set('cookie', await this.getCookieString());\n    await this.installCsrfToken(headers);\n  }\n\n  private async initLogin() {\n    // Reset certain session-related cookies because Twitter complains sometimes if we don't\n    this.removeCookie('twitter_ads_id=');\n    this.removeCookie('ads_prefs=');\n    this.removeCookie('_twitter_sess=');\n    this.removeCookie('zipbox_forms_auth_token=');\n    this.removeCookie('lang=');\n    this.removeCookie('bouncer_reset_cookie=');\n    this.removeCookie('twid=');\n    this.removeCookie('twitter_ads_idb=');\n    this.removeCookie('email_uid=');\n    this.removeCookie('external_referer=');\n    this.removeCookie('ct0=');\n    this.removeCookie('aa_u=');\n\n    return await this.executeFlowTask({\n      flow_name: 'login',\n      input_flow_data: {\n        flow_context: {\n          debug_overrides: {},\n          start_location: {\n            location: 'splash_screen',\n          },\n        },\n      },\n    });\n  }\n\n  private async handleJsInstrumentationSubtask(prev: FlowTokenResultSuccess) {\n    return await this.executeFlowTask({\n      flow_token: prev.flowToken,\n      subtask_inputs: [\n        {\n          subtask_id: 'LoginJsInstrumentationSubtask',\n          js_instrumentation: {\n            response: '{}',\n            link: 'next_link',\n          },\n        },\n      ],\n    });\n  }\n\n  private async handleEnterAlternateIdentifierSubtask(\n    prev: FlowTokenResultSuccess,\n    email: string,\n  ) {\n    return await this.executeFlowTask({\n      flow_token: prev.flowToken,\n      subtask_inputs: [\n        {\n          subtask_id: 'LoginEnterAlternateIdentifierSubtask',\n          enter_text: {\n            text: email,\n            link: 'next_link',\n          },\n        },\n      ],\n    });\n  }\n\n  private async handleEnterUserIdentifierSSO(\n    prev: FlowTokenResultSuccess,\n    username: string,\n  ) {\n    return await this.executeFlowTask({\n      flow_token: prev.flowToken,\n      subtask_inputs: [\n        {\n          subtask_id: 'LoginEnterUserIdentifierSSO',\n          settings_list: {\n            setting_responses: [\n              {\n                key: 'user_identifier',\n                response_data: {\n                  text_data: { result: username },\n                },\n              },\n            ],\n            link: 'next_link',\n          },\n        },\n      ],\n    });\n  }\n\n  private async handleEnterPassword(\n    prev: FlowTokenResultSuccess,\n    password: string,\n  ) {\n    return await this.executeFlowTask({\n      flow_token: prev.flowToken,\n      subtask_inputs: [\n        {\n          subtask_id: 'LoginEnterPassword',\n          enter_password: {\n            password,\n            link: 'next_link',\n          },\n        },\n      ],\n    });\n  }\n\n  private async handleAccountDuplicationCheck(prev: FlowTokenResultSuccess) {\n    return await this.executeFlowTask({\n      flow_token: prev.flowToken,\n      subtask_inputs: [\n        {\n          subtask_id: 'AccountDuplicationCheck',\n          check_logged_in_account: {\n            link: 'AccountDuplicationCheck_false',\n          },\n        },\n      ],\n    });\n  }\n\n  private async handleTwoFactorAuthChallenge(\n    prev: FlowTokenResultSuccess,\n    secret: string,\n  ) {\n    const totp = new OTPAuth.TOTP({ secret });\n    let error;\n    for (let attempts = 1; attempts < 4; attempts += 1) {\n      try {\n        return await this.executeFlowTask({\n          flow_token: prev.flowToken,\n          subtask_inputs: [\n            {\n              subtask_id: 'LoginTwoFactorAuthChallenge',\n              enter_text: {\n                link: 'next_link',\n                text: totp.generate(),\n              },\n            },\n          ],\n        });\n      } catch (err) {\n        error = err;\n        await new Promise((resolve) => setTimeout(resolve, 2000 * attempts));\n      }\n    }\n    throw error;\n  }\n\n  private async handleAcid(\n    prev: FlowTokenResultSuccess,\n    email: string | undefined,\n  ) {\n    return await this.executeFlowTask({\n      flow_token: prev.flowToken,\n      subtask_inputs: [\n        {\n          subtask_id: 'LoginAcid',\n          enter_text: {\n            text: email,\n            link: 'next_link',\n          },\n        },\n      ],\n    });\n  }\n\n  private async handleSuccessSubtask(prev: FlowTokenResultSuccess) {\n    return await this.executeFlowTask({\n      flow_token: prev.flowToken,\n      subtask_inputs: [],\n    });\n  }\n\n  private async executeFlowTask(\n    data: TwitterUserAuthFlowRequest,\n  ): Promise<FlowTokenResult> {\n    const onboardingTaskUrl =\n      'https://api.twitter.com/1.1/onboarding/task.json';\n\n    const token = this.guestToken;\n    if (token == null) {\n      throw new Error('Authentication token is null or undefined.');\n    }\n\n    const headers = new Headers({\n      authorization: `Bearer ${this.bearerToken}`,\n      cookie: await this.getCookieString(),\n      'content-type': 'application/json',\n      'User-Agent':\n        'Mozilla/5.0 (Linux; Android 11; Nokia G20) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.88 Mobile Safari/537.36',\n      'x-guest-token': token,\n      'x-twitter-auth-type': 'OAuth2Client',\n      'x-twitter-active-user': 'yes',\n      'x-twitter-client-language': 'en',\n    });\n    await this.installCsrfToken(headers);\n\n    const res = await this.fetch(onboardingTaskUrl, {\n      credentials: 'include',\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(data),\n    });\n\n    await updateCookieJar(this.jar, res.headers);\n\n    if (!res.ok) {\n      return { status: 'error', err: new Error(await res.text()) };\n    }\n\n    const flow: TwitterUserAuthFlowResponse = await res.json();\n    if (flow?.flow_token == null) {\n      return { status: 'error', err: new Error('flow_token not found.') };\n    }\n\n    if (flow.errors?.length) {\n      return {\n        status: 'error',\n        err: new Error(\n          `Authentication error (${flow.errors[0].code}): ${flow.errors[0].message}`,\n        ),\n      };\n    }\n\n    if (typeof flow.flow_token !== 'string') {\n      return {\n        status: 'error',\n        err: new Error('flow_token was not a string.'),\n      };\n    }\n\n    const subtask = flow.subtasks?.length ? flow.subtasks[0] : undefined;\n    Check(TwitterUserAuthSubtask, subtask);\n\n    if (subtask && subtask.subtask_id === 'DenyLoginSubtask') {\n      return {\n        status: 'error',\n        err: new Error('Authentication error: DenyLoginSubtask'),\n      };\n    }\n\n    return {\n      status: 'success',\n      subtask,\n      flowToken: flow.flow_token,\n    };\n  }\n}\n","import { Profile } from './profile';\nimport { Tweet } from './tweets';\n\nexport interface FetchProfilesResponse {\n  profiles: Profile[];\n  next?: string;\n}\n\nexport type FetchProfiles = (\n  query: string,\n  maxProfiles: number,\n  cursor: string | undefined,\n) => Promise<FetchProfilesResponse>;\n\nexport interface FetchTweetsResponse {\n  tweets: Tweet[];\n  next?: string;\n}\n\nexport type FetchTweets = (\n  query: string,\n  maxTweets: number,\n  cursor: string | undefined,\n) => Promise<FetchTweetsResponse>;\n\nexport async function* getUserTimeline(\n  query: string,\n  maxProfiles: number,\n  fetchFunc: FetchProfiles,\n): AsyncGenerator<Profile, void> {\n  let nProfiles = 0;\n  let cursor: string | undefined = undefined;\n  let consecutiveEmptyBatches = 0;\n  while (nProfiles < maxProfiles) {\n    const batch: FetchProfilesResponse = await fetchFunc(\n      query,\n      maxProfiles,\n      cursor,\n    );\n\n    const { profiles, next } = batch;\n    cursor = next;\n\n    if (profiles.length === 0) {\n      consecutiveEmptyBatches++;\n      if (consecutiveEmptyBatches > 5) break;\n    } else consecutiveEmptyBatches = 0;\n\n    for (const profile of profiles) {\n      if (nProfiles < maxProfiles) yield profile;\n      else break;\n      nProfiles++;\n    }\n\n    if (!next) break;\n  }\n}\n\nexport async function* getTweetTimeline(\n  query: string,\n  maxTweets: number,\n  fetchFunc: FetchTweets,\n): AsyncGenerator<Tweet, void> {\n  let nTweets = 0;\n  let cursor: string | undefined = undefined;\n  while (nTweets < maxTweets) {\n    const batch: FetchTweetsResponse = await fetchFunc(\n      query,\n      maxTweets,\n      cursor,\n    );\n\n    const { tweets, next } = batch;\n\n    if (tweets.length === 0) {\n      break;\n    }\n\n    for (const tweet of tweets) {\n      if (nTweets < maxTweets) {\n        cursor = next;\n        yield tweet;\n      } else {\n        break;\n      }\n\n      nTweets++;\n    }\n  }\n}\n","export type NonNullableField<T, K extends keyof T> = {\n  [P in K]-?: T[P];\n} & T;\n\nexport function isFieldDefined<T, K extends keyof T>(key: K) {\n  return function (value: T): value is NonNullableField<T, K> {\n    return isDefined(value[key]);\n  };\n}\n\nexport function isDefined<T>(value: T | null | undefined): value is T {\n  return value != null;\n}\n","import { LegacyTweetRaw, TimelineMediaExtendedRaw } from './timeline-v1';\nimport { Photo, Video } from './tweets';\nimport { isFieldDefined, NonNullableField } from './type-util';\n\nconst reHashtag = /\\B(\\#\\S+\\b)/g;\nconst reCashtag = /\\B(\\$\\S+\\b)/g;\nconst reTwitterUrl = /https:(\\/\\/t\\.co\\/([A-Za-z0-9]|[A-Za-z]){10})/g;\nconst reUsername = /\\B(\\@\\S{1,15}\\b)/g;\n\nexport function parseMediaGroups(media: TimelineMediaExtendedRaw[]): {\n  sensitiveContent?: boolean;\n  photos: Photo[];\n  videos: Video[];\n} {\n  const photos: Photo[] = [];\n  const videos: Video[] = [];\n  let sensitiveContent: boolean | undefined = undefined;\n\n  for (const m of media\n    .filter(isFieldDefined('id_str'))\n    .filter(isFieldDefined('media_url_https'))) {\n    if (m.type === 'photo') {\n      photos.push({\n        id: m.id_str,\n        url: m.media_url_https,\n        alt_text: m.ext_alt_text,\n      });\n    } else if (m.type === 'video') {\n      videos.push(parseVideo(m));\n    }\n\n    const sensitive = m.ext_sensitive_media_warning;\n    if (sensitive != null) {\n      sensitiveContent =\n        sensitive.adult_content ||\n        sensitive.graphic_violence ||\n        sensitive.other;\n    }\n  }\n\n  return { sensitiveContent, photos, videos };\n}\n\nfunction parseVideo(\n  m: NonNullableField<TimelineMediaExtendedRaw, 'id_str' | 'media_url_https'>,\n): Video {\n  const video: Video = {\n    id: m.id_str,\n    preview: m.media_url_https,\n  };\n\n  let maxBitrate = 0;\n  const variants = m.video_info?.variants ?? [];\n  for (const variant of variants) {\n    const bitrate = variant.bitrate;\n    if (bitrate != null && bitrate > maxBitrate && variant.url != null) {\n      let variantUrl = variant.url;\n      const stringStart = 0;\n      const tagSuffixIdx = variantUrl.indexOf('?tag=10');\n      if (tagSuffixIdx !== -1) {\n        variantUrl = variantUrl.substring(stringStart, tagSuffixIdx + 1);\n      }\n\n      video.url = variantUrl;\n      maxBitrate = bitrate;\n    }\n  }\n\n  return video;\n}\n\nexport function reconstructTweetHtml(\n  tweet: LegacyTweetRaw,\n  photos: Photo[],\n  videos: Video[],\n): string {\n  const media: string[] = [];\n\n  // HTML parsing with regex :)\n  let html = tweet.full_text ?? '';\n\n  html = html.replace(reHashtag, linkHashtagHtml);\n  html = html.replace(reCashtag, linkCashtagHtml);\n  html = html.replace(reUsername, linkUsernameHtml);\n  html = html.replace(reTwitterUrl, unwrapTcoUrlHtml(tweet, media));\n\n  for (const { url } of photos) {\n    if (media.indexOf(url) !== -1) {\n      continue;\n    }\n\n    html += `<br><img src=\"${url}\"/>`;\n  }\n\n  for (const { preview: url } of videos) {\n    if (media.indexOf(url) !== -1) {\n      continue;\n    }\n\n    html += `<br><img src=\"${url}\"/>`;\n  }\n\n  html = html.replace(/\\n/g, '<br>');\n\n  return html;\n}\n\nfunction linkHashtagHtml(hashtag: string) {\n  return `<a href=\"https://twitter.com/hashtag/${hashtag.replace(\n    '#',\n    '',\n  )}\">${hashtag}</a>`;\n}\n\nfunction linkCashtagHtml(cashtag: string) {\n  return `<a href=\"https://twitter.com/search?q=%24${cashtag.replace(\n    '$',\n    '',\n  )}\">${cashtag}</a>`;\n}\n\nfunction linkUsernameHtml(username: string) {\n  return `<a href=\"https://twitter.com/${username.replace(\n    '@',\n    '',\n  )}\">${username}</a>`;\n}\n\nfunction unwrapTcoUrlHtml(tweet: LegacyTweetRaw, foundedMedia: string[]) {\n  return function (tco: string) {\n    for (const entity of tweet.entities?.urls ?? []) {\n      if (tco === entity.url && entity.expanded_url != null) {\n        return `<a href=\"${entity.expanded_url}\">${tco}</a>`;\n      }\n    }\n\n    for (const entity of tweet.extended_entities?.media ?? []) {\n      if (tco === entity.url && entity.media_url_https != null) {\n        foundedMedia.push(entity.media_url_https);\n        return `<br><a href=\"${tco}\"><img src=\"${entity.media_url_https}\"/></a>`;\n      }\n    }\n\n    return tco;\n  };\n}\n","import { LegacyUserRaw } from './profile';\nimport { parseMediaGroups, reconstructTweetHtml } from './timeline-tweet-util';\nimport {\n  LegacyTweetRaw,\n  ParseTweetResult,\n  QueryTweetsResponse,\n  SearchResultRaw,\n  TimelineResultRaw,\n} from './timeline-v1';\nimport { Tweet } from './tweets';\nimport { isFieldDefined } from './type-util';\n\nexport interface TimelineUserResultRaw {\n  rest_id?: string;\n  legacy?: LegacyUserRaw;\n  is_blue_verified?: boolean;\n}\n\nexport interface TimelineEntryItemContentRaw {\n  itemType?: string;\n  tweetDisplayType?: string;\n  tweetResult?: {\n    result?: TimelineResultRaw;\n  };\n  tweet_results?: {\n    result?: TimelineResultRaw;\n  };\n  userDisplayType?: string;\n  user_results?: {\n    result?: TimelineUserResultRaw;\n  };\n}\n\nexport interface TimelineEntryRaw {\n  entryId: string;\n  content?: {\n    cursorType?: string;\n    value?: string;\n    items?: {\n      entryId?: string;\n      item?: {\n        content?: TimelineEntryItemContentRaw;\n        itemContent?: SearchEntryItemContentRaw;\n      };\n    }[];\n    itemContent?: TimelineEntryItemContentRaw;\n  };\n}\n\nexport interface SearchEntryItemContentRaw {\n  tweetDisplayType?: string;\n  tweet_results?: {\n    result?: SearchResultRaw;\n  };\n  userDisplayType?: string;\n  user_results?: {\n    result?: TimelineUserResultRaw;\n  };\n}\n\nexport interface SearchEntryRaw {\n  entryId: string;\n  sortIndex: string;\n  content?: {\n    cursorType?: string;\n    entryType?: string;\n    __typename?: string;\n    value?: string;\n    items?: {\n      item?: {\n        content?: SearchEntryItemContentRaw;\n      };\n    }[];\n    itemContent?: SearchEntryItemContentRaw;\n  };\n}\n\nexport interface TimelineInstruction {\n  entries?: TimelineEntryRaw[];\n  entry?: TimelineEntryRaw;\n  type?: string;\n}\n\nexport interface TimelineV2 {\n  data?: {\n    user?: {\n      result?: {\n        timeline_v2?: {\n          timeline?: {\n            instructions?: TimelineInstruction[];\n          };\n        };\n      };\n    };\n  };\n}\n\nexport interface ThreadedConversation {\n  data?: {\n    threaded_conversation_with_injections_v2?: {\n      instructions?: TimelineInstruction[];\n    };\n  };\n}\n\nexport function parseLegacyTweet(\n  user?: LegacyUserRaw,\n  tweet?: LegacyTweetRaw,\n): ParseTweetResult {\n  if (tweet == null) {\n    return {\n      success: false,\n      err: new Error('Tweet was not found in the timeline object.'),\n    };\n  }\n\n  if (user == null) {\n    return {\n      success: false,\n      err: new Error('User was not found in the timeline object.'),\n    };\n  }\n\n  if (!tweet.id_str) {\n    if (!tweet.conversation_id_str) {\n      return {\n        success: false,\n        err: new Error('Tweet ID was not found in object.'),\n      };\n    }\n\n    tweet.id_str = tweet.conversation_id_str;\n  }\n\n  const hashtags = tweet.entities?.hashtags ?? [];\n  const mentions = tweet.entities?.user_mentions ?? [];\n  const media = tweet.extended_entities?.media ?? [];\n  const pinnedTweets = new Set<string | undefined>(\n    user.pinned_tweet_ids_str ?? [],\n  );\n  const urls = tweet.entities?.urls ?? [];\n  const { photos, videos, sensitiveContent } = parseMediaGroups(media);\n\n  const tw: Tweet = {\n    bookmarkCount: tweet.bookmark_count,\n    conversationId: tweet.conversation_id_str,\n    id: tweet.id_str,\n    hashtags: hashtags\n      .filter(isFieldDefined('text'))\n      .map((hashtag) => hashtag.text),\n    likes: tweet.favorite_count,\n    mentions: mentions.filter(isFieldDefined('id_str')).map((mention) => ({\n      id: mention.id_str,\n      username: mention.screen_name,\n      name: mention.name,\n    })),\n    name: user.name,\n    permanentUrl: `https://twitter.com/${user.screen_name}/status/${tweet.id_str}`,\n    photos,\n    replies: tweet.reply_count,\n    retweets: tweet.retweet_count,\n    text: tweet.full_text,\n    thread: [],\n    urls: urls\n      .filter(isFieldDefined('expanded_url'))\n      .map((url) => url.expanded_url),\n    userId: tweet.user_id_str,\n    username: user.screen_name,\n    videos,\n    isQuoted: false,\n    isReply: false,\n    isRetweet: false,\n    isPin: false,\n    sensitiveContent: false,\n  };\n\n  if (tweet.created_at) {\n    tw.timeParsed = new Date(Date.parse(tweet.created_at));\n    tw.timestamp = Math.floor(tw.timeParsed.valueOf() / 1000);\n  }\n\n  if (tweet.place?.id) {\n    tw.place = tweet.place;\n  }\n\n  const quotedStatusIdStr = tweet.quoted_status_id_str;\n  const inReplyToStatusIdStr = tweet.in_reply_to_status_id_str;\n  const retweetedStatusIdStr = tweet.retweeted_status_id_str;\n  const retweetedStatusResult = tweet.retweeted_status_result?.result;\n\n  if (quotedStatusIdStr) {\n    tw.isQuoted = true;\n    tw.quotedStatusId = quotedStatusIdStr;\n  }\n\n  if (inReplyToStatusIdStr) {\n    tw.isReply = true;\n    tw.inReplyToStatusId = inReplyToStatusIdStr;\n  }\n\n  if (retweetedStatusIdStr || retweetedStatusResult) {\n    tw.isRetweet = true;\n    tw.retweetedStatusId = retweetedStatusIdStr;\n\n    if (retweetedStatusResult) {\n      const parsedResult = parseLegacyTweet(\n        retweetedStatusResult?.core?.user_results?.result?.legacy,\n        retweetedStatusResult?.legacy,\n      );\n\n      if (parsedResult.success) {\n        tw.retweetedStatus = parsedResult.tweet;\n      }\n    }\n  }\n\n  const views = parseInt(tweet.ext_views?.count ?? '');\n  if (!isNaN(views)) {\n    tw.views = views;\n  }\n\n  if (pinnedTweets.has(tweet.id_str)) {\n    // TODO: Update tests so this can be assigned at the tweet declaration\n    tw.isPin = true;\n  }\n\n  if (sensitiveContent) {\n    // TODO: Update tests so this can be assigned at the tweet declaration\n    tw.sensitiveContent = true;\n  }\n\n  tw.html = reconstructTweetHtml(tweet, tw.photos, tw.videos);\n\n  return { success: true, tweet: tw };\n}\n\nfunction parseResult(result?: TimelineResultRaw): ParseTweetResult {\n  const noteTweetResultText =\n    result?.note_tweet?.note_tweet_results?.result?.text;\n\n  if (result?.legacy && noteTweetResultText) {\n    result.legacy.full_text = noteTweetResultText;\n  }\n\n  const tweetResult = parseLegacyTweet(\n    result?.core?.user_results?.result?.legacy,\n    result?.legacy,\n  );\n  if (!tweetResult.success) {\n    return tweetResult;\n  }\n\n  if (!tweetResult.tweet.views && result?.views?.count) {\n    const views = parseInt(result.views.count);\n    if (!isNaN(views)) {\n      tweetResult.tweet.views = views;\n    }\n  }\n\n  const quotedResult = result?.quoted_status_result?.result;\n  if (quotedResult) {\n    if (quotedResult.legacy && quotedResult.rest_id) {\n      quotedResult.legacy.id_str = quotedResult.rest_id;\n    }\n\n    const quotedTweetResult = parseResult(quotedResult);\n    if (quotedTweetResult.success) {\n      tweetResult.tweet.quotedStatus = quotedTweetResult.tweet;\n    }\n  }\n\n  return tweetResult;\n}\n\nconst expectedEntryTypes = ['tweet', 'profile-conversation'];\n\nexport function parseTimelineTweetsV2(\n  timeline: TimelineV2,\n): QueryTweetsResponse {\n  let bottomCursor: string | undefined;\n  let topCursor: string | undefined;\n  const tweets: Tweet[] = [];\n  const instructions =\n    timeline.data?.user?.result?.timeline_v2?.timeline?.instructions ?? [];\n  for (const instruction of instructions) {\n    const entries = instruction.entries ?? [];\n\n    for (const entry of entries) {\n      const entryContent = entry.content;\n      if (!entryContent) continue;\n\n      // Handle pagination\n      if (entryContent.cursorType === 'Bottom') {\n        bottomCursor = entryContent.value;\n        continue;\n      } else if (entryContent.cursorType === 'Top') {\n        topCursor = entryContent.value;\n        continue;\n      }\n\n      const idStr = entry.entryId;\n      if (\n        !expectedEntryTypes.some((entryType) => idStr.startsWith(entryType))\n      ) {\n        continue;\n      }\n\n      if (entryContent.itemContent) {\n        // Typically TimelineTimelineTweet entries\n        parseAndPush(tweets, entryContent.itemContent, idStr);\n      } else if (entryContent.items) {\n        // Typically TimelineTimelineModule entries\n        for (const item of entryContent.items) {\n          if (item.item?.itemContent) {\n            parseAndPush(tweets, item.item.itemContent, idStr);\n          }\n        }\n      }\n    }\n  }\n\n  return { tweets, next: bottomCursor, previous: topCursor };\n}\n\nexport function parseTimelineEntryItemContentRaw(\n  content: TimelineEntryItemContentRaw,\n  entryId: string,\n  isConversation = false,\n) {\n  let result = content.tweet_results?.result ?? content.tweetResult?.result;\n  if (\n    result?.__typename === 'Tweet' ||\n    (result?.__typename === 'TweetWithVisibilityResults' && result?.tweet)\n  ) {\n    if (result?.__typename === 'TweetWithVisibilityResults')\n      result = result.tweet;\n\n    if (result?.legacy) {\n      result.legacy.id_str =\n        result.rest_id ??\n        entryId.replace('conversation-', '').replace('tweet-', '');\n    }\n\n    const tweetResult = parseResult(result);\n    if (tweetResult.success) {\n      if (isConversation) {\n        if (content?.tweetDisplayType === 'SelfThread') {\n          tweetResult.tweet.isSelfThread = true;\n        }\n      }\n\n      return tweetResult.tweet;\n    }\n  }\n\n  return null;\n}\n\nexport function parseAndPush(\n  tweets: Tweet[],\n  content: TimelineEntryItemContentRaw,\n  entryId: string,\n  isConversation = false,\n) {\n  const tweet = parseTimelineEntryItemContentRaw(\n    content,\n    entryId,\n    isConversation,\n  );\n\n  if (tweet) {\n    tweets.push(tweet);\n  }\n}\n\nexport function parseThreadedConversation(\n  conversation: ThreadedConversation,\n): Tweet[] {\n  const tweets: Tweet[] = [];\n  const instructions =\n    conversation.data?.threaded_conversation_with_injections_v2?.instructions ??\n    [];\n\n  for (const instruction of instructions) {\n    const entries = instruction.entries ?? [];\n    for (const entry of entries) {\n      const entryContent = entry.content?.itemContent;\n      if (entryContent) {\n        parseAndPush(tweets, entryContent, entry.entryId, true);\n      }\n\n      for (const item of entry.content?.items ?? []) {\n        const itemContent = item.item?.itemContent;\n        if (itemContent) {\n          parseAndPush(tweets, itemContent, entry.entryId, true);\n        }\n      }\n    }\n  }\n\n  for (const tweet of tweets) {\n    if (tweet.inReplyToStatusId) {\n      for (const parentTweet of tweets) {\n        if (parentTweet.id === tweet.inReplyToStatusId) {\n          tweet.inReplyToStatus = parentTweet;\n          break;\n        }\n      }\n    }\n\n    if (tweet.isSelfThread && tweet.conversationId === tweet.id) {\n      for (const childTweet of tweets) {\n        if (childTweet.isSelfThread && childTweet.id !== tweet.id) {\n          tweet.thread.push(childTweet);\n        }\n      }\n\n      if (tweet.thread.length === 0) {\n        tweet.isSelfThread = false;\n      }\n    }\n  }\n\n  return tweets;\n}\n\nexport interface TimelineArticle {\n  id: string;\n  articleId: string;\n  title: string;\n  previewText: string;\n  coverMediaUrl?: string;\n  text: string;\n}\n\nexport function parseArticle(\n  conversation: ThreadedConversation,\n): TimelineArticle[] {\n  const articles: TimelineArticle[] = [];\n  for (const instruction of conversation.data\n    ?.threaded_conversation_with_injections_v2?.instructions ?? []) {\n    for (const entry of instruction.entries ?? []) {\n      const id = entry.content?.itemContent?.tweet_results?.result?.rest_id;\n      const article =\n        entry.content?.itemContent?.tweet_results?.result?.article\n          ?.article_results?.result;\n      if (!id || !article) continue;\n      const text =\n        article.content_state?.blocks\n          ?.map((block) => block.text)\n          .join('\\n\\n') ?? '';\n      articles.push({\n        id,\n        articleId: article.rest_id || '',\n        coverMediaUrl: article.cover_media?.media_info?.original_img_url,\n        previewText: article.preview_text || '',\n        text,\n        title: article.title || '',\n      });\n    }\n  }\n  return articles;\n}\n","import { Profile, parseProfile } from './profile';\nimport { QueryProfilesResponse, QueryTweetsResponse } from './timeline-v1';\nimport { SearchEntryRaw, parseLegacyTweet } from './timeline-v2';\nimport { Tweet } from './tweets';\n\nexport interface SearchTimeline {\n  data?: {\n    search_by_raw_query?: {\n      search_timeline?: {\n        timeline?: {\n          instructions?: {\n            entries?: SearchEntryRaw[];\n            entry?: SearchEntryRaw;\n            type?: string;\n          }[];\n        };\n      };\n    };\n  };\n}\n\nexport function parseSearchTimelineTweets(\n  timeline: SearchTimeline,\n): QueryTweetsResponse {\n  let bottomCursor: string | undefined;\n  let topCursor: string | undefined;\n  const tweets: Tweet[] = [];\n  const instructions =\n    timeline.data?.search_by_raw_query?.search_timeline?.timeline\n      ?.instructions ?? [];\n  for (const instruction of instructions) {\n    if (\n      instruction.type === 'TimelineAddEntries' ||\n      instruction.type === 'TimelineReplaceEntry'\n    ) {\n      if (instruction.entry?.content?.cursorType === 'Bottom') {\n        bottomCursor = instruction.entry.content.value;\n        continue;\n      } else if (instruction.entry?.content?.cursorType === 'Top') {\n        topCursor = instruction.entry.content.value;\n        continue;\n      }\n\n      const entries = instruction.entries ?? [];\n      for (const entry of entries) {\n        const itemContent = entry.content?.itemContent;\n        if (itemContent?.tweetDisplayType === 'Tweet') {\n          const tweetResultRaw = itemContent.tweet_results?.result;\n          const tweetResult = parseLegacyTweet(\n            tweetResultRaw?.core?.user_results?.result?.legacy,\n            tweetResultRaw?.legacy,\n          );\n\n          if (tweetResult.success) {\n            if (!tweetResult.tweet.views && tweetResultRaw?.views?.count) {\n              const views = parseInt(tweetResultRaw.views.count);\n              if (!isNaN(views)) {\n                tweetResult.tweet.views = views;\n              }\n            }\n\n            tweets.push(tweetResult.tweet);\n          }\n        } else if (entry.content?.cursorType === 'Bottom') {\n          bottomCursor = entry.content.value;\n        } else if (entry.content?.cursorType === 'Top') {\n          topCursor = entry.content.value;\n        }\n      }\n    }\n  }\n\n  return { tweets, next: bottomCursor, previous: topCursor };\n}\n\nexport function parseSearchTimelineUsers(\n  timeline: SearchTimeline,\n): QueryProfilesResponse {\n  let bottomCursor: string | undefined;\n  let topCursor: string | undefined;\n  const profiles: Profile[] = [];\n  const instructions =\n    timeline.data?.search_by_raw_query?.search_timeline?.timeline\n      ?.instructions ?? [];\n\n  for (const instruction of instructions) {\n    if (\n      instruction.type === 'TimelineAddEntries' ||\n      instruction.type === 'TimelineReplaceEntry'\n    ) {\n      if (instruction.entry?.content?.cursorType === 'Bottom') {\n        bottomCursor = instruction.entry.content.value;\n        continue;\n      } else if (instruction.entry?.content?.cursorType === 'Top') {\n        topCursor = instruction.entry.content.value;\n        continue;\n      }\n\n      const entries = instruction.entries ?? [];\n      for (const entry of entries) {\n        const itemContent = entry.content?.itemContent;\n        if (itemContent?.userDisplayType === 'User') {\n          const userResultRaw = itemContent.user_results?.result;\n\n          if (userResultRaw?.legacy) {\n            const profile = parseProfile(\n              userResultRaw.legacy,\n              userResultRaw.is_blue_verified,\n            );\n\n            if (!profile.userId) {\n              profile.userId = userResultRaw.rest_id;\n            }\n\n            profiles.push(profile);\n          }\n        } else if (entry.content?.cursorType === 'Bottom') {\n          bottomCursor = entry.content.value;\n        } else if (entry.content?.cursorType === 'Top') {\n          topCursor = entry.content.value;\n        }\n      }\n    }\n  }\n\n  return { profiles, next: bottomCursor, previous: topCursor };\n}\n","import { addApiFeatures, requestApi } from './api';\nimport { TwitterAuth } from './auth';\nimport { Profile } from './profile';\nimport { QueryProfilesResponse, QueryTweetsResponse } from './timeline-v1';\nimport { getTweetTimeline, getUserTimeline } from './timeline-async';\nimport { Tweet } from './tweets';\nimport {\n  SearchTimeline,\n  parseSearchTimelineTweets,\n  parseSearchTimelineUsers,\n} from './timeline-search';\nimport stringify from 'json-stable-stringify';\n\n/**\n * The categories that can be used in Twitter searches.\n */\nexport enum SearchMode {\n  Top,\n  Latest,\n  Photos,\n  Videos,\n  Users,\n}\n\nexport function searchTweets(\n  query: string,\n  maxTweets: number,\n  searchMode: SearchMode,\n  auth: TwitterAuth,\n): AsyncGenerator<Tweet, void> {\n  return getTweetTimeline(query, maxTweets, (q, mt, c) => {\n    return fetchSearchTweets(q, mt, searchMode, auth, c);\n  });\n}\n\nexport function searchProfiles(\n  query: string,\n  maxProfiles: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Profile, void> {\n  return getUserTimeline(query, maxProfiles, (q, mt, c) => {\n    return fetchSearchProfiles(q, mt, auth, c);\n  });\n}\n\nexport async function fetchSearchTweets(\n  query: string,\n  maxTweets: number,\n  searchMode: SearchMode,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<QueryTweetsResponse> {\n  const timeline = await getSearchTimeline(\n    query,\n    maxTweets,\n    searchMode,\n    auth,\n    cursor,\n  );\n\n  return parseSearchTimelineTweets(timeline);\n}\n\nexport async function fetchSearchProfiles(\n  query: string,\n  maxProfiles: number,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<QueryProfilesResponse> {\n  const timeline = await getSearchTimeline(\n    query,\n    maxProfiles,\n    SearchMode.Users,\n    auth,\n    cursor,\n  );\n\n  return parseSearchTimelineUsers(timeline);\n}\n\nasync function getSearchTimeline(\n  query: string,\n  maxItems: number,\n  searchMode: SearchMode,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<SearchTimeline> {\n  if (!auth.isLoggedIn()) {\n    throw new Error('Scraper is not logged-in for search.');\n  }\n\n  if (maxItems > 50) {\n    maxItems = 50;\n  }\n\n  const variables: Record<string, any> = {\n    rawQuery: query,\n    count: maxItems,\n    querySource: 'typed_query',\n    product: 'Top',\n  };\n\n  const features = addApiFeatures({\n    longform_notetweets_inline_media_enabled: true,\n    responsive_web_enhance_cards_enabled: false,\n    responsive_web_media_download_video_enabled: false,\n    responsive_web_twitter_article_tweet_consumption_enabled: false,\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n      true,\n    interactive_text_enabled: false,\n    responsive_web_text_conversations_enabled: false,\n    vibe_api_enabled: false,\n  });\n\n  const fieldToggles: Record<string, any> = {\n    withArticleRichContentState: false,\n  };\n\n  if (cursor != null && cursor != '') {\n    variables['cursor'] = cursor;\n  }\n\n  switch (searchMode) {\n    case SearchMode.Latest:\n      variables.product = 'Latest';\n      break;\n    case SearchMode.Photos:\n      variables.product = 'Photos';\n      break;\n    case SearchMode.Videos:\n      variables.product = 'Videos';\n      break;\n    case SearchMode.Users:\n      variables.product = 'People';\n      break;\n    default:\n      break;\n  }\n\n  const params = new URLSearchParams();\n  params.set('features', stringify(features) ?? '');\n  params.set('fieldToggles', stringify(fieldToggles) ?? '');\n  params.set('variables', stringify(variables) ?? '');\n\n  const res = await requestApi<SearchTimeline>(\n    `https://api.twitter.com/graphql/gkjsKepM6gl_HmFWoWKfgg/SearchTimeline?${params.toString()}`,\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return res.value;\n}\n\n/**\n * Fetches one page of tweets that quote a given tweet ID.\n * This function does not handle pagination.\n * All comments must remain in English.\n *\n * @param quotedTweetId The tweet ID you want quotes of.\n * @param maxTweets Maximum number of tweets to return in one page.\n * @param auth The TwitterAuth object.\n * @param cursor Optional pagination cursor for fetching further pages.\n * @returns A promise that resolves to a QueryTweetsResponse containing tweets and the next cursor.\n */\nexport async function fetchQuotedTweetsPage(\n  quotedTweetId: string,\n  maxTweets: number,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<QueryTweetsResponse> {\n  if (maxTweets > 50) {\n    maxTweets = 50;\n  }\n\n  // Build the rawQuery and variables\n  const variables: Record<string, any> = {\n    rawQuery: `quoted_tweet_id:${quotedTweetId}`,\n    count: maxTweets,\n    querySource: 'tdqt',\n    product: 'Top',\n  };\n\n  if (cursor && cursor !== '') {\n    variables.cursor = cursor;\n  }\n\n  const features = addApiFeatures({\n    profile_label_improvements_pcf_label_in_post_enabled: true,\n    rweb_tipjar_consumption_enabled: true,\n    responsive_web_graphql_exclude_directive_enabled: true,\n    verified_phone_label_enabled: false,\n    creator_subscriptions_tweet_preview_api_enabled: true,\n    responsive_web_graphql_timeline_navigation_enabled: true,\n    responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\n    premium_content_api_read_enabled: false,\n    communities_web_enable_tweet_community_results_fetch: true,\n    c9s_tweet_anatomy_moderator_badge_enabled: true,\n    responsive_web_grok_analyze_button_fetch_trends_enabled: false,\n    responsive_web_grok_analyze_post_followups_enabled: true,\n    responsive_web_jetfuel_frame: false,\n    responsive_web_grok_share_attachment_enabled: true,\n    articles_preview_enabled: true,\n    responsive_web_edit_tweet_api_enabled: true,\n    graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n    view_counts_everywhere_api_enabled: true,\n    longform_notetweets_consumption_enabled: true,\n    responsive_web_twitter_article_tweet_consumption_enabled: true,\n    tweet_awards_web_tipping_enabled: false,\n    creator_subscriptions_quote_tweet_preview_enabled: false,\n    freedom_of_speech_not_reach_fetch_enabled: true,\n    standardized_nudges_misinfo: true,\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n      true,\n    rweb_video_timestamps_enabled: true,\n    longform_notetweets_rich_text_read_enabled: true,\n    longform_notetweets_inline_media_enabled: true,\n    responsive_web_grok_image_annotation_enabled: false,\n    responsive_web_enhance_cards_enabled: false,\n  });\n\n  const fieldToggles: Record<string, any> = {\n    withArticleRichContentState: false,\n  };\n\n  const params = new URLSearchParams();\n  params.set('features', stringify(features) ?? '');\n  params.set('fieldToggles', stringify(fieldToggles) ?? '');\n  params.set('variables', stringify(variables) ?? '');\n\n  const url = `https://x.com/i/api/graphql/1BP5aKg8NvTNvRCyyCyq8g/SearchTimeline?${params.toString()}`;\n\n  // Perform the request\n  const res = await requestApi(url, auth);\n  if (!res.success) {\n    throw res.err;\n  }\n\n  // Force cast for TypeScript\n  const timeline = res.value as any;\n  // Use parseSearchTimelineTweets to convert timeline data\n  return parseSearchTimelineTweets(timeline);\n}\n\n/**\n * Creates an async generator, yielding pages of quotes for a given tweet ID.\n * It prevents infinite loop by checking if the next cursor hasn't changed.\n */\nexport async function* searchQuotedTweets(\n  quotedTweetId: string,\n  maxTweets: number,\n  auth: TwitterAuth,\n): AsyncGenerator<QueryTweetsResponse> {\n  let cursor: string | undefined;\n\n  while (true) {\n    const response = await fetchQuotedTweetsPage(\n      quotedTweetId,\n      maxTweets,\n      auth,\n      cursor,\n    );\n    yield response;\n\n    // Prevent infinite loop if the API keeps returning the same cursor\n    if (!response.next || response.next === cursor) {\n      break;\n    }\n\n    // Update cursor for the next iteration\n    cursor = response.next;\n  }\n}\n","import { Profile, parseProfile } from './profile';\nimport { QueryProfilesResponse } from './timeline-v1';\nimport { TimelineUserResultRaw } from './timeline-v2';\n\nexport interface RelationshipEntryItemContentRaw {\n  itemType?: string;\n  userDisplayType?: string;\n  user_results?: {\n    result?: TimelineUserResultRaw;\n  };\n}\n\nexport interface RelationshipEntryRaw {\n  entryId: string;\n  sortIndex: string;\n  content?: {\n    cursorType?: string;\n    entryType?: string;\n    __typename?: string;\n    value?: string;\n    itemContent?: RelationshipEntryItemContentRaw;\n  };\n}\n\nexport interface RelationshipTimeline {\n  data?: {\n    user?: {\n      result?: {\n        timeline?: {\n          timeline?: {\n            instructions?: {\n              entries?: RelationshipEntryRaw[];\n              entry?: RelationshipEntryRaw;\n              type?: string;\n            }[];\n          };\n        };\n      };\n    };\n  };\n}\n\nexport function parseRelationshipTimeline(\n  timeline: RelationshipTimeline,\n): QueryProfilesResponse {\n  let bottomCursor: string | undefined;\n  let topCursor: string | undefined;\n  const profiles: Profile[] = [];\n  const instructions =\n    timeline.data?.user?.result?.timeline?.timeline?.instructions ?? [];\n\n  for (const instruction of instructions) {\n    if (\n      instruction.type === 'TimelineAddEntries' ||\n      instruction.type === 'TimelineReplaceEntry'\n    ) {\n      if (instruction.entry?.content?.cursorType === 'Bottom') {\n        bottomCursor = instruction.entry.content.value;\n        continue;\n      }\n\n      if (instruction.entry?.content?.cursorType === 'Top') {\n        topCursor = instruction.entry.content.value;\n        continue;\n      }\n\n      const entries = instruction.entries ?? [];\n      for (const entry of entries) {\n        const itemContent = entry.content?.itemContent;\n        if (itemContent?.userDisplayType === 'User') {\n          const userResultRaw = itemContent.user_results?.result;\n\n          if (userResultRaw?.legacy) {\n            const profile = parseProfile(\n              userResultRaw.legacy,\n              userResultRaw.is_blue_verified,\n            );\n\n            if (!profile.userId) {\n              profile.userId = userResultRaw.rest_id;\n            }\n\n            profiles.push(profile);\n          }\n        } else if (entry.content?.cursorType === 'Bottom') {\n          bottomCursor = entry.content.value;\n        } else if (entry.content?.cursorType === 'Top') {\n          topCursor = entry.content.value;\n        }\n      }\n    }\n  }\n\n  return { profiles, next: bottomCursor, previous: topCursor };\n}\n","import { addApiFeatures, requestApi, bearerToken } from './api';\nimport { Headers } from 'headers-polyfill';\nimport { TwitterAuth } from './auth';\nimport { Profile, getUserIdByScreenName } from './profile';\nimport { QueryProfilesResponse } from './timeline-v1';\nimport { getUserTimeline } from './timeline-async';\nimport {\n  RelationshipTimeline,\n  parseRelationshipTimeline,\n} from './timeline-relationship';\nimport stringify from 'json-stable-stringify';\n\nexport function getFollowing(\n  userId: string,\n  maxProfiles: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Profile, void> {\n  return getUserTimeline(userId, maxProfiles, (q, mt, c) => {\n    return fetchProfileFollowing(q, mt, auth, c);\n  });\n}\n\nexport function getFollowers(\n  userId: string,\n  maxProfiles: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Profile, void> {\n  return getUserTimeline(userId, maxProfiles, (q, mt, c) => {\n    return fetchProfileFollowers(q, mt, auth, c);\n  });\n}\n\nexport async function fetchProfileFollowing(\n  userId: string,\n  maxProfiles: number,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<QueryProfilesResponse> {\n  const timeline = await getFollowingTimeline(\n    userId,\n    maxProfiles,\n    auth,\n    cursor,\n  );\n\n  return parseRelationshipTimeline(timeline);\n}\n\nexport async function fetchProfileFollowers(\n  userId: string,\n  maxProfiles: number,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<QueryProfilesResponse> {\n  const timeline = await getFollowersTimeline(\n    userId,\n    maxProfiles,\n    auth,\n    cursor,\n  );\n\n  return parseRelationshipTimeline(timeline);\n}\n\nasync function getFollowingTimeline(\n  userId: string,\n  maxItems: number,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<RelationshipTimeline> {\n  if (!auth.isLoggedIn()) {\n    throw new Error('Scraper is not logged-in for profile following.');\n  }\n\n  if (maxItems > 50) {\n    maxItems = 50;\n  }\n\n  const variables: Record<string, any> = {\n    userId,\n    count: maxItems,\n    includePromotedContent: false,\n  };\n\n  const features = addApiFeatures({\n    responsive_web_twitter_article_tweet_consumption_enabled: false,\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n      true,\n    longform_notetweets_inline_media_enabled: true,\n    responsive_web_media_download_video_enabled: false,\n  });\n\n  if (cursor != null && cursor != '') {\n    variables['cursor'] = cursor;\n  }\n\n  const params = new URLSearchParams();\n  params.set('features', stringify(features) ?? '');\n  params.set('variables', stringify(variables) ?? '');\n\n  const res = await requestApi<RelationshipTimeline>(\n    `https://twitter.com/i/api/graphql/iSicc7LrzWGBgDPL0tM_TQ/Following?${params.toString()}`,\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return res.value;\n}\n\nasync function getFollowersTimeline(\n  userId: string,\n  maxItems: number,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<RelationshipTimeline> {\n  if (!auth.isLoggedIn()) {\n    throw new Error('Scraper is not logged-in for profile followers.');\n  }\n\n  if (maxItems > 50) {\n    maxItems = 50;\n  }\n\n  const variables: Record<string, any> = {\n    userId,\n    count: maxItems,\n    includePromotedContent: false,\n  };\n\n  const features = addApiFeatures({\n    responsive_web_twitter_article_tweet_consumption_enabled: false,\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n      true,\n    longform_notetweets_inline_media_enabled: true,\n    responsive_web_media_download_video_enabled: false,\n  });\n\n  if (cursor != null && cursor != '') {\n    variables['cursor'] = cursor;\n  }\n\n  const params = new URLSearchParams();\n  params.set('features', stringify(features) ?? '');\n  params.set('variables', stringify(variables) ?? '');\n\n  const res = await requestApi<RelationshipTimeline>(\n    `https://twitter.com/i/api/graphql/rRXFSG5vR6drKr5M37YOTw/Followers?${params.toString()}`,\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return res.value;\n}\n\nexport async function followUser(\n  username: string,\n  auth: TwitterAuth,\n): Promise<Response> {\n\n  // Check if the user is logged in\n  if (!(await auth.isLoggedIn())) {\n    throw new Error('Must be logged in to follow users');\n  }\n  // Get user ID from username\n  const userIdResult = await getUserIdByScreenName(username, auth);\n\n  if (!userIdResult.success) {\n    throw new Error(`Failed to get user ID: ${userIdResult.err.message}`);\n  }\n\n  const userId = userIdResult.value;\n\n  // Prepare the request body\n  const requestBody = {\n    include_profile_interstitial_type: '1',\n    skip_status: 'true',\n    user_id: userId,\n  };\n\n  // Prepare the headers\n  const headers = new Headers({\n    'Content-Type': 'application/x-www-form-urlencoded',\n    Referer: `https://twitter.com/${username}`,\n    'X-Twitter-Active-User': 'yes',\n    'X-Twitter-Auth-Type': 'OAuth2Session',\n    'X-Twitter-Client-Language': 'en',\n    Authorization: `Bearer ${bearerToken}`,\n  });\n\n  // Install auth headers\n  await auth.installTo(headers, 'https://api.twitter.com/1.1/friendships/create.json');\n  \n  // Make the follow request using auth.fetch\n  const res = await auth.fetch(\n    'https://api.twitter.com/1.1/friendships/create.json',\n    {\n      method: 'POST',\n      headers,\n      body: new URLSearchParams(requestBody).toString(),\n      credentials: 'include',\n    },\n  );\n\n  if (!res.ok) {\n    throw new Error(`Failed to follow user: ${res.statusText}`);\n  }\n\n  const data = await res.json();\n\n  return new Response(JSON.stringify(data), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n}","import { addApiParams, requestApi } from './api';\nimport { TwitterAuth } from './auth';\nimport { TimelineV1 } from './timeline-v1';\n\nexport async function getTrends(auth: TwitterAuth): Promise<string[]> {\n  const params = new URLSearchParams();\n  addApiParams(params, false);\n\n  params.set('count', '20');\n  params.set('candidate_source', 'trends');\n  params.set('include_page_configuration', 'false');\n  params.set('entity_tokens', 'false');\n\n  const res = await requestApi<TimelineV1>(\n    `https://api.twitter.com/2/guide.json?${params.toString()}`,\n    auth,\n  );\n  if (!res.success) {\n    throw res.err;\n  }\n\n  const instructions = res.value.timeline?.instructions ?? [];\n  if (instructions.length < 2) {\n    throw new Error('No trend entries found.');\n  }\n\n  // Some of this is silly, but for now we're assuming we know nothing about the\n  // data, and that anything can be missing. Go has non-nilable strings and empty\n  // slices are nil, so it largely doesn't need to worry about this.\n  const entries = instructions[1].addEntries?.entries ?? [];\n  if (entries.length < 2) {\n    throw new Error('No trend entries found.');\n  }\n\n  const items = entries[1].content?.timelineModule?.items ?? [];\n  const trends: string[] = [];\n  for (const item of items) {\n    const trend =\n      item.item?.clientEventInfo?.details?.guideDetails?.transparentGuideDetails\n        ?.trendMetadata?.trendName;\n    if (trend != null) {\n      trends.push(trend);\n    }\n  }\n\n  return trends;\n}\n","import stringify from 'json-stable-stringify';\n\n/**\n * Examples of requests to API endpoints. These are parsed at runtime and used\n * as templates for requests to a particular endpoint. Please ensure these do\n * not contain any information that you do not want published to NPM.\n */\nconst endpoints = {\n  // TODO: Migrate other endpoint URLs here\n  UserTweets:\n    'https://twitter.com/i/api/graphql/V7H0Ap3_Hh2FyS75OCDO3Q/UserTweets?variables=%7B%22userId%22%3A%224020276615%22%2C%22count%22%3A20%2C%22includePromotedContent%22%3Atrue%2C%22withQuickPromoteEligibilityTweetFields%22%3Atrue%2C%22withVoice%22%3Atrue%2C%22withV2Timeline%22%3Atrue%7D&features=%7B%22rweb_tipjar_consumption_enabled%22%3Atrue%2C%22responsive_web_graphql_exclude_directive_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22communities_web_enable_tweet_community_results_fetch%22%3Atrue%2C%22c9s_tweet_anatomy_moderator_badge_enabled%22%3Atrue%2C%22articles_preview_enabled%22%3Atrue%2C%22tweetypie_unmention_optimization_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Atrue%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22creator_subscriptions_quote_tweet_preview_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22rweb_video_timestamps_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D&fieldToggles=%7B%22withArticlePlainText%22%3Afalse%7D',\n  UserTweetsAndReplies:\n    'https://twitter.com/i/api/graphql/E4wA5vo2sjVyvpliUffSCw/UserTweetsAndReplies?variables=%7B%22userId%22%3A%224020276615%22%2C%22count%22%3A40%2C%22cursor%22%3A%22DAABCgABGPWl-F-ATiIKAAIY9YfiF1rRAggAAwAAAAEAAA%22%2C%22includePromotedContent%22%3Atrue%2C%22withCommunity%22%3Atrue%2C%22withVoice%22%3Atrue%2C%22withV2Timeline%22%3Atrue%7D&features=%7B%22rweb_tipjar_consumption_enabled%22%3Atrue%2C%22responsive_web_graphql_exclude_directive_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22communities_web_enable_tweet_community_results_fetch%22%3Atrue%2C%22c9s_tweet_anatomy_moderator_badge_enabled%22%3Atrue%2C%22articles_preview_enabled%22%3Atrue%2C%22tweetypie_unmention_optimization_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Atrue%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22creator_subscriptions_quote_tweet_preview_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22rweb_video_timestamps_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D&fieldToggles=%7B%22withArticlePlainText%22%3Afalse%7D',\n  UserLikedTweets:\n    'https://twitter.com/i/api/graphql/eSSNbhECHHWWALkkQq-YTA/Likes?variables=%7B%22userId%22%3A%222244196397%22%2C%22count%22%3A20%2C%22includePromotedContent%22%3Afalse%2C%22withClientEventToken%22%3Afalse%2C%22withBirdwatchNotes%22%3Afalse%2C%22withVoice%22%3Atrue%2C%22withV2Timeline%22%3Atrue%7D&features=%7B%22responsive_web_graphql_exclude_directive_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22c9s_tweet_anatomy_moderator_badge_enabled%22%3Atrue%2C%22tweetypie_unmention_optimization_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Atrue%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22rweb_video_timestamps_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D',\n  TweetDetail:\n    'https://twitter.com/i/api/graphql/xOhkmRac04YFZmOzU9PJHg/TweetDetail?variables=%7B%22focalTweetId%22%3A%221237110546383724547%22%2C%22with_rux_injections%22%3Afalse%2C%22includePromotedContent%22%3Atrue%2C%22withCommunity%22%3Atrue%2C%22withQuickPromoteEligibilityTweetFields%22%3Atrue%2C%22withBirdwatchNotes%22%3Atrue%2C%22withVoice%22%3Atrue%2C%22withV2Timeline%22%3Atrue%7D&features=%7B%22responsive_web_graphql_exclude_directive_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22tweetypie_unmention_optimization_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Afalse%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22responsive_web_media_download_video_enabled%22%3Afalse%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D&fieldToggles=%7B%22withArticleRichContentState%22%3Afalse%7D',\n  TweetDetailArticle:\n    'https://twitter.com/i/api/graphql/GtcBtFhtQymrpxAs5MALVA/TweetDetail?variables=%7B%22focalTweetId%22%3A%221765884209527394325%22%2C%22with_rux_injections%22%3Atrue%2C%22rankingMode%22%3A%22Relevance%22%2C%22includePromotedContent%22%3Atrue%2C%22withCommunity%22%3Atrue%2C%22withQuickPromoteEligibilityTweetFields%22%3Atrue%2C%22withBirdwatchNotes%22%3Atrue%2C%22withVoice%22%3Atrue%7D&features=%7B%22profile_label_improvements_pcf_label_in_post_enabled%22%3Afalse%2C%22rweb_tipjar_consumption_enabled%22%3Atrue%2C%22responsive_web_graphql_exclude_directive_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22premium_content_api_read_enabled%22%3Afalse%2C%22communities_web_enable_tweet_community_results_fetch%22%3Atrue%2C%22c9s_tweet_anatomy_moderator_badge_enabled%22%3Atrue%2C%22responsive_web_grok_analyze_button_fetch_trends_enabled%22%3Atrue%2C%22responsive_web_grok_analyze_post_followups_enabled%22%3Afalse%2C%22responsive_web_grok_share_attachment_enabled%22%3Atrue%2C%22articles_preview_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Atrue%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22creator_subscriptions_quote_tweet_preview_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22rweb_video_timestamps_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D&fieldToggles=%7B%22withArticleRichContentState%22%3Atrue%2C%22withArticlePlainText%22%3Afalse%2C%22withGrokAnalyze%22%3Afalse%2C%22withDisallowedReplyControls%22%3Afalse%7D',\n  TweetResultByRestId:\n    'https://twitter.com/i/api/graphql/DJS3BdhUhcaEpZ7B7irJDg/TweetResultByRestId?variables=%7B%22tweetId%22%3A%221237110546383724547%22%2C%22withCommunity%22%3Afalse%2C%22includePromotedContent%22%3Afalse%2C%22withVoice%22%3Afalse%7D&features=%7B%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22tweetypie_unmention_optimization_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Afalse%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22responsive_web_graphql_exclude_directive_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22responsive_web_media_download_video_enabled%22%3Afalse%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D',\n  ListTweets:\n    'https://twitter.com/i/api/graphql/whF0_KH1fCkdLLoyNPMoEw/ListLatestTweetsTimeline?variables=%7B%22listId%22%3A%221736495155002106192%22%2C%22count%22%3A20%7D&features=%7B%22responsive_web_graphql_exclude_directive_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22c9s_tweet_anatomy_moderator_badge_enabled%22%3Atrue%2C%22tweetypie_unmention_optimization_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Afalse%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22rweb_video_timestamps_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22responsive_web_media_download_video_enabled%22%3Afalse%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D',\n} as const;\n\nexport interface EndpointFieldInfo {\n  /**\n   * Request variables, used for providing arguments such as user IDs or result counts.\n   */\n  variables: Record<string, unknown>;\n\n  /**\n   * Request features, used for encoding feature flags into the request. These may either be\n   * boolean values or numerically-encoded booleans (1 or 0). It is possible this may change\n   * to include other representations of booleans as Twitter's backend evolves.\n   */\n  features: Record<string, unknown>;\n\n  /**\n   * Request field toggles, used for limiting how returned fields are represented. This is\n   * rarely used.\n   */\n  fieldToggles: Record<string, unknown>;\n}\n\ntype SomePartial<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\ntype EndpointVersion = string;\ntype EndpointName = string;\ntype EncodedVariables = string;\ntype EncodedFeatures = string;\ntype EncodedFieldToggles = string;\n\n// TODO: Set up field-level Intellisense for the QraphQL parameters in these?\ntype EndpointFields<EndpointUrl> =\n  EndpointUrl extends `https://twitter.com/i/api/graphql/${EndpointVersion}/${EndpointName}?variables=${EncodedVariables}&features=${EncodedFeatures}&fieldToggles=${EncodedFieldToggles}`\n    ? EndpointFieldInfo\n    : EndpointUrl extends `https://twitter.com/i/api/graphql/${EndpointVersion}/${EndpointName}?variables=${EncodedVariables}&features=${EncodedFeatures}`\n    ? SomePartial<EndpointFieldInfo, 'fieldToggles'>\n    : EndpointUrl extends `https://twitter.com/i/api/graphql/${EndpointVersion}/${EndpointName}?variables=${EncodedVariables}`\n    ? SomePartial<EndpointFieldInfo, 'features' | 'fieldToggles'>\n    : Partial<EndpointFieldInfo>;\n\nexport type ApiRequestInfo<EndpointUrl> = EndpointFields<EndpointUrl> & {\n  /**\n   * The URL, without any GraphQL query parameters.\n   */\n  url: string;\n\n  /**\n   * Converts the request back into a URL to be sent to the Twitter API.\n   */\n  toRequestUrl(): string;\n};\n\n/** Wrapper class for API request information. */\nclass ApiRequest<EndpointUrl> {\n  url: string;\n  variables?: Record<string, unknown> | undefined;\n  features?: Record<string, unknown> | undefined;\n  fieldToggles?: Record<string, unknown> | undefined;\n\n  constructor(info: Omit<ApiRequestInfo<EndpointUrl>, 'toRequestUrl'>) {\n    this.url = info.url;\n    this.variables = info.variables;\n    this.features = info.features;\n    this.fieldToggles = info.fieldToggles;\n  }\n\n  toRequestUrl(): string {\n    const params = new URLSearchParams();\n\n    // Only include query parameters with values\n    if (this.variables) {\n      // Stringify with the query keys in sorted order like the Go package\n      params.set('variables', stringify(this.variables) ?? '');\n    }\n\n    if (this.features) {\n      params.set('features', stringify(this.features) ?? '');\n    }\n\n    if (this.fieldToggles) {\n      params.set('fieldToggles', stringify(this.fieldToggles) ?? '');\n    }\n\n    return `${this.url}?${params.toString()}`;\n  }\n}\n\n/**\n * Parses information from a Twitter API endpoint using an example request\n * URL against that endpoint. This can be used to extract GraphQL parameters\n * in order to easily reuse and/or override them later.\n * @param example An example of the endpoint to analyze.\n * @returns The parsed endpoint information.\n */\nfunction parseEndpointExample<\n  Endpoints,\n  Endpoint extends string & keyof Endpoints,\n>(example: Endpoint): ApiRequestInfo<Endpoints[Endpoint]> {\n  const { protocol, host, pathname, searchParams: query } = new URL(example);\n\n  const base = `${protocol}//${host}${pathname}`;\n  const variables = query.get('variables');\n  const features = query.get('features');\n  const fieldToggles = query.get('fieldToggles');\n\n  return new ApiRequest<Endpoints[Endpoint]>({\n    url: base,\n    variables: variables ? JSON.parse(variables) : undefined,\n    features: features ? JSON.parse(features) : undefined,\n    fieldToggles: fieldToggles ? JSON.parse(fieldToggles) : undefined,\n  } as Omit<ApiRequestInfo<Endpoints[Endpoint]>, 'toRequestUrl'>) as ApiRequestInfo<\n    Endpoints[Endpoint]\n  >;\n}\n\ntype ApiRequestFactory<Endpoints> = {\n  [Endpoint in keyof Endpoints as `create${string &\n    Endpoint}Request`]: () => ApiRequestInfo<Endpoints[Endpoint]>;\n};\n\nfunction createApiRequestFactory<Endpoints extends Record<string, string>>(\n  endpoints: Endpoints,\n): ApiRequestFactory<Endpoints> {\n  type UntypedApiRequestFactory = ApiRequestFactory<Record<string, string>>;\n\n  return Object.entries(endpoints)\n    .map<UntypedApiRequestFactory>(([endpointName, endpointExample]) => {\n      // Create a partial factory for only one endpoint\n      return {\n        [`create${endpointName}Request`]: () => {\n          // Create a new instance on each invocation so that we can safely\n          // mutate requests before sending them off\n          return parseEndpointExample<Endpoints, any>(endpointExample);\n        },\n      };\n    })\n    .reduce((agg, next) => {\n      // Merge all of our factories into one that includes every endpoint\n      return Object.assign(agg, next);\n    }) as ApiRequestFactory<Endpoints>;\n}\n\nexport const apiRequestFactory = createApiRequestFactory(endpoints);\n","import { QueryTweetsResponse } from './timeline-v1';\nimport { parseAndPush, TimelineEntryRaw } from './timeline-v2';\nimport { Tweet } from './tweets';\n\nexport interface ListTimeline {\n  data?: {\n    list?: {\n      tweets_timeline?: {\n        timeline?: {\n          instructions?: {\n            entries?: TimelineEntryRaw[];\n            entry?: TimelineEntryRaw;\n            type?: string;\n          }[];\n        };\n      };\n    };\n  };\n}\n\nexport function parseListTimelineTweets(\n  timeline: ListTimeline,\n): QueryTweetsResponse {\n  let bottomCursor: string | undefined;\n  let topCursor: string | undefined;\n  const tweets: Tweet[] = [];\n  const instructions =\n    timeline.data?.list?.tweets_timeline?.timeline?.instructions ?? [];\n  for (const instruction of instructions) {\n    const entries = instruction.entries ?? [];\n\n    for (const entry of entries) {\n      const entryContent = entry.content;\n      if (!entryContent) continue;\n\n      if (entryContent.cursorType === 'Bottom') {\n        bottomCursor = entryContent.value;\n        continue;\n      } else if (entryContent.cursorType === 'Top') {\n        topCursor = entryContent.value;\n        continue;\n      }\n\n      const idStr = entry.entryId;\n      if (\n        !idStr.startsWith('tweet') &&\n        !idStr.startsWith('list-conversation')\n      ) {\n        continue;\n      }\n\n      if (entryContent.itemContent) {\n        parseAndPush(tweets, entryContent.itemContent, idStr);\n      } else if (entryContent.items) {\n        for (const contentItem of entryContent.items) {\n          if (\n            contentItem.item &&\n            contentItem.item.itemContent &&\n            contentItem.entryId\n          ) {\n            parseAndPush(\n              tweets,\n              contentItem.item.itemContent,\n              contentItem.entryId.split('tweet-')[1],\n            );\n          }\n        }\n      }\n    }\n  }\n\n  return { tweets, next: bottomCursor, previous: topCursor };\n}\n","import { addApiFeatures, requestApi } from './api';\nimport { TwitterAuth } from './auth';\nimport { getUserIdByScreenName } from './profile';\nimport { QueryTweetsResponse } from './timeline-v1';\nimport {\n  parseTimelineTweetsV2,\n  TimelineV2,\n  TimelineEntryItemContentRaw,\n  parseTimelineEntryItemContentRaw,\n  ThreadedConversation,\n  parseThreadedConversation,\n  parseArticle,\n  TimelineArticle,\n} from './timeline-v2';\nimport { getTweetTimeline } from './timeline-async';\nimport { apiRequestFactory } from './api-data';\nimport { ListTimeline, parseListTimelineTweets } from './timeline-list';\nimport { updateCookieJar } from './requests';\nimport {\n  ApiV2Includes,\n  MediaObjectV2,\n  PlaceV2,\n  PollV2,\n  TTweetv2Expansion,\n  TTweetv2MediaField,\n  TTweetv2PlaceField,\n  TTweetv2PollField,\n  TTweetv2TweetField,\n  TTweetv2UserField,\n  TweetV2,\n  UserV2,\n} from 'twitter-api-v2';\n\nexport const defaultOptions = {\n  expansions: [\n    'attachments.poll_ids',\n    'attachments.media_keys',\n    'author_id',\n    'referenced_tweets.id',\n    'in_reply_to_user_id',\n    'edit_history_tweet_ids',\n    'geo.place_id',\n    'entities.mentions.username',\n    'referenced_tweets.id.author_id',\n  ] as TTweetv2Expansion[],\n  tweetFields: [\n    'attachments',\n    'author_id',\n    'context_annotations',\n    'conversation_id',\n    'created_at',\n    'entities',\n    'geo',\n    'id',\n    'in_reply_to_user_id',\n    'lang',\n    'public_metrics',\n    'edit_controls',\n    'possibly_sensitive',\n    'referenced_tweets',\n    'reply_settings',\n    'source',\n    'text',\n    'withheld',\n    'note_tweet',\n  ] as TTweetv2TweetField[],\n  pollFields: [\n    'duration_minutes',\n    'end_datetime',\n    'id',\n    'options',\n    'voting_status',\n  ] as TTweetv2PollField[],\n  mediaFields: [\n    'duration_ms',\n    'height',\n    'media_key',\n    'preview_image_url',\n    'type',\n    'url',\n    'width',\n    'public_metrics',\n    'alt_text',\n    'variants',\n  ] as TTweetv2MediaField[],\n  userFields: [\n    'created_at',\n    'description',\n    'entities',\n    'id',\n    'location',\n    'name',\n    'profile_image_url',\n    'protected',\n    'public_metrics',\n    'url',\n    'username',\n    'verified',\n    'withheld',\n  ] as TTweetv2UserField[],\n  placeFields: [\n    'contained_within',\n    'country',\n    'country_code',\n    'full_name',\n    'geo',\n    'id',\n    'name',\n    'place_type',\n  ] as TTweetv2PlaceField[],\n};\nexport interface Mention {\n  id: string;\n  username?: string;\n  name?: string;\n}\n\nexport interface Photo {\n  id: string;\n  url: string;\n  alt_text: string | undefined;\n}\n\nexport interface Video {\n  id: string;\n  preview: string;\n  url?: string;\n}\n\nexport interface PlaceRaw {\n  id?: string;\n  place_type?: string;\n  name?: string;\n  full_name?: string;\n  country_code?: string;\n  country?: string;\n  bounding_box?: {\n    type?: string;\n    coordinates?: number[][][];\n  };\n}\n\nexport interface PollData {\n  id?: string;\n  end_datetime?: string;\n  voting_status?: string;\n  duration_minutes: number;\n  options: PollOption[];\n}\n\nexport interface PollOption {\n  position?: number;\n  label: string;\n  votes?: number;\n}\n\n/**\n * A parsed Tweet object.\n */\nexport interface Tweet {\n  bookmarkCount?: number;\n  conversationId?: string;\n  hashtags: string[];\n  html?: string;\n  id?: string;\n  inReplyToStatus?: Tweet;\n  inReplyToStatusId?: string;\n  isQuoted?: boolean;\n  isPin?: boolean;\n  isReply?: boolean;\n  isRetweet?: boolean;\n  isSelfThread?: boolean;\n  language?: string;\n  likes?: number;\n  name?: string;\n  mentions: Mention[];\n  permanentUrl?: string;\n  photos: Photo[];\n  place?: PlaceRaw;\n  quotedStatus?: Tweet;\n  quotedStatusId?: string;\n  quotes?: number;\n  replies?: number;\n  retweets?: number;\n  retweetedStatus?: Tweet;\n  retweetedStatusId?: string;\n  text?: string;\n  thread: Tweet[];\n  timeParsed?: Date;\n  timestamp?: number;\n  urls: string[];\n  userId?: string;\n  username?: string;\n  videos: Video[];\n  views?: number;\n  sensitiveContent?: boolean;\n  poll?: PollV2 | null;\n}\n\nexport interface Retweeter {\n  rest_id: string;\n  screen_name: string;\n  name: string;\n  description?: string;\n}\n\nexport type TweetQuery =\n  | Partial<Tweet>\n  | ((tweet: Tweet) => boolean | Promise<boolean>);\n\nexport const features = addApiFeatures({\n  interactive_text_enabled: true,\n  longform_notetweets_inline_media_enabled: false,\n  responsive_web_text_conversations_enabled: false,\n  tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n    false,\n  vibe_api_enabled: false,\n});\n\nexport async function fetchTweets(\n  userId: string,\n  maxTweets: number,\n  cursor: string | undefined,\n  auth: TwitterAuth,\n): Promise<QueryTweetsResponse> {\n  if (maxTweets > 200) {\n    maxTweets = 200;\n  }\n\n  const userTweetsRequest = apiRequestFactory.createUserTweetsRequest();\n  userTweetsRequest.variables.userId = userId;\n  userTweetsRequest.variables.count = maxTweets;\n  userTweetsRequest.variables.includePromotedContent = false; // true on the website\n\n  if (cursor != null && cursor != '') {\n    userTweetsRequest.variables['cursor'] = cursor;\n  }\n\n  const res = await requestApi<TimelineV2>(\n    userTweetsRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return parseTimelineTweetsV2(res.value);\n}\n\nexport async function fetchTweetsAndReplies(\n  userId: string,\n  maxTweets: number,\n  cursor: string | undefined,\n  auth: TwitterAuth,\n): Promise<QueryTweetsResponse> {\n  if (maxTweets > 40) {\n    maxTweets = 40;\n  }\n\n  const userTweetsRequest =\n    apiRequestFactory.createUserTweetsAndRepliesRequest();\n  userTweetsRequest.variables.userId = userId;\n  userTweetsRequest.variables.count = maxTweets;\n  userTweetsRequest.variables.includePromotedContent = false; // true on the website\n\n  if (cursor != null && cursor != '') {\n    userTweetsRequest.variables['cursor'] = cursor;\n  }\n\n  const res = await requestApi<TimelineV2>(\n    userTweetsRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return parseTimelineTweetsV2(res.value);\n}\n\nexport async function createCreateTweetRequestV2(\n  text: string,\n  auth: TwitterAuth,\n  tweetId?: string,\n  options?: {\n    poll?: PollData;\n    quoted_tweet_id?: string;\n  },\n) {\n  const v2client = auth.getV2Client();\n  if (v2client == null) {\n    throw new Error('V2 client is not initialized');\n  }\n  const { poll, quoted_tweet_id } = options || {};\n  let tweetConfig;\n  \n  if (poll) {\n    tweetConfig = {\n      text,\n      poll: {\n        options: poll?.options.map((option) => option.label) ?? [],\n        duration_minutes: poll?.duration_minutes ?? 60,\n      },\n    };\n  } else if (quoted_tweet_id) {\n    // Handle quote tweet by including the quoted tweet ID\n    tweetConfig = {\n      text,\n      quote_tweet_id: quoted_tweet_id,\n    };\n  } else if (tweetId) {\n    tweetConfig = {\n      text,\n      reply: {\n        in_reply_to_tweet_id: tweetId,\n      },\n    };\n  } else {\n    tweetConfig = {\n      text,\n    };\n  }\n  \n  const tweetResponse = await v2client.v2.tweet(tweetConfig);\n  let optionsConfig = {};\n  if (options?.poll) {\n    optionsConfig = {\n      expansions: ['attachments.poll_ids'],\n      pollFields: [\n        'options',\n        'duration_minutes',\n        'end_datetime',\n        'voting_status',\n      ],\n    };\n  }\n  return await getTweetV2(tweetResponse.data.id, auth, optionsConfig);\n}\n\nexport function parseTweetV2ToV1(\n  tweetV2: TweetV2,\n  includes?: ApiV2Includes,\n  defaultTweetData?: Tweet | null,\n): Tweet {\n  let parsedTweet: Tweet;\n  if (defaultTweetData != null) {\n    parsedTweet = defaultTweetData;\n  }\n  parsedTweet = {\n    id: tweetV2.id,\n    text: tweetV2.text ?? defaultTweetData?.text ?? '',\n    hashtags:\n      tweetV2.entities?.hashtags?.map((tag) => tag.tag) ??\n      defaultTweetData?.hashtags ??\n      [],\n    mentions:\n      tweetV2.entities?.mentions?.map((mention) => ({\n        id: mention.id,\n        username: mention.username,\n      })) ??\n      defaultTweetData?.mentions ??\n      [],\n    urls:\n      tweetV2.entities?.urls?.map((url) => url.url) ??\n      defaultTweetData?.urls ??\n      [],\n    likes: tweetV2.public_metrics?.like_count ?? defaultTweetData?.likes ?? 0,\n    retweets:\n      tweetV2.public_metrics?.retweet_count ?? defaultTweetData?.retweets ?? 0,\n    replies:\n      tweetV2.public_metrics?.reply_count ?? defaultTweetData?.replies ?? 0,\n    views:\n      tweetV2.public_metrics?.impression_count ?? defaultTweetData?.views ?? 0,\n    userId: tweetV2.author_id ?? defaultTweetData?.userId,\n    conversationId: tweetV2.conversation_id ?? defaultTweetData?.conversationId,\n    photos: defaultTweetData?.photos ?? [],\n    videos: defaultTweetData?.videos ?? [],\n    poll: defaultTweetData?.poll ?? null,\n    username: defaultTweetData?.username ?? '',\n    name: defaultTweetData?.name ?? '',\n    place: defaultTweetData?.place,\n    thread: defaultTweetData?.thread ?? [],\n  };\n\n  // Process Polls\n  if (includes?.polls?.length) {\n    const poll = includes.polls[0];\n    parsedTweet.poll = {\n      id: poll.id,\n      end_datetime: poll.end_datetime\n        ? poll.end_datetime\n        : defaultTweetData?.poll?.end_datetime\n        ? defaultTweetData?.poll?.end_datetime\n        : undefined,\n      options: poll.options.map((option) => ({\n        position: option.position,\n        label: option.label,\n        votes: option.votes,\n      })),\n      voting_status:\n        poll.voting_status ?? defaultTweetData?.poll?.voting_status,\n    };\n  }\n\n  // Process Media (photos and videos)\n  if (includes?.media?.length) {\n    includes.media.forEach((media: MediaObjectV2) => {\n      if (media.type === 'photo') {\n        parsedTweet.photos.push({\n          id: media.media_key,\n          url: media.url ?? '',\n          alt_text: media.alt_text ?? '',\n        });\n      } else if (media.type === 'video' || media.type === 'animated_gif') {\n        parsedTweet.videos.push({\n          id: media.media_key,\n          preview: media.preview_image_url ?? '',\n          url:\n            media.variants?.find(\n              (variant) => variant.content_type === 'video/mp4',\n            )?.url ?? '',\n        });\n      }\n    });\n  }\n\n  // Process User (for author info)\n  if (includes?.users?.length) {\n    const user = includes.users.find(\n      (user: UserV2) => user.id === tweetV2.author_id,\n    );\n    if (user) {\n      parsedTweet.username = user.username ?? defaultTweetData?.username ?? '';\n      parsedTweet.name = user.name ?? defaultTweetData?.name ?? '';\n    }\n  }\n\n  // Process Place (if any)\n  if (tweetV2?.geo?.place_id && includes?.places?.length) {\n    const place = includes.places.find(\n      (place: PlaceV2) => place.id === tweetV2?.geo?.place_id,\n    );\n    if (place) {\n      parsedTweet.place = {\n        id: place.id,\n        full_name: place.full_name ?? defaultTweetData?.place?.full_name ?? '',\n        country: place.country ?? defaultTweetData?.place?.country ?? '',\n        country_code:\n          place.country_code ?? defaultTweetData?.place?.country_code ?? '',\n        name: place.name ?? defaultTweetData?.place?.name ?? '',\n        place_type: place.place_type ?? defaultTweetData?.place?.place_type,\n      };\n    }\n  }\n\n  // TODO: Process Thread (referenced tweets) and remove reference to v1\n  return parsedTweet;\n}\n\nexport async function createCreateTweetRequest(\n  text: string,\n  auth: TwitterAuth,\n  tweetId?: string,\n  mediaData?: { data: Buffer; mediaType: string }[],\n  hideLinkPreview = false,\n) {\n  const onboardingTaskUrl = 'https://api.twitter.com/1.1/onboarding/task.json';\n\n  const cookies = await auth.cookieJar().getCookies(onboardingTaskUrl);\n  const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n  //@ ts-expect-error - This is a private API.\n  const headers = new Headers({\n    authorization: `Bearer ${(auth as any).bearerToken}`,\n    cookie: await auth.cookieJar().getCookieString(onboardingTaskUrl),\n    'content-type': 'application/json',\n    'User-Agent':\n      'Mozilla/5.0 (Linux; Android 11; Nokia G20) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.88 Mobile Safari/537.36',\n    'x-guest-token': (auth as any).guestToken,\n    'x-twitter-auth-type': 'OAuth2Client',\n    'x-twitter-active-user': 'yes',\n    'x-twitter-client-language': 'en',\n    'x-csrf-token': xCsrfToken?.value as string,\n  });\n\n  const variables: Record<string, any> = {\n    tweet_text: text,\n    dark_request: false,\n    media: {\n      media_entities: [],\n      possibly_sensitive: false,\n    },\n    semantic_annotation_ids: [],\n  };\n\n  if (hideLinkPreview) {\n    variables[\"card_uri\"] = \"tombstone://card\"\n  }\n\n  if (mediaData && mediaData.length > 0) {\n    const mediaIds = await Promise.all(\n      mediaData.map(({ data, mediaType }) =>\n        uploadMedia(data, auth, mediaType),\n      ),\n    );\n\n    variables.media.media_entities = mediaIds.map((id) => ({\n      media_id: id,\n      tagged_users: [],\n    }));\n  }\n\n  if (tweetId) {\n    variables.reply = { in_reply_to_tweet_id: tweetId };\n  }\n\n  const response = await fetch(\n    'https://twitter.com/i/api/graphql/a1p9RWpkYKBjWv_I3WzS-A/CreateTweet',\n    {\n      headers,\n      body: JSON.stringify({\n        variables,\n        features: {\n          interactive_text_enabled: true,\n          longform_notetweets_inline_media_enabled: false,\n          responsive_web_text_conversations_enabled: false,\n          tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n            false,\n          vibe_api_enabled: false,\n          rweb_lists_timeline_redesign_enabled: true,\n          responsive_web_graphql_exclude_directive_enabled: true,\n          verified_phone_label_enabled: false,\n          creator_subscriptions_tweet_preview_api_enabled: true,\n          responsive_web_graphql_timeline_navigation_enabled: true,\n          responsive_web_graphql_skip_user_profile_image_extensions_enabled:\n            false,\n          tweetypie_unmention_optimization_enabled: true,\n          responsive_web_edit_tweet_api_enabled: true,\n          graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n          view_counts_everywhere_api_enabled: true,\n          longform_notetweets_consumption_enabled: true,\n          tweet_awards_web_tipping_enabled: false,\n          freedom_of_speech_not_reach_fetch_enabled: true,\n          standardized_nudges_misinfo: true,\n          longform_notetweets_rich_text_read_enabled: true,\n          responsive_web_enhance_cards_enabled: false,\n          subscriptions_verification_info_enabled: true,\n          subscriptions_verification_info_reason_enabled: true,\n          subscriptions_verification_info_verified_since_enabled: true,\n          super_follow_badge_privacy_enabled: false,\n          super_follow_exclusive_tweet_notifications_enabled: false,\n          super_follow_tweet_api_enabled: false,\n          super_follow_user_api_enabled: false,\n          android_graphql_skip_api_media_color_palette: false,\n          creator_subscriptions_subscription_count_enabled: false,\n          blue_business_profile_image_shape_enabled: false,\n          unified_cards_ad_metadata_container_dynamic_card_content_query_enabled:\n            false,\n          rweb_video_timestamps_enabled: false,\n          c9s_tweet_anatomy_moderator_badge_enabled: false,\n          responsive_web_twitter_article_tweet_consumption_enabled: false,\n        },\n        fieldToggles: {},\n      }),\n      method: 'POST',\n    },\n  );\n\n  await updateCookieJar(auth.cookieJar(), response.headers);\n\n  // check for errors\n  if (!response.ok) {\n    throw new Error(await response.text());\n  }\n\n  return response;\n}\n\nexport async function createCreateNoteTweetRequest(\n  text: string,\n  auth: TwitterAuth,\n  tweetId?: string,\n  mediaData?: { data: Buffer; mediaType: string }[],\n) {\n  const onboardingTaskUrl = 'https://api.twitter.com/1.1/onboarding/task.json';\n\n  const cookies = await auth.cookieJar().getCookies(onboardingTaskUrl);\n  const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n  const headers = new Headers({\n    authorization: `Bearer ${(auth as any).bearerToken}`,\n    cookie: await auth.cookieJar().getCookieString(onboardingTaskUrl),\n    'content-type': 'application/json',\n    'User-Agent':\n      'Mozilla/5.0 (Linux; Android 11; Nokia G20) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.88 Mobile Safari/537.36',\n    'x-guest-token': (auth as any).guestToken,\n    'x-twitter-auth-type': 'OAuth2Client',\n    'x-twitter-active-user': 'yes',\n    'x-twitter-client-language': 'en',\n    'x-csrf-token': xCsrfToken?.value as string,\n  });\n\n  const variables: Record<string, any> = {\n    tweet_text: text,\n    dark_request: false,\n    media: {\n      media_entities: [],\n      possibly_sensitive: false,\n    },\n    semantic_annotation_ids: [],\n  };\n\n  if (mediaData && mediaData.length > 0) {\n    const mediaIds = await Promise.all(\n      mediaData.map(({ data, mediaType }) =>\n        uploadMedia(data, auth, mediaType),\n      ),\n    );\n\n    variables.media.media_entities = mediaIds.map((id) => ({\n      media_id: id,\n      tagged_users: [],\n    }));\n  }\n\n  if (tweetId) {\n    variables.reply = { in_reply_to_tweet_id: tweetId };\n  }\n\n  const response = await fetch(\n    'https://twitter.com/i/api/graphql/0aWhJJmFlxkxv9TAUJPanA/CreateNoteTweet',\n    {\n      headers,\n      body: JSON.stringify({\n        variables,\n        features: {\n          interactive_text_enabled: true,\n          longform_notetweets_inline_media_enabled: false,\n          responsive_web_text_conversations_enabled: false,\n          tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n            false,\n          vibe_api_enabled: false,\n          rweb_lists_timeline_redesign_enabled: true,\n          responsive_web_graphql_exclude_directive_enabled: true,\n          verified_phone_label_enabled: false,\n          creator_subscriptions_tweet_preview_api_enabled: true,\n          responsive_web_graphql_timeline_navigation_enabled: true,\n          responsive_web_graphql_skip_user_profile_image_extensions_enabled:\n            false,\n          tweetypie_unmention_optimization_enabled: true,\n          responsive_web_edit_tweet_api_enabled: true,\n          graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n          view_counts_everywhere_api_enabled: true,\n          longform_notetweets_consumption_enabled: true,\n          longform_notetweets_creation_enabled: true,\n          tweet_awards_web_tipping_enabled: false,\n          freedom_of_speech_not_reach_fetch_enabled: true,\n          standardized_nudges_misinfo: true,\n          longform_notetweets_rich_text_read_enabled: true,\n          responsive_web_enhance_cards_enabled: false,\n          subscriptions_verification_info_enabled: true,\n          subscriptions_verification_info_reason_enabled: true,\n          subscriptions_verification_info_verified_since_enabled: true,\n          super_follow_badge_privacy_enabled: false,\n          super_follow_exclusive_tweet_notifications_enabled: false,\n          super_follow_tweet_api_enabled: false,\n          super_follow_user_api_enabled: false,\n          android_graphql_skip_api_media_color_palette: false,\n          creator_subscriptions_subscription_count_enabled: false,\n          blue_business_profile_image_shape_enabled: false,\n          unified_cards_ad_metadata_container_dynamic_card_content_query_enabled:\n            false,\n          rweb_video_timestamps_enabled: false,\n          c9s_tweet_anatomy_moderator_badge_enabled: false,\n          responsive_web_twitter_article_tweet_consumption_enabled: false,\n\n          communities_web_enable_tweet_community_results_fetch: false,\n          articles_preview_enabled: false,\n          rweb_tipjar_consumption_enabled: false,\n          creator_subscriptions_quote_tweet_preview_enabled: false,\n        },\n        fieldToggles: {},\n      }),\n      method: 'POST',\n    },\n  );\n\n  await updateCookieJar(auth.cookieJar(), response.headers);\n\n  // Check for errors and log the error response\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error('Error response:', errorText);\n    throw new Error(`Failed to create long tweet: ${errorText}`);\n  }\n\n  // Parse and return the response\n  const data = await response.json();\n  return data;\n}\n\nexport async function fetchListTweets(\n  listId: string,\n  maxTweets: number,\n  cursor: string | undefined,\n  auth: TwitterAuth,\n): Promise<QueryTweetsResponse> {\n  if (maxTweets > 200) {\n    maxTweets = 200;\n  }\n\n  const listTweetsRequest = apiRequestFactory.createListTweetsRequest();\n  listTweetsRequest.variables.listId = listId;\n  listTweetsRequest.variables.count = maxTweets;\n\n  if (cursor != null && cursor != '') {\n    listTweetsRequest.variables['cursor'] = cursor;\n  }\n\n  const res = await requestApi<ListTimeline>(\n    listTweetsRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return parseListTimelineTweets(res.value);\n}\n\nexport function getTweets(\n  user: string,\n  maxTweets: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Tweet, void> {\n  return getTweetTimeline(user, maxTweets, async (q, mt, c) => {\n    const userIdRes = await getUserIdByScreenName(q, auth);\n\n    if (!userIdRes.success) {\n      throw userIdRes.err;\n    }\n\n    const { value: userId } = userIdRes;\n\n    return fetchTweets(userId, mt, c, auth);\n  });\n}\n\nexport function getTweetsByUserId(\n  userId: string,\n  maxTweets: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Tweet, void> {\n  return getTweetTimeline(userId, maxTweets, (q, mt, c) => {\n    return fetchTweets(q, mt, c, auth);\n  });\n}\n\nexport function getTweetsAndReplies(\n  user: string,\n  maxTweets: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Tweet, void> {\n  return getTweetTimeline(user, maxTweets, async (q, mt, c) => {\n    const userIdRes = await getUserIdByScreenName(q, auth);\n\n    if (!userIdRes.success) {\n      throw userIdRes.err;\n    }\n\n    const { value: userId } = userIdRes;\n\n    return fetchTweetsAndReplies(userId, mt, c, auth);\n  });\n}\n\nexport function getTweetsAndRepliesByUserId(\n  userId: string,\n  maxTweets: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Tweet, void> {\n  return getTweetTimeline(userId, maxTweets, (q, mt, c) => {\n    return fetchTweetsAndReplies(q, mt, c, auth);\n  });\n}\n\nexport async function fetchLikedTweets(\n  userId: string,\n  maxTweets: number,\n  cursor: string | undefined,\n  auth: TwitterAuth,\n): Promise<QueryTweetsResponse> {\n  if (!auth.isLoggedIn()) {\n    throw new Error('Scraper is not logged-in for fetching liked tweets.');\n  }\n\n  if (maxTweets > 200) {\n    maxTweets = 200;\n  }\n\n  const userTweetsRequest = apiRequestFactory.createUserLikedTweetsRequest();\n  userTweetsRequest.variables.userId = userId;\n  userTweetsRequest.variables.count = maxTweets;\n  userTweetsRequest.variables.includePromotedContent = false; // true on the website\n\n  if (cursor != null && cursor != '') {\n    userTweetsRequest.variables['cursor'] = cursor;\n  }\n\n  const res = await requestApi<TimelineV2>(\n    userTweetsRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return parseTimelineTweetsV2(res.value);\n}\n\nexport async function getTweetWhere(\n  tweets: AsyncIterable<Tweet>,\n  query: TweetQuery,\n): Promise<Tweet | null> {\n  const isCallback = typeof query === 'function';\n\n  for await (const tweet of tweets) {\n    const matches = isCallback\n      ? await query(tweet)\n      : checkTweetMatches(tweet, query);\n\n    if (matches) {\n      return tweet;\n    }\n  }\n\n  return null;\n}\n\nexport async function getTweetsWhere(\n  tweets: AsyncIterable<Tweet>,\n  query: TweetQuery,\n): Promise<Tweet[]> {\n  const isCallback = typeof query === 'function';\n  const filtered = [];\n\n  for await (const tweet of tweets) {\n    const matches = isCallback ? query(tweet) : checkTweetMatches(tweet, query);\n\n    if (!matches) continue;\n    filtered.push(tweet);\n  }\n\n  return filtered;\n}\n\nfunction checkTweetMatches(tweet: Tweet, options: Partial<Tweet>): boolean {\n  return Object.keys(options).every((k) => {\n    const key = k as keyof Tweet;\n    return tweet[key] === options[key];\n  });\n}\n\nexport async function getLatestTweet(\n  user: string,\n  includeRetweets: boolean,\n  max: number,\n  auth: TwitterAuth,\n): Promise<Tweet | null | void> {\n  const timeline = getTweets(user, max, auth);\n\n  // No point looping if max is 1, just use first entry.\n  return max === 1\n    ? (await timeline.next()).value\n    : await getTweetWhere(timeline, { isRetweet: includeRetweets });\n}\n\nexport interface TweetResultByRestId {\n  data?: TimelineEntryItemContentRaw;\n}\n\nexport async function getTweet(\n  id: string,\n  auth: TwitterAuth,\n): Promise<Tweet | null> {\n  const tweetDetailRequest = apiRequestFactory.createTweetDetailRequest();\n  tweetDetailRequest.variables.focalTweetId = id;\n\n  const res = await requestApi<ThreadedConversation>(\n    tweetDetailRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  if (!res.value) {\n    return null;\n  }\n\n  const tweets = parseThreadedConversation(res.value);\n  return tweets.find((tweet) => tweet.id === id) ?? null;\n}\n\nexport async function getTweetV2(\n  id: string,\n  auth: TwitterAuth,\n  options: {\n    expansions?: TTweetv2Expansion[];\n    tweetFields?: TTweetv2TweetField[];\n    pollFields?: TTweetv2PollField[];\n    mediaFields?: TTweetv2MediaField[];\n    userFields?: TTweetv2UserField[];\n    placeFields?: TTweetv2PlaceField[];\n  } = defaultOptions,\n): Promise<Tweet | null> {\n  const v2client = auth.getV2Client();\n  if (!v2client) {\n    throw new Error('V2 client is not initialized');\n  }\n\n  try {\n    const tweetData = await v2client.v2.singleTweet(id, {\n      expansions: options?.expansions,\n      'tweet.fields': options?.tweetFields,\n      'poll.fields': options?.pollFields,\n      'media.fields': options?.mediaFields,\n      'user.fields': options?.userFields,\n      'place.fields': options?.placeFields,\n    });\n\n    if (!tweetData?.data) {\n      console.warn(`Tweet data not found for ID: ${id}`);\n      return null;\n    }\n\n    const defaultTweetData = await getTweet(tweetData.data.id, auth);\n    // Extract primary tweet data\n    const parsedTweet = parseTweetV2ToV1(\n      tweetData.data,\n      tweetData?.includes,\n      defaultTweetData,\n    );\n\n    return parsedTweet;\n  } catch (error) {\n    console.error(`Error fetching tweet ${id}:`, error);\n    return null;\n  }\n}\n\nexport async function getTweetsV2(\n  ids: string[],\n  auth: TwitterAuth,\n  options: {\n    expansions?: TTweetv2Expansion[];\n    tweetFields?: TTweetv2TweetField[];\n    pollFields?: TTweetv2PollField[];\n    mediaFields?: TTweetv2MediaField[];\n    userFields?: TTweetv2UserField[];\n    placeFields?: TTweetv2PlaceField[];\n  } = defaultOptions,\n): Promise<Tweet[]> {\n  const v2client = auth.getV2Client();\n  if (!v2client) {\n    return [];\n  }\n\n  try {\n    const tweetData = await v2client.v2.tweets(ids, {\n      expansions: options?.expansions,\n      'tweet.fields': options?.tweetFields,\n      'poll.fields': options?.pollFields,\n      'media.fields': options?.mediaFields,\n      'user.fields': options?.userFields,\n      'place.fields': options?.placeFields,\n    });\n    const tweetsV2 = tweetData.data;\n    if (tweetsV2.length === 0) {\n      console.warn(`No tweet data found for IDs: ${ids.join(', ')}`);\n      return [];\n    }\n    return (\n      await Promise.all(\n        tweetsV2.map(\n          async (tweet) => await getTweetV2(tweet.id, auth, options),\n        ),\n      )\n    ).filter((tweet): tweet is Tweet => tweet !== null);\n  } catch (error) {\n    console.error(`Error fetching tweets for IDs: ${ids.join(', ')}`, error);\n    return [];\n  }\n}\n\nexport async function getTweetAnonymous(\n  id: string,\n  auth: TwitterAuth,\n): Promise<Tweet | null> {\n  const tweetResultByRestIdRequest =\n    apiRequestFactory.createTweetResultByRestIdRequest();\n  tweetResultByRestIdRequest.variables.tweetId = id;\n\n  const res = await requestApi<TweetResultByRestId>(\n    tweetResultByRestIdRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  if (!res.value.data) {\n    return null;\n  }\n\n  return parseTimelineEntryItemContentRaw(res.value.data, id);\n}\n\ninterface MediaUploadResponse {\n  media_id_string: string;\n  size: number;\n  expires_after_secs: number;\n  image: {\n    image_type: string;\n    w: number;\n    h: number;\n  };\n}\n\nasync function uploadMedia(\n  mediaData: Buffer,\n  auth: TwitterAuth,\n  mediaType: string,\n): Promise<string> {\n  const uploadUrl = 'https://upload.twitter.com/1.1/media/upload.json';\n\n  // Get authentication headers\n  const cookies = await auth.cookieJar().getCookies(uploadUrl);\n  const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n  const headers = new Headers({\n    authorization: `Bearer ${(auth as any).bearerToken}`,\n    cookie: await auth.cookieJar().getCookieString(uploadUrl),\n    'x-csrf-token': xCsrfToken?.value as string,\n  });\n\n  // Detect if media is a video based on mediaType\n  const isVideo = mediaType.startsWith('video/');\n\n  if (isVideo) {\n    // Handle video upload using chunked media upload\n    const mediaId = await uploadVideoInChunks(mediaData, mediaType);\n    return mediaId;\n  } else {\n    // Handle image upload\n    const form = new FormData();\n    form.append('media', new Blob([mediaData], {\n      type: mediaType,\n    }));\n\n    const response = await fetch(uploadUrl, {\n      method: 'POST',\n      headers,\n      body: form,\n    });\n\n    await updateCookieJar(auth.cookieJar(), response.headers);\n\n    if (!response.ok) {\n      throw new Error(await response.text());\n    }\n\n    const data: MediaUploadResponse = await response.json();\n    return data.media_id_string;\n  }\n\n  // Function to upload video in chunks\n  async function uploadVideoInChunks(\n    mediaData: Buffer,\n    mediaType: string,\n  ): Promise<string> {\n    // Initialize upload\n    const initParams = new URLSearchParams();\n    initParams.append('command', 'INIT');\n    initParams.append('media_type', mediaType);\n    initParams.append('total_bytes', mediaData.length.toString());\n\n    const initResponse = await fetch(uploadUrl, {\n      method: 'POST',\n      headers,\n      body: initParams,\n    });\n\n    if (!initResponse.ok) {\n      throw new Error(await initResponse.text());\n    }\n\n    const initData = await initResponse.json();\n    const mediaId = initData.media_id_string;\n\n    // Append upload in chunks\n    const segmentSize = 5 * 1024 * 1024; // 5 MB per chunk\n    let segmentIndex = 0;\n    for (let offset = 0; offset < mediaData.length; offset += segmentSize) {\n      const chunk = mediaData.slice(offset, offset + segmentSize);\n\n      const appendForm = new FormData();\n      appendForm.append('command', 'APPEND');\n      appendForm.append('media_id', mediaId);\n      appendForm.append('segment_index', segmentIndex.toString());\n      appendForm.append('media', new Blob([chunk]));\n\n      const appendResponse = await fetch(uploadUrl, {\n        method: 'POST',\n        headers,\n        body: appendForm,\n      });\n\n      if (!appendResponse.ok) {\n        throw new Error(await appendResponse.text());\n      }\n\n      segmentIndex++;\n    }\n\n    // Finalize upload\n    const finalizeParams = new URLSearchParams();\n    finalizeParams.append('command', 'FINALIZE');\n    finalizeParams.append('media_id', mediaId);\n\n    const finalizeResponse = await fetch(uploadUrl, {\n      method: 'POST',\n      headers,\n      body: finalizeParams,\n    });\n\n    if (!finalizeResponse.ok) {\n      throw new Error(await finalizeResponse.text());\n    }\n\n    const finalizeData = await finalizeResponse.json();\n\n    // Check processing status for videos\n    if (finalizeData.processing_info) {\n      await checkUploadStatus(mediaId);\n    }\n\n    return mediaId;\n  }\n\n  // Function to check upload status\n  async function checkUploadStatus(mediaId: string): Promise<void> {\n    let processing = true;\n    while (processing) {\n      await new Promise((resolve) => setTimeout(resolve, 5000)); // Wait 5 seconds\n\n      const statusParams = new URLSearchParams();\n      statusParams.append('command', 'STATUS');\n      statusParams.append('media_id', mediaId);\n\n      const statusResponse = await fetch(\n        `${uploadUrl}?${statusParams.toString()}`,\n        {\n          method: 'GET',\n          headers,\n        },\n      );\n\n      if (!statusResponse.ok) {\n        throw new Error(await statusResponse.text());\n      }\n\n      const statusData = await statusResponse.json();\n      const state = statusData.processing_info.state;\n\n      if (state === 'succeeded') {\n        processing = false;\n      } else if (state === 'failed') {\n        throw new Error('Video processing failed');\n      }\n    }\n  }\n}\n\n// Function to create a quote tweet\nexport async function createQuoteTweetRequest(\n  text: string,\n  quotedTweetId: string,\n  auth: TwitterAuth,\n  mediaData?: { data: Buffer; mediaType: string }[],\n) {\n  const onboardingTaskUrl = 'https://api.twitter.com/1.1/onboarding/task.json';\n\n  // Retrieve necessary cookies and tokens\n  const cookies = await auth.cookieJar().getCookies(onboardingTaskUrl);\n  const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n  const headers = new Headers({\n    authorization: `Bearer ${(auth as any).bearerToken}`,\n    cookie: await auth.cookieJar().getCookieString(onboardingTaskUrl),\n    'content-type': 'application/json',\n    'User-Agent':\n      'Mozilla/5.0 (Linux; Android 11; Nokia G20) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.88 Mobile Safari/537.36',\n    'x-guest-token': (auth as any).guestToken,\n    'x-twitter-auth-type': 'OAuth2Client',\n    'x-twitter-active-user': 'yes',\n    'x-csrf-token': xCsrfToken?.value as string,\n  });\n\n  // Construct variables for the GraphQL request\n  const variables: Record<string, any> = {\n    tweet_text: text,\n    dark_request: false,\n    attachment_url: `https://twitter.com/twitter/status/${quotedTweetId}`,\n    media: {\n      media_entities: [],\n      possibly_sensitive: false,\n    },\n    semantic_annotation_ids: [],\n  };\n\n  // Handle media uploads if any media data is provided\n  if (mediaData && mediaData.length > 0) {\n    const mediaIds = await Promise.all(\n      mediaData.map(({ data, mediaType }) =>\n        uploadMedia(data, auth, mediaType),\n      ),\n    );\n\n    variables.media.media_entities = mediaIds.map((id) => ({\n      media_id: id,\n      tagged_users: [],\n    }));\n  }\n\n  // Send the GraphQL request to create a quote tweet\n  const response = await fetch(\n    'https://twitter.com/i/api/graphql/a1p9RWpkYKBjWv_I3WzS-A/CreateTweet',\n    {\n      headers,\n      body: JSON.stringify({\n        variables,\n        features: {\n          interactive_text_enabled: true,\n          longform_notetweets_inline_media_enabled: false,\n          responsive_web_text_conversations_enabled: false,\n          tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n            false,\n          vibe_api_enabled: false,\n          rweb_lists_timeline_redesign_enabled: true,\n          responsive_web_graphql_exclude_directive_enabled: true,\n          verified_phone_label_enabled: false,\n          creator_subscriptions_tweet_preview_api_enabled: true,\n          responsive_web_graphql_timeline_navigation_enabled: true,\n          responsive_web_graphql_skip_user_profile_image_extensions_enabled:\n            false,\n          tweetypie_unmention_optimization_enabled: true,\n          responsive_web_edit_tweet_api_enabled: true,\n          graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n          view_counts_everywhere_api_enabled: true,\n          longform_notetweets_consumption_enabled: true,\n          tweet_awards_web_tipping_enabled: false,\n          freedom_of_speech_not_reach_fetch_enabled: true,\n          standardized_nudges_misinfo: true,\n          longform_notetweets_rich_text_read_enabled: true,\n          responsive_web_enhance_cards_enabled: false,\n          subscriptions_verification_info_enabled: true,\n          subscriptions_verification_info_reason_enabled: true,\n          subscriptions_verification_info_verified_since_enabled: true,\n          super_follow_badge_privacy_enabled: false,\n          super_follow_exclusive_tweet_notifications_enabled: false,\n          super_follow_tweet_api_enabled: false,\n          super_follow_user_api_enabled: false,\n          android_graphql_skip_api_media_color_palette: false,\n          creator_subscriptions_subscription_count_enabled: false,\n          blue_business_profile_image_shape_enabled: false,\n          unified_cards_ad_metadata_container_dynamic_card_content_query_enabled:\n            false,\n          rweb_video_timestamps_enabled: true,\n          c9s_tweet_anatomy_moderator_badge_enabled: true,\n          responsive_web_twitter_article_tweet_consumption_enabled: false,\n        },\n        fieldToggles: {},\n      }),\n      method: 'POST',\n    },\n  );\n\n  // Update the cookie jar with any new cookies from the response\n  await updateCookieJar(auth.cookieJar(), response.headers);\n\n  // Check for errors in the response\n  if (!response.ok) {\n    throw new Error(await response.text());\n  }\n\n  return response;\n}\n\n/**\n * Likes a tweet with the given tweet ID.\n * @param tweetId The ID of the tweet to like.\n * @param auth The authentication object.\n * @returns A promise that resolves when the tweet is liked.\n */\nexport async function likeTweet(\n  tweetId: string,\n  auth: TwitterAuth,\n): Promise<void> {\n  // Prepare the GraphQL endpoint and payload\n  const likeTweetUrl =\n    'https://twitter.com/i/api/graphql/lI07N6Otwv1PhnEgXILM7A/FavoriteTweet';\n\n  // Retrieve necessary cookies and tokens\n  const cookies = await auth.cookieJar().getCookies(likeTweetUrl);\n  const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n  const headers = new Headers({\n    authorization: `Bearer ${(auth as any).bearerToken}`,\n    cookie: await auth.cookieJar().getCookieString(likeTweetUrl),\n    'content-type': 'application/json',\n    'x-guest-token': (auth as any).guestToken,\n    'x-twitter-auth-type': 'OAuth2Client',\n    'x-twitter-active-user': 'yes',\n    'x-csrf-token': xCsrfToken?.value as string,\n  });\n\n  const payload = {\n    variables: {\n      tweet_id: tweetId,\n    },\n  };\n\n  // Send the POST request to like the tweet\n  const response = await fetch(likeTweetUrl, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(payload),\n  });\n\n  // Update the cookie jar with any new cookies from the response\n  await updateCookieJar(auth.cookieJar(), response.headers);\n\n  // Check for errors in the response\n  if (!response.ok) {\n    throw new Error(await response.text());\n  }\n}\n\n/**\n * Retweets a tweet with the given tweet ID.\n * @param tweetId The ID of the tweet to retweet.\n * @param auth The authentication object.\n * @returns A promise that resolves when the tweet is retweeted.\n */\nexport async function retweet(\n  tweetId: string,\n  auth: TwitterAuth,\n): Promise<void> {\n  // Prepare the GraphQL endpoint and payload\n  const retweetUrl =\n    'https://twitter.com/i/api/graphql/ojPdsZsimiJrUGLR1sjUtA/CreateRetweet';\n\n  // Retrieve necessary cookies and tokens\n  const cookies = await auth.cookieJar().getCookies(retweetUrl);\n  const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n  const headers = new Headers({\n    authorization: `Bearer ${(auth as any).bearerToken}`,\n    cookie: await auth.cookieJar().getCookieString(retweetUrl),\n    'content-type': 'application/json',\n    'x-guest-token': (auth as any).guestToken,\n    'x-twitter-auth-type': 'OAuth2Client',\n    'x-twitter-active-user': 'yes',\n    'x-csrf-token': xCsrfToken?.value as string,\n  });\n\n  const payload = {\n    variables: {\n      tweet_id: tweetId,\n      dark_request: false,\n    },\n  };\n\n  // Send the POST request to retweet the tweet\n  const response = await fetch(retweetUrl, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(payload),\n  });\n\n  // Update the cookie jar with any new cookies from the response\n  await updateCookieJar(auth.cookieJar(), response.headers);\n\n  // Check for errors in the response\n  if (!response.ok) {\n    throw new Error(await response.text());\n  }\n}\n\nexport async function createCreateLongTweetRequest(\n  text: string,\n  auth: TwitterAuth,\n  tweetId?: string,\n  mediaData?: { data: Buffer; mediaType: string }[],\n) {\n  // URL for the long tweet endpoint\n  const url =\n    'https://x.com/i/api/graphql/YNXM2DGuE2Sff6a2JD3Ztw/CreateNoteTweet';\n  const onboardingTaskUrl = 'https://api.twitter.com/1.1/onboarding/task.json';\n\n  const cookies = await auth.cookieJar().getCookies(onboardingTaskUrl);\n  const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n  //@ ts-expect-error - This is a private API.\n  const headers = new Headers({\n    authorization: `Bearer ${(auth as any).bearerToken}`,\n    cookie: await auth.cookieJar().getCookieString(onboardingTaskUrl),\n    'content-type': 'application/json',\n    'User-Agent':\n      'Mozilla/5.0 (Linux; Android 11; Nokia G20) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.88 Mobile Safari/537.36',\n    'x-guest-token': (auth as any).guestToken,\n    'x-twitter-auth-type': 'OAuth2Client',\n    'x-twitter-active-user': 'yes',\n    'x-twitter-client-language': 'en',\n    'x-csrf-token': xCsrfToken?.value as string,\n  });\n\n  const variables: Record<string, any> = {\n    tweet_text: text,\n    dark_request: false,\n    media: {\n      media_entities: [],\n      possibly_sensitive: false,\n    },\n    semantic_annotation_ids: [],\n  };\n\n  if (mediaData && mediaData.length > 0) {\n    const mediaIds = await Promise.all(\n      mediaData.map(({ data, mediaType }) =>\n        uploadMedia(data, auth, mediaType),\n      ),\n    );\n\n    variables.media.media_entities = mediaIds.map((id) => ({\n      media_id: id,\n      tagged_users: [],\n    }));\n  }\n\n  if (tweetId) {\n    variables.reply = { in_reply_to_tweet_id: tweetId };\n  }\n\n  const features = {\n    premium_content_api_read_enabled: false,\n    communities_web_enable_tweet_community_results_fetch: true,\n    c9s_tweet_anatomy_moderator_badge_enabled: true,\n    responsive_web_grok_analyze_button_fetch_trends_enabled: true,\n    responsive_web_edit_tweet_api_enabled: true,\n    graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n    view_counts_everywhere_api_enabled: true,\n    longform_notetweets_consumption_enabled: true,\n    responsive_web_twitter_article_tweet_consumption_enabled: true,\n    tweet_awards_web_tipping_enabled: false,\n    creator_subscriptions_quote_tweet_preview_enabled: false,\n    longform_notetweets_rich_text_read_enabled: true,\n    longform_notetweets_inline_media_enabled: true,\n    profile_label_improvements_pcf_label_in_post_enabled: false,\n    rweb_tipjar_consumption_enabled: true,\n    responsive_web_graphql_exclude_directive_enabled: true,\n    verified_phone_label_enabled: false,\n    articles_preview_enabled: true,\n    rweb_video_timestamps_enabled: true,\n    responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\n    freedom_of_speech_not_reach_fetch_enabled: true,\n    standardized_nudges_misinfo: true,\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n      true,\n    responsive_web_graphql_timeline_navigation_enabled: true,\n    responsive_web_enhance_cards_enabled: false,\n  };\n\n  const response = await fetch(url, {\n    headers,\n    body: JSON.stringify({\n      variables,\n      features,\n      queryId: 'YNXM2DGuE2Sff6a2JD3Ztw',\n    }),\n    method: 'POST',\n  });\n\n  await updateCookieJar(auth.cookieJar(), response.headers);\n\n  // check for errors\n  if (!response.ok) {\n    throw new Error(await response.text());\n  }\n\n  return response;\n}\n\nexport async function getArticle(\n  id: string,\n  auth: TwitterAuth,\n): Promise<TimelineArticle | null> {\n  const tweetDetailRequest =\n    apiRequestFactory.createTweetDetailArticleRequest();\n  tweetDetailRequest.variables.focalTweetId = id;\n\n  const res = await requestApi<ThreadedConversation>(\n    tweetDetailRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  if (!res.value) {\n    return null;\n  }\n\n  const articles = parseArticle(res.value);\n  return articles.find((article) => article.id === id) ?? null;\n}\n\n/**\n * Fetches a single page of retweeters for a given tweet, collecting both bottom and top cursors.\n * Logs each user's description in the process.\n * All comments must remain in English.\n */\nexport async function fetchRetweetersPage(\n    tweetId: string,\n    auth: TwitterAuth,\n    cursor?: string,\n    count = 40,\n): Promise<{\n  retweeters: Retweeter[];\n  bottomCursor?: string;\n  topCursor?: string;\n}> {\n  const baseUrl =\n      'https://twitter.com/i/api/graphql/VSnHXwLGADxxtetlPnO7xg/Retweeters';\n\n  // Build query parameters\n  const variables = {\n    tweetId,\n    count,\n    cursor,\n    includePromotedContent: true,\n  };\n  const features = {\n    profile_label_improvements_pcf_label_in_post_enabled: true,\n    rweb_tipjar_consumption_enabled: true,\n    responsive_web_graphql_exclude_directive_enabled: true,\n    verified_phone_label_enabled: false,\n    creator_subscriptions_tweet_preview_api_enabled: true,\n    responsive_web_graphql_timeline_navigation_enabled: true,\n    responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\n    premium_content_api_read_enabled: false,\n    communities_web_enable_tweet_community_results_fetch: true,\n    c9s_tweet_anatomy_moderator_badge_enabled: true,\n    responsive_web_grok_analyze_button_fetch_trends_enabled: false,\n    responsive_web_grok_analyze_post_followups_enabled: true,\n    responsive_web_jetfuel_frame: false,\n    responsive_web_grok_share_attachment_enabled: true,\n    articles_preview_enabled: true,\n    responsive_web_edit_tweet_api_enabled: true,\n    graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n    view_counts_everywhere_api_enabled: true,\n    longform_notetweets_consumption_enabled: true,\n    responsive_web_twitter_article_tweet_consumption_enabled: true,\n    tweet_awards_web_tipping_enabled: false,\n    creator_subscriptions_quote_tweet_preview_enabled: false,\n    freedom_of_speech_not_reach_fetch_enabled: true,\n    standardized_nudges_misinfo: true,\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled: true,\n    rweb_video_timestamps_enabled: true,\n    longform_notetweets_rich_text_read_enabled: true,\n    longform_notetweets_inline_media_enabled: true,\n    responsive_web_grok_image_annotation_enabled: false,\n    responsive_web_enhance_cards_enabled: false,\n  };\n\n  // Prepare URL with query params\n  const url = new URL(baseUrl);\n  url.searchParams.set('variables', JSON.stringify(variables));\n  url.searchParams.set('features', JSON.stringify(features));\n\n  // Retrieve necessary cookies and tokens\n  const cookies = await auth.cookieJar().getCookies(url.toString());\n  const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n  const headers = new Headers({\n    authorization: `Bearer ${(auth as any).bearerToken}`,\n    cookie: await auth.cookieJar().getCookieString(url.toString()),\n    'content-type': 'application/json',\n    'x-guest-token': (auth as any).guestToken,\n    'x-twitter-auth-type': 'OAuth2Client',\n    'x-twitter-active-user': 'yes',\n    'x-csrf-token': xCsrfToken?.value || '',\n  });\n\n  const response = await fetch(url.toString(), {\n    method: 'GET',\n    headers,\n  });\n\n  // Update cookies if needed\n  await updateCookieJar(auth.cookieJar(), response.headers);\n\n  if (!response.ok) {\n    throw new Error(await response.text());\n  }\n\n  const json = await response.json();\n  const instructions =\n      json?.data?.retweeters_timeline?.timeline?.instructions || [];\n\n  const retweeters: Retweeter[] = [];\n  let bottomCursor: string | undefined;\n  let topCursor: string | undefined;\n\n  // Parse the retweeters from instructions\n  for (const instruction of instructions) {\n    if (instruction.type === 'TimelineAddEntries') {\n      for (const entry of instruction.entries) {\n        // If this entry is a user entry\n        if (entry.content?.itemContent?.user_results?.result) {\n          const user = entry.content.itemContent.user_results.result;\n          const description = user.legacy?.name ?? '';\n\n          retweeters.push({\n            rest_id: user.rest_id,\n            screen_name: user.legacy?.screen_name ?? '',\n            name: user.legacy?.name ?? '',\n            description,\n          });\n        }\n\n        // Capture the bottom cursor\n        if (\n            entry.content?.entryType === 'TimelineTimelineCursor' &&\n            entry.content?.cursorType === 'Bottom'\n        ) {\n          bottomCursor = entry.content.value;\n        }\n\n        // Capture the top cursor\n        if (\n            entry.content?.entryType === 'TimelineTimelineCursor' &&\n            entry.content?.cursorType === 'Top'\n        ) {\n          topCursor = entry.content.value;\n        }\n      }\n    }\n  }\n\n  return { retweeters, bottomCursor, topCursor };\n}\n\n/**\n * Retrieves *all* retweeters by chaining requests until no next cursor is found.\n * @param tweetId The ID of the tweet.\n * @param auth The TwitterAuth object for authentication.\n * @returns A list of all users that retweeted the tweet.\n */\nexport async function getAllRetweeters(\n    tweetId: string,\n    auth: TwitterAuth\n): Promise<Retweeter[]> {\n  let allRetweeters: Retweeter[] = [];\n  let cursor: string | undefined;\n\n  while (true) {\n    // Destructure bottomCursor / topCursor\n    const { retweeters, bottomCursor, topCursor } = await fetchRetweetersPage(\n        tweetId,\n        auth,\n        cursor,\n        40\n    );\n    allRetweeters = allRetweeters.concat(retweeters);\n\n    const newCursor = bottomCursor || topCursor;\n\n    // Stop if there is no new cursor or if it's the same as the old one\n    if (!newCursor || newCursor === cursor) {\n      break;\n    }\n\n    cursor = newCursor;\n  }\n\n  return allRetweeters;\n}\n","import { requestApi } from './api';\nimport { TwitterAuth } from './auth';\nimport { ApiError } from './errors';\nimport { TimelineInstruction } from './timeline-v2';\n\nexport interface HomeTimelineResponse {\n  data?: {\n    home: {\n      home_timeline_urt: {\n        instructions: TimelineInstruction[];\n      };\n    };\n  };\n}\n\nexport async function fetchHomeTimeline(\n  count: number,\n  seenTweetIds: string[],\n  auth: TwitterAuth,\n): Promise<any[]> {\n  const variables = {\n    count,\n    includePromotedContent: true,\n    latestControlAvailable: true,\n    requestContext: 'launch',\n    withCommunity: true,\n    seenTweetIds,\n  };\n\n  const features = {\n    rweb_tipjar_consumption_enabled: true,\n    responsive_web_graphql_exclude_directive_enabled: true,\n    verified_phone_label_enabled: false,\n    creator_subscriptions_tweet_preview_api_enabled: true,\n    responsive_web_graphql_timeline_navigation_enabled: true,\n    responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\n    communities_web_enable_tweet_community_results_fetch: true,\n    c9s_tweet_anatomy_moderator_badge_enabled: true,\n    articles_preview_enabled: true,\n    responsive_web_edit_tweet_api_enabled: true,\n    graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n    view_counts_everywhere_api_enabled: true,\n    longform_notetweets_consumption_enabled: true,\n    responsive_web_twitter_article_tweet_consumption_enabled: true,\n    tweet_awards_web_tipping_enabled: false,\n    creator_subscriptions_quote_tweet_preview_enabled: false,\n    freedom_of_speech_not_reach_fetch_enabled: true,\n    standardized_nudges_misinfo: true,\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n      true,\n    rweb_video_timestamps_enabled: true,\n    longform_notetweets_rich_text_read_enabled: true,\n    longform_notetweets_inline_media_enabled: true,\n    responsive_web_enhance_cards_enabled: false,\n  };\n\n  const res = await requestApi<HomeTimelineResponse>(\n    `https://x.com/i/api/graphql/HJFjzBgCs16TqxewQOeLNg/HomeTimeline?variables=${encodeURIComponent(\n      JSON.stringify(variables),\n    )}&features=${encodeURIComponent(JSON.stringify(features))}`,\n    auth,\n    'GET',\n  );\n\n  if (!res.success) {\n    if (res.err instanceof ApiError) {\n      console.error('Error details:', res.err.data);\n    }\n    throw res.err;\n  }\n\n  const home = res.value?.data?.home.home_timeline_urt?.instructions;\n\n  if (!home) {\n    return [];\n  }\n\n  const entries: any[] = [];\n\n  for (const instruction of home) {\n    if (instruction.type === 'TimelineAddEntries') {\n      for (const entry of instruction.entries ?? []) {\n        entries.push(entry);\n      }\n    }\n  }\n  // get the itemContnent from each entry\n  const tweets = entries\n    .map((entry) => entry.content.itemContent?.tweet_results?.result)\n    .filter((tweet) => tweet !== undefined);\n\n  return tweets;\n}\n","import { requestApi } from './api';\nimport { TwitterAuth } from './auth';\nimport { ApiError } from './errors';\nimport { TimelineInstruction } from './timeline-v2';\n\nexport interface HomeLatestTimelineResponse {\n  data?: {\n    home: {\n      home_timeline_urt: {\n        instructions: TimelineInstruction[];\n      };\n    };\n  };\n}\n\nexport async function fetchFollowingTimeline(\n  count: number,\n  seenTweetIds: string[],\n  auth: TwitterAuth,\n): Promise<any[]> {\n  const variables = {\n    count,\n    includePromotedContent: true,\n    latestControlAvailable: true,\n    requestContext: 'launch',\n    seenTweetIds,\n  };\n\n  const features = {\n    profile_label_improvements_pcf_label_in_post_enabled: true,\n    rweb_tipjar_consumption_enabled: true,\n    responsive_web_graphql_exclude_directive_enabled: true,\n    verified_phone_label_enabled: false,\n    creator_subscriptions_tweet_preview_api_enabled: true,\n    responsive_web_graphql_timeline_navigation_enabled: true,\n    responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\n    communities_web_enable_tweet_community_results_fetch: true,\n    c9s_tweet_anatomy_moderator_badge_enabled: true,\n    articles_preview_enabled: true,\n    responsive_web_edit_tweet_api_enabled: true,\n    graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n    view_counts_everywhere_api_enabled: true,\n    longform_notetweets_consumption_enabled: true,\n    responsive_web_twitter_article_tweet_consumption_enabled: true,\n    tweet_awards_web_tipping_enabled: false,\n    creator_subscriptions_quote_tweet_preview_enabled: false,\n    freedom_of_speech_not_reach_fetch_enabled: true,\n    standardized_nudges_misinfo: true,\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n      true,\n    rweb_video_timestamps_enabled: true,\n    longform_notetweets_rich_text_read_enabled: true,\n    longform_notetweets_inline_media_enabled: true,\n    responsive_web_enhance_cards_enabled: false,\n  };\n\n  const res = await requestApi<HomeLatestTimelineResponse>(\n    `https://x.com/i/api/graphql/K0X1xbCZUjttdK8RazKAlw/HomeLatestTimeline?variables=${encodeURIComponent(\n      JSON.stringify(variables),\n    )}&features=${encodeURIComponent(JSON.stringify(features))}`,\n    auth,\n    'GET',\n  );\n\n  if (!res.success) {\n    if (res.err instanceof ApiError) {\n      console.error('Error details:', res.err.data);\n    }\n    throw res.err;\n  }\n\n  const home = res.value?.data?.home.home_timeline_urt?.instructions;\n\n  if (!home) {\n    return [];\n  }\n\n  const entries: any[] = [];\n\n  for (const instruction of home) {\n    if (instruction.type === 'TimelineAddEntries') {\n      for (const entry of instruction.entries ?? []) {\n        entries.push(entry);\n      }\n    }\n  }\n  // get the itemContnent from each entry\n  const tweets = entries\n    .map((entry) => entry.content.itemContent?.tweet_results?.result)\n    .filter((tweet) => tweet !== undefined);\n\n  return tweets;\n}\n","import { TwitterAuth } from './auth';\nimport { updateCookieJar } from './requests';\n\nexport interface DirectMessage {\n  id: string;\n  text: string;\n  senderId: string;\n  recipientId: string;\n  createdAt: string;\n  mediaUrls?: string[];\n  senderScreenName?: string;\n  recipientScreenName?: string;\n}\n\nexport interface DirectMessageConversation {\n  conversationId: string;\n  messages: DirectMessage[];\n  participants: {\n    id: string;\n    screenName: string;\n  }[];\n}\n\nexport interface DirectMessageEvent {\n  id: string;\n  type: string;\n  message_create: {\n    sender_id: string;\n    target: {\n      recipient_id: string;\n    };\n    message_data: {\n      text: string;\n      created_at: string;\n      entities?: {\n        urls?: Array<{\n          url: string;\n          expanded_url: string;\n          display_url: string;\n        }>;\n        media?: Array<{\n          url: string;\n          type: string;\n        }>;\n      };\n    };\n  };\n}\n\nexport interface DirectMessagesResponse {\n  conversations: DirectMessageConversation[];\n  users: TwitterUser[];\n  cursor?: string;\n  lastSeenEventId?: string;\n  trustedLastSeenEventId?: string;\n  untrustedLastSeenEventId?: string;\n  inboxTimelines?: {\n    trusted?: {\n      status: string;\n      minEntryId?: string;\n    };\n    untrusted?: {\n      status: string;\n      minEntryId?: string;\n    };\n  };\n  userId: string;\n}\n\nexport interface TwitterUser {\n  id: string;\n  screenName: string;\n  name: string;\n  profileImageUrl: string;\n  description?: string;\n  verified?: boolean;\n  protected?: boolean;\n  followersCount?: number;\n  friendsCount?: number;\n}\n\nexport interface SendDirectMessageResponse {\n  entries: {\n    message: {\n      id: string;\n      time: string;\n      affects_sort: boolean;\n      conversation_id: string;\n      message_data: {\n        id: string;\n        time: string;\n        recipient_id: string;\n        sender_id: string;\n        text: string;\n      };\n    };\n  }[];\n  users: Record<string, TwitterUser>;\n}\n\nfunction parseDirectMessageConversations(\n  data: any,\n  userId: string,\n): DirectMessagesResponse {\n  try {\n    const inboxState = data?.inbox_initial_state;\n    const conversations = inboxState?.conversations || {};\n    const entries = inboxState?.entries || [];\n    const users = inboxState?.users || {};\n\n    // Parse users first\n    const parsedUsers: TwitterUser[] = Object.values(users).map(\n      (user: any) => ({\n        id: user.id_str,\n        screenName: user.screen_name,\n        name: user.name,\n        profileImageUrl: user.profile_image_url_https,\n        description: user.description,\n        verified: user.verified,\n        protected: user.protected,\n        followersCount: user.followers_count,\n        friendsCount: user.friends_count,\n      }),\n    );\n\n    // Group messages by conversation_id\n    const messagesByConversation: Record<string, any[]> = {};\n    entries.forEach((entry: any) => {\n      if (entry.message) {\n        const convId = entry.message.conversation_id;\n        if (!messagesByConversation[convId]) {\n          messagesByConversation[convId] = [];\n        }\n        messagesByConversation[convId].push(entry.message);\n      }\n    });\n\n    // Convert to DirectMessageConversation array\n    const parsedConversations = Object.entries(conversations).map(\n      ([convId, conv]: [string, any]) => {\n        const messages = messagesByConversation[convId] || [];\n\n        // Sort messages by time in ascending order\n        messages.sort((a, b) => Number(a.time) - Number(b.time));\n\n        return {\n          conversationId: convId,\n          messages: parseDirectMessages(messages, users),\n          participants: conv.participants.map((p: any) => ({\n            id: p.user_id,\n            screenName: users[p.user_id]?.screen_name || p.user_id,\n          })),\n        };\n      },\n    );\n\n    return {\n      conversations: parsedConversations,\n      users: parsedUsers,\n      cursor: inboxState?.cursor,\n      lastSeenEventId: inboxState?.last_seen_event_id,\n      trustedLastSeenEventId: inboxState?.trusted_last_seen_event_id,\n      untrustedLastSeenEventId: inboxState?.untrusted_last_seen_event_id,\n      inboxTimelines: {\n        trusted: inboxState?.inbox_timelines?.trusted && {\n          status: inboxState.inbox_timelines.trusted.status,\n          minEntryId: inboxState.inbox_timelines.trusted.min_entry_id,\n        },\n        untrusted: inboxState?.inbox_timelines?.untrusted && {\n          status: inboxState.inbox_timelines.untrusted.status,\n          minEntryId: inboxState.inbox_timelines.untrusted.min_entry_id,\n        },\n      },\n      userId,\n    };\n  } catch (error) {\n    console.error('Error parsing DM conversations:', error);\n    return {\n      conversations: [],\n      users: [],\n      userId,\n    };\n  }\n}\n\nfunction parseDirectMessages(messages: any[], users: any): DirectMessage[] {\n  try {\n    return messages.map((msg: any) => ({\n      id: msg.message_data.id,\n      text: msg.message_data.text,\n      senderId: msg.message_data.sender_id,\n      recipientId: msg.message_data.recipient_id,\n      createdAt: msg.message_data.time,\n      mediaUrls: extractMediaUrls(msg.message_data),\n      senderScreenName: users[msg.message_data.sender_id]?.screen_name,\n      recipientScreenName: users[msg.message_data.recipient_id]?.screen_name,\n    }));\n  } catch (error) {\n    console.error('Error parsing DMs:', error);\n    return [];\n  }\n}\n\nfunction extractMediaUrls(messageData: any): string[] | undefined {\n  const urls: string[] = [];\n\n  // Extract URLs from entities if they exist\n  if (messageData.entities?.urls) {\n    messageData.entities.urls.forEach((url: any) => {\n      urls.push(url.expanded_url);\n    });\n  }\n\n  // Extract media URLs if they exist\n  if (messageData.entities?.media) {\n    messageData.entities.media.forEach((media: any) => {\n      urls.push(media.media_url_https || media.media_url);\n    });\n  }\n\n  return urls.length > 0 ? urls : undefined;\n}\n\nexport async function getDirectMessageConversations(\n  userId: string,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<DirectMessagesResponse> {\n  if (!auth.isLoggedIn()) {\n    throw new Error('Authentication required to fetch direct messages');\n  }\n\n  const url =\n    'https://twitter.com/i/api/graphql/7s3kOODhC5vgXlO0OlqYdA/DMInboxTimeline';\n  const messageListUrl = 'https://x.com/i/api/1.1/dm/inbox_initial_state.json';\n\n  const params = new URLSearchParams();\n\n  if (cursor) {\n    params.append('cursor', cursor);\n  }\n\n  const finalUrl = `${messageListUrl}${\n    params.toString() ? '?' + params.toString() : ''\n  }`;\n  const cookies = await auth.cookieJar().getCookies(url);\n  const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n  const headers = new Headers({\n    authorization: `Bearer ${(auth as any).bearerToken}`,\n    cookie: await auth.cookieJar().getCookieString(url),\n    'content-type': 'application/json',\n    'User-Agent':\n      'Mozilla/5.0 (Linux; Android 11; Nokia G20) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.88 Mobile Safari/537.36',\n    'x-guest-token': (auth as any).guestToken,\n    'x-twitter-auth-type': 'OAuth2Client',\n    'x-twitter-active-user': 'yes',\n    'x-csrf-token': xCsrfToken?.value as string,\n  });\n\n  const response = await fetch(finalUrl, {\n    method: 'GET',\n    headers,\n  });\n\n  await updateCookieJar(auth.cookieJar(), response.headers);\n\n  if (!response.ok) {\n    throw new Error(await response.text());\n  }\n\n  // parse the response\n  const data = await response.json();\n  return parseDirectMessageConversations(data, userId);\n}\n\nexport async function sendDirectMessage(\n  auth: TwitterAuth,\n  conversation_id: string,\n  text: string,\n): Promise<SendDirectMessageResponse> {\n  if (!auth.isLoggedIn()) {\n    throw new Error('Authentication required to send direct messages');\n  }\n\n  const url =\n    'https://twitter.com/i/api/graphql/7s3kOODhC5vgXlO0OlqYdA/DMInboxTimeline';\n  const messageDmUrl = 'https://x.com/i/api/1.1/dm/new2.json';\n\n  const cookies = await auth.cookieJar().getCookies(url);\n  const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n  const headers = new Headers({\n    authorization: `Bearer ${(auth as any).bearerToken}`,\n    cookie: await auth.cookieJar().getCookieString(url),\n    'content-type': 'application/json',\n    'User-Agent':\n      'Mozilla/5.0 (Linux; Android 11; Nokia G20) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.88 Mobile Safari/537.36',\n    'x-guest-token': (auth as any).guestToken,\n    'x-twitter-auth-type': 'OAuth2Client',\n    'x-twitter-active-user': 'yes',\n    'x-csrf-token': xCsrfToken?.value as string,\n  });\n\n  const payload = {\n    conversation_id: `${conversation_id}`,\n    recipient_ids: false,\n    text: text,\n    cards_platform: 'Web-12',\n    include_cards: 1,\n    include_quote_count: true,\n    dm_users: false,\n  };\n\n  const response = await fetch(messageDmUrl, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(payload),\n  });\n\n  await updateCookieJar(auth.cookieJar(), response.headers);\n\n  if (!response.ok) {\n    throw new Error(await response.text());\n  }\n\n  return await response.json();\n}\n","import { TwitterAuth } from './auth';\nimport { updateCookieJar } from './requests';\nimport {\n    AudioSpace,\n    AudioSpaceByIdResponse,\n    AudioSpaceByIdVariables,\n    AuthenticatePeriscopeResponse,\n    BrowseSpaceTopicsResponse,\n    Community,\n    CommunitySelectQueryResponse,\n    LiveVideoStreamStatus,\n    LoginTwitterTokenResponse,\n    Subtopic,\n} from './types/spaces';\n\n/**\n * Generates a random string that mimics a UUID v4.\n */\n// TODO: install and replace with uuidv4\nfunction generateRandomId(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = (Math.random() * 16) | 0;\n        const v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\n\n/**\n * Fetches details of an Audio Space by its ID.\n * @param variables The variables required for the GraphQL query.\n * @param auth The authentication object.\n * @returns The details of the Audio Space.\n */\nexport async function fetchAudioSpaceById(\n    variables: AudioSpaceByIdVariables,\n    auth: TwitterAuth,\n): Promise<AudioSpace> {\n    const queryId = 'Tvv_cNXCbtTcgdy1vWYPMw'; // Specific to the AudioSpaceById GraphQL query\n    const operationName = 'AudioSpaceById';\n\n    // URL encode the variables and features\n    const variablesEncoded = encodeURIComponent(JSON.stringify(variables));\n    const features = {\n        spaces_2022_h2_spaces_communities: true,\n        spaces_2022_h2_clipping: true,\n        creator_subscriptions_tweet_preview_api_enabled: true,\n        profile_label_improvements_pcf_label_in_post_enabled: false,\n        rweb_tipjar_consumption_enabled: true,\n        responsive_web_graphql_exclude_directive_enabled: true,\n        verified_phone_label_enabled: false,\n        premium_content_api_read_enabled: false,\n        communities_web_enable_tweet_community_results_fetch: true,\n        c9s_tweet_anatomy_moderator_badge_enabled: true,\n        responsive_web_grok_analyze_button_fetch_trends_enabled: true,\n        articles_preview_enabled: true,\n        responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\n        responsive_web_edit_tweet_api_enabled: true,\n        graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n        view_counts_everywhere_api_enabled: true,\n        longform_notetweets_consumption_enabled: true,\n        responsive_web_twitter_article_tweet_consumption_enabled: true,\n        tweet_awards_web_tipping_enabled: false,\n        creator_subscriptions_quote_tweet_preview_enabled: false,\n        freedom_of_speech_not_reach_fetch_enabled: true,\n        standardized_nudges_misinfo: true,\n        tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n            true,\n        rweb_video_timestamps_enabled: true,\n        longform_notetweets_rich_text_read_enabled: true,\n        longform_notetweets_inline_media_enabled: true,\n        responsive_web_graphql_timeline_navigation_enabled: true,\n        responsive_web_enhance_cards_enabled: false,\n    };\n    const featuresEncoded = encodeURIComponent(JSON.stringify(features));\n\n    const url = `https://x.com/i/api/graphql/${queryId}/${operationName}?variables=${variablesEncoded}&features=${featuresEncoded}`;\n\n    const onboardingTaskUrl = 'https://api.twitter.com/1.1/onboarding/task.json';\n\n    // Retrieve necessary cookies and tokens\n    const cookies = await auth.cookieJar().getCookies(onboardingTaskUrl);\n    const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n    const headers = new Headers({\n        Accept: '*/*',\n        Authorization: `Bearer ${(auth as any).bearerToken}`,\n        'Content-Type': 'application/json',\n        Cookie: await auth.cookieJar().getCookieString(onboardingTaskUrl),\n        'User-Agent':\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'x-guest-token': (auth as any).guestToken,\n        'x-twitter-auth-type': 'OAuth2Client',\n        'x-twitter-active-user': 'yes',\n        'x-csrf-token': xCsrfToken?.value as string,\n    });\n\n    const response = await auth.fetch(url, {\n        headers,\n        method: 'GET',\n    });\n\n    // Update the cookie jar with any new cookies from the response\n    await updateCookieJar(auth.cookieJar(), response.headers);\n\n    // Check for errors in the response\n    if (!response.ok) {\n        throw new Error(`Failed to fetch Audio Space: ${await response.text()}`);\n    }\n\n    const data: AudioSpaceByIdResponse = await response.json();\n\n    if (data.errors && data.errors.length > 0) {\n        throw new Error(`API Errors: ${JSON.stringify(data.errors)}`);\n    }\n\n    return data.data.audioSpace;\n}\n\n/**\n * Fetches available space topics from Twitter.\n * @param auth The authentication object.\n * @returns An array of space topics.\n */\nexport async function fetchBrowseSpaceTopics(\n    auth: TwitterAuth,\n): Promise<Subtopic[]> {\n    const queryId = 'TYpVV9QioZfViHqEqRZxJA';\n    const operationName = 'BrowseSpaceTopics';\n\n    const variables = {};\n    const features = {};\n\n    const variablesEncoded = encodeURIComponent(JSON.stringify(variables));\n    const featuresEncoded = encodeURIComponent(JSON.stringify(features));\n\n    const url = `https://x.com/i/api/graphql/${queryId}/${operationName}?variables=${variablesEncoded}&features=${featuresEncoded}`;\n\n    const onboardingTaskUrl = 'https://api.twitter.com/1.1/onboarding/task.json';\n\n    // Retrieve necessary cookies and tokens\n    const cookies = await auth.cookieJar().getCookies(onboardingTaskUrl);\n    const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n    const headers = new Headers({\n        Accept: '*/*',\n        Authorization: `Bearer ${(auth as any).bearerToken}`,\n        'Content-Type': 'application/json',\n        Cookie: await auth.cookieJar().getCookieString(onboardingTaskUrl),\n        'User-Agent':\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'x-guest-token': (auth as any).guestToken,\n        'x-twitter-auth-type': 'OAuth2Client',\n        'x-twitter-active-user': 'yes',\n        'x-csrf-token': xCsrfToken?.value as string,\n    });\n\n    const response = await auth.fetch(url, {\n        headers,\n        method: 'GET',\n    });\n\n    // Update the cookie jar with any new cookies from the response\n    await updateCookieJar(auth.cookieJar(), response.headers);\n\n    // Check for errors in the response\n    if (!response.ok) {\n        throw new Error(`Failed to fetch Space Topics: ${await response.text()}`);\n    }\n\n    const data: BrowseSpaceTopicsResponse = await response.json();\n\n    if (data.errors && data.errors.length > 0) {\n        throw new Error(`API Errors: ${JSON.stringify(data.errors)}`);\n    }\n\n    // Flatten the subtopics from all categories into a single array\n    return data.data.browse_space_topics.categories.flatMap(\n        (category) => category.subtopics,\n    );\n}\n\n/**\n * Fetches available communities from Twitter.\n * @param auth The authentication object.\n * @returns An array of communities.\n */\nexport async function fetchCommunitySelectQuery(\n    auth: TwitterAuth,\n): Promise<Community[]> {\n    const queryId = 'Lue1DfmoW2cc0225t_8z1w'; // Specific to the CommunitySelectQuery GraphQL query\n    const operationName = 'CommunitySelectQuery';\n\n    const variables = {};\n    const features = {};\n\n    const variablesEncoded = encodeURIComponent(JSON.stringify(variables));\n    const featuresEncoded = encodeURIComponent(JSON.stringify(features));\n\n    const url = `https://x.com/i/api/graphql/${queryId}/${operationName}?variables=${variablesEncoded}&features=${featuresEncoded}`;\n\n    const onboardingTaskUrl = 'https://api.twitter.com/1.1/onboarding/task.json';\n\n    // Retrieve necessary cookies and tokens\n    const cookies = await auth.cookieJar().getCookies(onboardingTaskUrl);\n    const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n    const headers = new Headers({\n        Accept: '*/*',\n        Authorization: `Bearer ${(auth as any).bearerToken}`,\n        'Content-Type': 'application/json',\n        Cookie: await auth.cookieJar().getCookieString(onboardingTaskUrl),\n        'User-Agent':\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'x-guest-token': (auth as any).guestToken,\n        'x-twitter-auth-type': 'OAuth2Client',\n        'x-twitter-active-user': 'yes',\n        'x-csrf-token': xCsrfToken?.value as string,\n    });\n\n    const response = await auth.fetch(url, {\n        headers,\n        method: 'GET',\n    });\n\n    // Update the cookie jar with any new cookies from the response\n    await updateCookieJar(auth.cookieJar(), response.headers);\n\n    // Check for errors in the response\n    if (!response.ok) {\n        throw new Error(\n            `Failed to fetch Community Select Query: ${await response.text()}`,\n        );\n    }\n\n    const data: CommunitySelectQueryResponse = await response.json();\n\n    if (data.errors && data.errors.length > 0) {\n        throw new Error(`API Errors: ${JSON.stringify(data.errors)}`);\n    }\n\n    // Return the space_hostable_communities array, which may be empty\n    return data.data.space_hostable_communities;\n}\n\n/**\n * Fetches the status of an Audio Space stream by its media key.\n * @param mediaKey The media key of the Audio Space.\n * @param auth The authentication object.\n * @returns The status of the Audio Space stream.\n */\nexport async function fetchLiveVideoStreamStatus(\n    mediaKey: string,\n    auth: TwitterAuth,\n): Promise<LiveVideoStreamStatus> {\n    const baseUrl = `https://x.com/i/api/1.1/live_video_stream/status/${mediaKey}`;\n    const queryParams = new URLSearchParams({\n        client: 'web',\n        use_syndication_guest_id: 'false',\n        cookie_set_host: 'x.com',\n    });\n\n    const url = `${baseUrl}?${queryParams.toString()}`;\n\n    const onboardingTaskUrl = 'https://api.twitter.com/1.1/onboarding/task.json';\n\n    // Retrieve necessary cookies and tokens\n    const cookies = await auth.cookieJar().getCookies(onboardingTaskUrl);\n    const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n    const headers = new Headers({\n        Accept: '*/*',\n        Authorization: `Bearer ${(auth as any).bearerToken}`,\n        'Content-Type': 'application/json',\n        Cookie: await auth.cookieJar().getCookieString(onboardingTaskUrl),\n        'User-Agent':\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'x-guest-token': (auth as any).guestToken,\n        'x-twitter-auth-type': 'OAuth2Client',\n        'x-twitter-active-user': 'yes',\n        'x-csrf-token': xCsrfToken?.value as string,\n    });\n\n    try {\n        const response = await auth.fetch(url, {\n            method: 'GET',\n            headers: headers,\n        });\n\n        // Update the cookie jar with any new cookies from the response\n        await updateCookieJar(auth.cookieJar(), response.headers);\n\n        // Check for errors in the response\n        if (!response.ok) {\n            throw new Error(\n                `Failed to fetch live video stream status: ${await response.text()}`,\n            );\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error(\n            `Error fetching live video stream status for mediaKey ${mediaKey}:`,\n            error,\n        );\n        throw error;\n    }\n}\n\n/**\n * Authenticates Periscope to obtain a token.\n * @param auth The authentication object.\n * @returns The Periscope authentication token.\n */\nexport async function fetchAuthenticatePeriscope(\n    auth: TwitterAuth,\n): Promise<string> {\n    const queryId = 'r7VUmxbfqNkx7uwjgONSNw';\n    const operationName = 'AuthenticatePeriscope';\n\n    const variables = {};\n    const features = {};\n\n    const variablesEncoded = encodeURIComponent(JSON.stringify(variables));\n    const featuresEncoded = encodeURIComponent(JSON.stringify(features));\n\n    const url = `https://x.com/i/api/graphql/${queryId}/${operationName}?variables=${variablesEncoded}&features=${featuresEncoded}`;\n\n    const onboardingTaskUrl = 'https://api.twitter.com/1.1/onboarding/task.json';\n\n    const cookies = await auth.cookieJar().getCookies(onboardingTaskUrl);\n    const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n\n    if (!xCsrfToken) {\n        throw new Error('CSRF Token (ct0) not found in cookies.');\n    }\n\n    const clientTransactionId = generateRandomId();\n\n    const headers = new Headers({\n        Accept: '*/*',\n        Authorization: `Bearer ${(auth as any).bearerToken}`,\n        'Content-Type': 'application/json',\n        Cookie: await auth.cookieJar().getCookieString(onboardingTaskUrl),\n        'User-Agent':\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',\n        'x-guest-token': (auth as any).guestToken,\n        'x-twitter-auth-type': 'OAuth2Session',\n        'x-twitter-active-user': 'yes',\n        'x-csrf-token': xCsrfToken.value,\n        'x-client-transaction-id': clientTransactionId,\n        'sec-ch-ua-platform': '\"Windows\"',\n        'sec-ch-ua':\n            '\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"',\n        'x-twitter-client-language': 'en',\n        'sec-ch-ua-mobile': '?0',\n        Referer: 'https://x.com/i/spaces/start',\n    });\n\n    try {\n        const response = await auth.fetch(url, {\n            method: 'GET',\n            headers: headers,\n        });\n\n        await updateCookieJar(auth.cookieJar(), response.headers);\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`Error ${response.status}: ${errorText}`);\n        }\n\n        const data: AuthenticatePeriscopeResponse = await response.json();\n\n        if (data.errors && data.errors.length > 0) {\n            throw new Error(`API Errors: ${JSON.stringify(data.errors)}`);\n        }\n\n        if (!data.data.authenticate_periscope) {\n            throw new Error('Periscope authentication failed, no data returned.');\n        }\n\n        return data.data.authenticate_periscope;\n    } catch (error) {\n        console.error('Error during Periscope authentication:', error);\n        throw error;\n    }\n}\n\n/**\n * Logs in to Twitter via Proxsee using the Periscope JWT to obtain a login cookie.\n * @param jwt The JWT obtained via AuthenticatePeriscope.\n * @param auth The authentication object.\n * @returns The response containing the cookie and user information.\n */\nexport async function fetchLoginTwitterToken(\n    jwt: unknown,\n    auth: TwitterAuth,\n): Promise<LoginTwitterTokenResponse> {\n    const url = 'https://proxsee.pscp.tv/api/v2/loginTwitterToken';\n\n    const idempotenceKey = generateRandomId();\n\n    const payload = {\n        jwt: jwt,\n        vendor_id: 'm5-proxsee-login-a2011357b73e',\n        create_user: true,\n    };\n\n    const headers = new Headers({\n        'Content-Type': 'application/json',\n        'User-Agent':\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',\n        Referer: 'https://x.com/',\n        'sec-ch-ua':\n            '\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"',\n        'sec-ch-ua-platform': '\"Windows\"',\n        'sec-ch-ua-mobile': '?0',\n        'X-Periscope-User-Agent': 'Twitter/m5',\n        'X-Idempotence': idempotenceKey,\n        'X-Attempt': '1',\n    });\n\n    try {\n        const response = await auth.fetch(url, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(payload),\n        });\n\n        // Update the cookie jar with any new cookies from the response\n        await updateCookieJar(auth.cookieJar(), response.headers);\n\n        // Check if the response is successful\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`Error ${response.status}: ${errorText}`);\n        }\n\n        const data: LoginTwitterTokenResponse = await response.json();\n\n        if (!data.cookie || !data.user) {\n            throw new Error('Twitter authentication failed, missing data.');\n        }\n\n        return data;\n    } catch (error) {\n        console.error('Error logging into Twitter via Proxsee:', error);\n        throw error;\n    }\n}","import { requestApi } from './api';\nimport { TwitterAuth } from './auth';\n\nexport interface GrokConversation {\n  data: {\n    create_grok_conversation: {\n      conversation_id: string;\n    };\n  };\n}\n\nexport interface GrokRequest {\n  responses: GrokResponseMessage[];\n  systemPromptName: string;\n  grokModelOptionId: string;\n  conversationId: string;\n  returnSearchResults: boolean;\n  returnCitations: boolean;\n  promptMetadata: {\n    promptSource: string;\n    action: string;\n  };\n  imageGenerationCount: number;\n  requestFeatures: {\n    eagerTweets: boolean;\n    serverHistory: boolean;\n  };\n}\n\n// Types for the user-facing API\nexport interface GrokMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\nexport interface GrokChatOptions {\n  messages: GrokMessage[];\n  conversationId?: string; // Optional - will create new if not provided\n  returnSearchResults?: boolean;\n  returnCitations?: boolean;\n}\n\n// Internal types for API requests\nexport interface GrokResponseMessage {\n  message: string;\n  sender: 1 | 2; // 1 = user, 2 = assistant\n  promptSource?: string;\n  fileAttachments?: any[];\n}\n\n// Rate limit information\nexport interface GrokRateLimit {\n  isRateLimited: boolean;\n  message: string;\n  upsellInfo?: {\n    usageLimit: string;\n    quotaDuration: string;\n    title: string;\n    message: string;\n  };\n}\n\nexport interface GrokChatResponse {\n  conversationId: string;\n  message: string;\n  messages: GrokMessage[];\n  webResults?: any[];\n  metadata?: any;\n  rateLimit?: GrokRateLimit;\n}\n\n/**\n * Creates a new conversation with Grok.\n * @returns The ID of the newly created conversation\n * @internal\n */\nexport async function createGrokConversation(\n  auth: TwitterAuth,\n): Promise<string> {\n  const res = await requestApi<GrokConversation>(\n    'https://x.com/i/api/graphql/6cmfJY3d7EPWuCSXWrkOFg/CreateGrokConversation',\n    auth,\n    'POST',\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return res.value.data.create_grok_conversation.conversation_id;\n}\n\n/**\n * Main method for interacting with Grok in a chat-like manner.\n */\nexport async function grokChat(\n  options: GrokChatOptions,\n  auth: TwitterAuth,\n): Promise<GrokChatResponse> {\n  let { conversationId, messages } = options;\n\n  // Create new conversation if none provided\n  if (!conversationId) {\n    conversationId = await createGrokConversation(auth);\n  }\n\n  // Convert OpenAI-style messages to Grok's internal format\n  const responses: GrokResponseMessage[] = messages.map((msg: GrokMessage) => ({\n    message: msg.content,\n    sender: msg.role === 'user' ? 1 : 2,\n    ...(msg.role === 'user' && {\n      promptSource: '',\n      fileAttachments: [],\n    }),\n  }));\n\n  const payload: GrokRequest = {\n    responses,\n    systemPromptName: '',\n    grokModelOptionId: 'grok-2a',\n    conversationId,\n    returnSearchResults: options.returnSearchResults ?? true,\n    returnCitations: options.returnCitations ?? true,\n    promptMetadata: {\n      promptSource: 'NATURAL',\n      action: 'INPUT',\n    },\n    imageGenerationCount: 4,\n    requestFeatures: {\n      eagerTweets: true,\n      serverHistory: true,\n    },\n  };\n\n  const res = await requestApi<{ text: string }>(\n    'https://api.x.com/2/grok/add_response.json',\n    auth,\n    'POST',\n    undefined,\n    payload,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  // Parse response chunks - Grok may return either a single response or multiple chunks\n  let chunks: any[];\n  if (res.value.text) {\n    // For streaming responses, split text into chunks and parse each JSON chunk\n    chunks = res.value.text\n      .split('\\n')\n      .filter(Boolean)\n      .map((chunk: any) => JSON.parse(chunk));\n  } else {\n    // For single responses (like rate limiting), wrap in array\n    chunks = [res.value];\n  }\n\n  // Check if we hit rate limits by examining first chunk\n  const firstChunk = chunks[0];\n  if (firstChunk.result?.responseType === 'limiter') {\n    return {\n      conversationId,\n      message: firstChunk.result.message,\n      messages: [\n        ...messages,\n        { role: 'assistant', content: firstChunk.result.message },\n      ],\n      rateLimit: {\n        isRateLimited: true,\n        message: firstChunk.result.message,\n        upsellInfo: firstChunk.result.upsell\n          ? {\n              usageLimit: firstChunk.result.upsell.usageLimit,\n              quotaDuration: `${firstChunk.result.upsell.quotaDurationCount} ${firstChunk.result.upsell.quotaDurationPeriod}`,\n              title: firstChunk.result.upsell.title,\n              message: firstChunk.result.upsell.message,\n            }\n          : undefined,\n      },\n    };\n  }\n\n  // Combine all message chunks into single response\n  const fullMessage = chunks\n    .filter((chunk: any) => chunk.result?.message)\n    .map((chunk: any) => chunk.result.message)\n    .join('');\n\n  // Return complete response with conversation history and metadata\n  return {\n    conversationId,\n    message: fullMessage,\n    messages: [...messages, { role: 'assistant', content: fullMessage }],\n    webResults: chunks.find((chunk: any) => chunk.result?.webResults)?.result\n      .webResults,\n    metadata: chunks[0],\n  };\n}\n","import { Cookie } from 'tough-cookie';\nimport {\n  bearerToken,\n  FetchTransformOptions,\n  requestApi,\n  RequestApiResult,\n} from './api';\nimport { TwitterAuth, TwitterAuthOptions, TwitterGuestAuth } from './auth';\nimport { TwitterUserAuth } from './auth-user';\nimport {\n  getProfile,\n  getUserIdByScreenName,\n  getScreenNameByUserId,\n  Profile,\n} from './profile';\nimport {\n  fetchQuotedTweetsPage,\n  fetchSearchProfiles,\n  fetchSearchTweets,\n  SearchMode,\n  searchProfiles,\n  searchQuotedTweets,\n  searchTweets,\n} from './search';\nimport {\n  fetchProfileFollowing,\n  fetchProfileFollowers,\n  getFollowing,\n  getFollowers,\n  followUser,\n} from './relationships';\nimport { QueryProfilesResponse, QueryTweetsResponse } from './timeline-v1';\nimport { getTrends } from './trends';\nimport {\n  Tweet,\n  getTweetAnonymous,\n  getTweets,\n  getLatestTweet,\n  getTweetWhere,\n  getTweetsWhere,\n  getTweetsByUserId,\n  TweetQuery,\n  getTweet,\n  fetchListTweets,\n  getTweetsAndRepliesByUserId,\n  getTweetsAndReplies,\n  createCreateTweetRequest,\n  PollData,\n  createCreateTweetRequestV2,\n  getTweetV2,\n  getTweetsV2,\n  defaultOptions,\n  createQuoteTweetRequest,\n  likeTweet,\n  retweet,\n  createCreateNoteTweetRequest,\n  createCreateLongTweetRequest,\n  getArticle,\n  getAllRetweeters,\n  Retweeter,\n} from './tweets';\nimport {\n  parseTimelineTweetsV2,\n  TimelineArticle,\n  TimelineV2,\n} from './timeline-v2';\nimport { fetchHomeTimeline } from './timeline-home';\nimport { fetchFollowingTimeline } from './timeline-following';\nimport {\n  TTweetv2Expansion,\n  TTweetv2MediaField,\n  TTweetv2PlaceField,\n  TTweetv2PollField,\n  TTweetv2TweetField,\n  TTweetv2UserField,\n} from 'twitter-api-v2';\nimport {\n  DirectMessagesResponse,\n  getDirectMessageConversations,\n  sendDirectMessage,\n  SendDirectMessageResponse,\n} from './messages';\nimport {\n  fetchAudioSpaceById,\n  fetchAuthenticatePeriscope,\n  fetchBrowseSpaceTopics,\n  fetchCommunitySelectQuery,\n  fetchLiveVideoStreamStatus,\n  fetchLoginTwitterToken,\n} from './spaces';\nimport {\n  AudioSpace,\n  Community,\n  LiveVideoStreamStatus,\n  LoginTwitterTokenResponse,\n  Subtopic,\n} from './types/spaces';\nimport {\n  createGrokConversation,\n  grokChat,\n  GrokChatOptions,\n  GrokChatResponse,\n} from './grok';\n\nconst twUrl = 'https://twitter.com';\nconst UserTweetsUrl =\n  'https://twitter.com/i/api/graphql/E3opETHurmVJflFsUBVuUQ/UserTweets';\n\nexport interface ScraperOptions {\n  /**\n   * An alternative fetch function to use instead of the default fetch function. This may be useful\n   * in nonstandard runtime environments, such as edge workers.\n   */\n  fetch: typeof fetch;\n\n  /**\n   * Additional options that control how requests and responses are processed. This can be used to\n   * proxy requests through other hosts, for example.\n   */\n  transform: Partial<FetchTransformOptions>;\n}\n\n/**\n * An interface to Twitter's undocumented API.\n * - Reusing Scraper objects is recommended to minimize the time spent authenticating unnecessarily.\n */\nexport class Scraper {\n  private auth!: TwitterAuth;\n  private authTrends!: TwitterAuth;\n  private token: string;\n\n  /**\n   * Creates a new Scraper object.\n   * - Scrapers maintain their own guest tokens for Twitter's internal API.\n   * - Reusing Scraper objects is recommended to minimize the time spent authenticating unnecessarily.\n   */\n  constructor(private readonly options?: Partial<ScraperOptions>) {\n    this.token = bearerToken;\n    this.useGuestAuth();\n  }\n\n  /**\n   * Initializes auth properties using a guest token.\n   * Used when creating a new instance of this class, and when logging out.\n   * @internal\n   */\n  private useGuestAuth() {\n    this.auth = new TwitterGuestAuth(this.token, this.getAuthOptions());\n    this.authTrends = new TwitterGuestAuth(this.token, this.getAuthOptions());\n  }\n\n  /**\n   * Fetches a Twitter profile.\n   * @param username The Twitter username of the profile to fetch, without an `@` at the beginning.\n   * @returns The requested {@link Profile}.\n   */\n  public async getProfile(username: string): Promise<Profile> {\n    const res = await getProfile(username, this.auth);\n    return this.handleResponse(res);\n  }\n\n  /**\n   * Fetches the user ID corresponding to the provided screen name.\n   * @param screenName The Twitter screen name of the profile to fetch.\n   * @returns The ID of the corresponding account.\n   */\n  public async getUserIdByScreenName(screenName: string): Promise<string> {\n    const res = await getUserIdByScreenName(screenName, this.auth);\n    return this.handleResponse(res);\n  }\n\n  /**\n   *\n   * @param userId The user ID of the profile to fetch.\n   * @returns The screen name of the corresponding account.\n   */\n  public async getScreenNameByUserId(userId: string): Promise<string> {\n    const response = await getScreenNameByUserId(userId, this.auth);\n    return this.handleResponse(response);\n  }\n\n  /**\n   * Fetches tweets from Twitter.\n   * @param query The search query. Any Twitter-compatible query format can be used.\n   * @param maxTweets The maximum number of tweets to return.\n   * @param includeReplies Whether or not replies should be included in the response.\n   * @param searchMode The category filter to apply to the search. Defaults to `Top`.\n   * @returns An {@link AsyncGenerator} of tweets matching the provided filters.\n   */\n  public searchTweets(\n    query: string,\n    maxTweets: number,\n    searchMode: SearchMode = SearchMode.Top,\n  ): AsyncGenerator<Tweet, void> {\n    return searchTweets(query, maxTweets, searchMode, this.auth);\n  }\n\n  /**\n   * Fetches profiles from Twitter.\n   * @param query The search query. Any Twitter-compatible query format can be used.\n   * @param maxProfiles The maximum number of profiles to return.\n   * @returns An {@link AsyncGenerator} of tweets matching the provided filter(s).\n   */\n  public searchProfiles(\n    query: string,\n    maxProfiles: number,\n  ): AsyncGenerator<Profile, void> {\n    return searchProfiles(query, maxProfiles, this.auth);\n  }\n\n  /**\n   * Fetches tweets from Twitter.\n   * @param query The search query. Any Twitter-compatible query format can be used.\n   * @param maxTweets The maximum number of tweets to return.\n   * @param includeReplies Whether or not replies should be included in the response.\n   * @param searchMode The category filter to apply to the search. Defaults to `Top`.\n   * @param cursor The search cursor, which can be passed into further requests for more results.\n   * @returns A page of results, containing a cursor that can be used in further requests.\n   */\n  public fetchSearchTweets(\n    query: string,\n    maxTweets: number,\n    searchMode: SearchMode,\n    cursor?: string,\n  ): Promise<QueryTweetsResponse> {\n    return fetchSearchTweets(query, maxTweets, searchMode, this.auth, cursor);\n  }\n\n  /**\n   * Fetches profiles from Twitter.\n   * @param query The search query. Any Twitter-compatible query format can be used.\n   * @param maxProfiles The maximum number of profiles to return.\n   * @param cursor The search cursor, which can be passed into further requests for more results.\n   * @returns A page of results, containing a cursor that can be used in further requests.\n   */\n  public fetchSearchProfiles(\n    query: string,\n    maxProfiles: number,\n    cursor?: string,\n  ): Promise<QueryProfilesResponse> {\n    return fetchSearchProfiles(query, maxProfiles, this.auth, cursor);\n  }\n\n  /**\n   * Fetches list tweets from Twitter.\n   * @param listId The list id\n   * @param maxTweets The maximum number of tweets to return.\n   * @param cursor The search cursor, which can be passed into further requests for more results.\n   * @returns A page of results, containing a cursor that can be used in further requests.\n   */\n  public fetchListTweets(\n    listId: string,\n    maxTweets: number,\n    cursor?: string,\n  ): Promise<QueryTweetsResponse> {\n    return fetchListTweets(listId, maxTweets, cursor, this.auth);\n  }\n\n  /**\n   * Fetch the profiles a user is following\n   * @param userId The user whose following should be returned\n   * @param maxProfiles The maximum number of profiles to return.\n   * @returns An {@link AsyncGenerator} of following profiles for the provided user.\n   */\n  public getFollowing(\n    userId: string,\n    maxProfiles: number,\n  ): AsyncGenerator<Profile, void> {\n    return getFollowing(userId, maxProfiles, this.auth);\n  }\n\n  /**\n   * Fetch the profiles that follow a user\n   * @param userId The user whose followers should be returned\n   * @param maxProfiles The maximum number of profiles to return.\n   * @returns An {@link AsyncGenerator} of profiles following the provided user.\n   */\n  public getFollowers(\n    userId: string,\n    maxProfiles: number,\n  ): AsyncGenerator<Profile, void> {\n    return getFollowers(userId, maxProfiles, this.auth);\n  }\n\n  /**\n   * Fetches following profiles from Twitter.\n   * @param userId The user whose following should be returned\n   * @param maxProfiles The maximum number of profiles to return.\n   * @param cursor The search cursor, which can be passed into further requests for more results.\n   * @returns A page of results, containing a cursor that can be used in further requests.\n   */\n  public fetchProfileFollowing(\n    userId: string,\n    maxProfiles: number,\n    cursor?: string,\n  ): Promise<QueryProfilesResponse> {\n    return fetchProfileFollowing(userId, maxProfiles, this.auth, cursor);\n  }\n\n  /**\n   * Fetches profile followers from Twitter.\n   * @param userId The user whose following should be returned\n   * @param maxProfiles The maximum number of profiles to return.\n   * @param cursor The search cursor, which can be passed into further requests for more results.\n   * @returns A page of results, containing a cursor that can be used in further requests.\n   */\n  public fetchProfileFollowers(\n    userId: string,\n    maxProfiles: number,\n    cursor?: string,\n  ): Promise<QueryProfilesResponse> {\n    return fetchProfileFollowers(userId, maxProfiles, this.auth, cursor);\n  }\n\n  /**\n   * Fetches the home timeline for the current user. (for you feed)\n   * @param count The number of tweets to fetch.\n   * @param seenTweetIds An array of tweet IDs that have already been seen.\n   * @returns A promise that resolves to the home timeline response.\n   */\n  public async fetchHomeTimeline(\n    count: number,\n    seenTweetIds: string[],\n  ): Promise<any[]> {\n    return await fetchHomeTimeline(count, seenTweetIds, this.auth);\n  }\n\n  /**\n   * Fetches the home timeline for the current user. (following feed)\n   * @param count The number of tweets to fetch.\n   * @param seenTweetIds An array of tweet IDs that have already been seen.\n   * @returns A promise that resolves to the home timeline response.\n   */\n  public async fetchFollowingTimeline(\n    count: number,\n    seenTweetIds: string[],\n  ): Promise<any[]> {\n    return await fetchFollowingTimeline(count, seenTweetIds, this.auth);\n  }\n\n  async getUserTweets(\n    userId: string,\n    maxTweets = 200,\n    cursor?: string,\n  ): Promise<{ tweets: Tweet[]; next?: string }> {\n    if (maxTweets > 200) {\n      maxTweets = 200;\n    }\n\n    const variables: Record<string, any> = {\n      userId,\n      count: maxTweets,\n      includePromotedContent: true,\n      withQuickPromoteEligibilityTweetFields: true,\n      withVoice: true,\n      withV2Timeline: true,\n    };\n\n    if (cursor) {\n      variables['cursor'] = cursor;\n    }\n\n    const features = {\n      rweb_tipjar_consumption_enabled: true,\n      responsive_web_graphql_exclude_directive_enabled: true,\n      verified_phone_label_enabled: false,\n      creator_subscriptions_tweet_preview_api_enabled: true,\n      responsive_web_graphql_timeline_navigation_enabled: true,\n      responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\n      communities_web_enable_tweet_community_results_fetch: true,\n      c9s_tweet_anatomy_moderator_badge_enabled: true,\n      articles_preview_enabled: true,\n      responsive_web_edit_tweet_api_enabled: true,\n      graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n      view_counts_everywhere_api_enabled: true,\n      longform_notetweets_consumption_enabled: true,\n      responsive_web_twitter_article_tweet_consumption_enabled: true,\n      tweet_awards_web_tipping_enabled: false,\n      creator_subscriptions_quote_tweet_preview_enabled: false,\n      freedom_of_speech_not_reach_fetch_enabled: true,\n      standardized_nudges_misinfo: true,\n      tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n        true,\n      rweb_video_timestamps_enabled: true,\n      longform_notetweets_rich_text_read_enabled: true,\n      longform_notetweets_inline_media_enabled: true,\n      responsive_web_enhance_cards_enabled: false,\n    };\n\n    const fieldToggles = {\n      withArticlePlainText: false,\n    };\n\n    const res = await requestApi<TimelineV2>(\n      `${UserTweetsUrl}?variables=${encodeURIComponent(\n        JSON.stringify(variables),\n      )}&features=${encodeURIComponent(\n        JSON.stringify(features),\n      )}&fieldToggles=${encodeURIComponent(JSON.stringify(fieldToggles))}`,\n      this.auth,\n    );\n\n    if (!res.success) {\n      throw res.err;\n    }\n\n    const timelineV2 = parseTimelineTweetsV2(res.value);\n    return {\n      tweets: timelineV2.tweets,\n      next: timelineV2.next,\n    };\n  }\n\n  async *getUserTweetsIterator(\n    userId: string,\n    maxTweets = 200,\n  ): AsyncGenerator<Tweet, void> {\n    let cursor: string | undefined;\n    let retrievedTweets = 0;\n\n    while (retrievedTweets < maxTweets) {\n      const response = await this.getUserTweets(\n        userId,\n        maxTweets - retrievedTweets,\n        cursor,\n      );\n\n      for (const tweet of response.tweets) {\n        yield tweet;\n        retrievedTweets++;\n        if (retrievedTweets >= maxTweets) {\n          break;\n        }\n      }\n\n      cursor = response.next;\n\n      if (!cursor) {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Fetches the current trends from Twitter.\n   * @returns The current list of trends.\n   */\n  public getTrends(): Promise<string[]> {\n    return getTrends(this.authTrends);\n  }\n\n  /**\n   * Fetches tweets from a Twitter user.\n   * @param user The user whose tweets should be returned.\n   * @param maxTweets The maximum number of tweets to return. Defaults to `200`.\n   * @returns An {@link AsyncGenerator} of tweets from the provided user.\n   */\n  public getTweets(user: string, maxTweets = 200): AsyncGenerator<Tweet> {\n    return getTweets(user, maxTweets, this.auth);\n  }\n\n  /**\n   * Fetches tweets from a Twitter user using their ID.\n   * @param userId The user whose tweets should be returned.\n   * @param maxTweets The maximum number of tweets to return. Defaults to `200`.\n   * @returns An {@link AsyncGenerator} of tweets from the provided user.\n   */\n  public getTweetsByUserId(\n    userId: string,\n    maxTweets = 200,\n  ): AsyncGenerator<Tweet, void> {\n    return getTweetsByUserId(userId, maxTweets, this.auth);\n  }\n\n  /**\n   * Send a tweet\n   * @param text The text of the tweet\n   * @param tweetId The id of the tweet to reply to\n   * @param mediaData Optional media data\n   * @returns\n   */\n\n  async sendTweet(\n    text: string,\n    replyToTweetId?: string,\n    mediaData?: { data: Buffer; mediaType: string }[],\n    hideLinkPreview?: boolean,\n  ) {\n    return await createCreateTweetRequest(\n      text,\n      this.auth,\n      replyToTweetId,\n      mediaData,\n      hideLinkPreview,\n    );\n  }\n\n  async sendNoteTweet(\n    text: string,\n    replyToTweetId?: string,\n    mediaData?: { data: Buffer; mediaType: string }[],\n  ) {\n    return await createCreateNoteTweetRequest(\n      text,\n      this.auth,\n      replyToTweetId,\n      mediaData,\n    );\n  }\n\n  /**\n   * Send a long tweet (Note Tweet)\n   * @param text The text of the tweet\n   * @param tweetId The id of the tweet to reply to\n   * @param mediaData Optional media data\n   * @returns\n   */\n  async sendLongTweet(\n    text: string,\n    replyToTweetId?: string,\n    mediaData?: { data: Buffer; mediaType: string }[],\n  ) {\n    return await createCreateLongTweetRequest(\n      text,\n      this.auth,\n      replyToTweetId,\n      mediaData,\n    );\n  }\n\n  /**\n   * Send a tweet\n   * @param text The text of the tweet\n   * @param tweetId The id of the tweet to reply to\n   * @param options The options for the tweet\n   * @returns\n   */\n\n  async sendTweetV2(\n    text: string,\n    replyToTweetId?: string,\n    options?: {\n      poll?: PollData;\n      quoted_tweet_id?: string;\n    },\n  ) {\n    return await createCreateTweetRequestV2(\n      text,\n      this.auth,\n      replyToTweetId,\n      options,\n    );\n  }\n\n  /**\n   * Fetches tweets and replies from a Twitter user.\n   * @param user The user whose tweets should be returned.\n   * @param maxTweets The maximum number of tweets to return. Defaults to `200`.\n   * @returns An {@link AsyncGenerator} of tweets from the provided user.\n   */\n  public getTweetsAndReplies(\n    user: string,\n    maxTweets = 200,\n  ): AsyncGenerator<Tweet> {\n    return getTweetsAndReplies(user, maxTweets, this.auth);\n  }\n\n  /**\n   * Fetches tweets and replies from a Twitter user using their ID.\n   * @param userId The user whose tweets should be returned.\n   * @param maxTweets The maximum number of tweets to return. Defaults to `200`.\n   * @returns An {@link AsyncGenerator} of tweets from the provided user.\n   */\n  public getTweetsAndRepliesByUserId(\n    userId: string,\n    maxTweets = 200,\n  ): AsyncGenerator<Tweet, void> {\n    return getTweetsAndRepliesByUserId(userId, maxTweets, this.auth);\n  }\n\n  /**\n   * Fetches the first tweet matching the given query.\n   *\n   * Example:\n   * ```js\n   * const timeline = scraper.getTweets('user', 200);\n   * const retweet = await scraper.getTweetWhere(timeline, { isRetweet: true });\n   * ```\n   * @param tweets The {@link AsyncIterable} of tweets to search through.\n   * @param query A query to test **all** tweets against. This may be either an\n   * object of key/value pairs or a predicate. If this query is an object, all\n   * key/value pairs must match a {@link Tweet} for it to be returned. If this query\n   * is a predicate, it must resolve to `true` for a {@link Tweet} to be returned.\n   * - All keys are optional.\n   * - If specified, the key must be implemented by that of {@link Tweet}.\n   */\n  public getTweetWhere(\n    tweets: AsyncIterable<Tweet>,\n    query: TweetQuery,\n  ): Promise<Tweet | null> {\n    return getTweetWhere(tweets, query);\n  }\n\n  /**\n   * Fetches all tweets matching the given query.\n   *\n   * Example:\n   * ```js\n   * const timeline = scraper.getTweets('user', 200);\n   * const retweets = await scraper.getTweetsWhere(timeline, { isRetweet: true });\n   * ```\n   * @param tweets The {@link AsyncIterable} of tweets to search through.\n   * @param query A query to test **all** tweets against. This may be either an\n   * object of key/value pairs or a predicate. If this query is an object, all\n   * key/value pairs must match a {@link Tweet} for it to be returned. If this query\n   * is a predicate, it must resolve to `true` for a {@link Tweet} to be returned.\n   * - All keys are optional.\n   * - If specified, the key must be implemented by that of {@link Tweet}.\n   */\n  public getTweetsWhere(\n    tweets: AsyncIterable<Tweet>,\n    query: TweetQuery,\n  ): Promise<Tweet[]> {\n    return getTweetsWhere(tweets, query);\n  }\n\n  /**\n   * Fetches the most recent tweet from a Twitter user.\n   * @param user The user whose latest tweet should be returned.\n   * @param includeRetweets Whether or not to include retweets. Defaults to `false`.\n   * @returns The {@link Tweet} object or `null`/`undefined` if it couldn't be fetched.\n   */\n  public getLatestTweet(\n    user: string,\n    includeRetweets = false,\n    max = 200,\n  ): Promise<Tweet | null | void> {\n    return getLatestTweet(user, includeRetweets, max, this.auth);\n  }\n\n  /**\n   * Fetches a single tweet.\n   * @param id The ID of the tweet to fetch.\n   * @returns The {@link Tweet} object, or `null` if it couldn't be fetched.\n   */\n  public getTweet(id: string): Promise<Tweet | null> {\n    if (this.auth instanceof TwitterUserAuth) {\n      return getTweet(id, this.auth);\n    } else {\n      return getTweetAnonymous(id, this.auth);\n    }\n  }\n\n  /**\n   * Fetches a single tweet by ID using the Twitter API v2.\n   * Allows specifying optional expansions and fields for more detailed data.\n   *\n   * @param {string} id - The ID of the tweet to fetch.\n   * @param {Object} [options] - Optional parameters to customize the tweet data.\n   * @param {string[]} [options.expansions] - Array of expansions to include, e.g., 'attachments.poll_ids'.\n   * @param {string[]} [options.tweetFields] - Array of tweet fields to include, e.g., 'created_at', 'public_metrics'.\n   * @param {string[]} [options.pollFields] - Array of poll fields to include, if the tweet has a poll, e.g., 'options', 'end_datetime'.\n   * @param {string[]} [options.mediaFields] - Array of media fields to include, if the tweet includes media, e.g., 'url', 'preview_image_url'.\n   * @param {string[]} [options.userFields] - Array of user fields to include, if user information is requested, e.g., 'username', 'verified'.\n   * @param {string[]} [options.placeFields] - Array of place fields to include, if the tweet includes location data, e.g., 'full_name', 'country'.\n   * @returns {Promise<TweetV2 | null>} - The tweet data, including requested expansions and fields.\n   */\n  async getTweetV2(\n    id: string,\n    options: {\n      expansions?: TTweetv2Expansion[];\n      tweetFields?: TTweetv2TweetField[];\n      pollFields?: TTweetv2PollField[];\n      mediaFields?: TTweetv2MediaField[];\n      userFields?: TTweetv2UserField[];\n      placeFields?: TTweetv2PlaceField[];\n    } = defaultOptions,\n  ): Promise<Tweet | null> {\n    return await getTweetV2(id, this.auth, options);\n  }\n\n  /**\n   * Fetches multiple tweets by IDs using the Twitter API v2.\n   * Allows specifying optional expansions and fields for more detailed data.\n   *\n   * @param {string[]} ids - Array of tweet IDs to fetch.\n   * @param {Object} [options] - Optional parameters to customize the tweet data.\n   * @param {string[]} [options.expansions] - Array of expansions to include, e.g., 'attachments.poll_ids'.\n   * @param {string[]} [options.tweetFields] - Array of tweet fields to include, e.g., 'created_at', 'public_metrics'.\n   * @param {string[]} [options.pollFields] - Array of poll fields to include, if tweets contain polls, e.g., 'options', 'end_datetime'.\n   * @param {string[]} [options.mediaFields] - Array of media fields to include, if tweets contain media, e.g., 'url', 'preview_image_url'.\n   * @param {string[]} [options.userFields] - Array of user fields to include, if user information is requested, e.g., 'username', 'verified'.\n   * @param {string[]} [options.placeFields] - Array of place fields to include, if tweets contain location data, e.g., 'full_name', 'country'.\n   * @returns {Promise<TweetV2[]> } - Array of tweet data, including requested expansions and fields.\n   */\n  async getTweetsV2(\n    ids: string[],\n    options: {\n      expansions?: TTweetv2Expansion[];\n      tweetFields?: TTweetv2TweetField[];\n      pollFields?: TTweetv2PollField[];\n      mediaFields?: TTweetv2MediaField[];\n      userFields?: TTweetv2UserField[];\n      placeFields?: TTweetv2PlaceField[];\n    } = defaultOptions,\n  ): Promise<Tweet[]> {\n    return await getTweetsV2(ids, this.auth, options);\n  }\n\n  /**\n   * Returns if the scraper has a guest token. The token may not be valid.\n   * @returns `true` if the scraper has a guest token; otherwise `false`.\n   */\n  public hasGuestToken(): boolean {\n    return this.auth.hasToken() || this.authTrends.hasToken();\n  }\n\n  /**\n   * Returns if the scraper is logged in as a real user.\n   * @returns `true` if the scraper is logged in with a real user account; otherwise `false`.\n   */\n  public async isLoggedIn(): Promise<boolean> {\n    return (\n      (await this.auth.isLoggedIn()) && (await this.authTrends.isLoggedIn())\n    );\n  }\n\n  /**\n   * Returns the currently logged in user\n   * @returns The currently logged in user\n   */\n  public async me(): Promise<Profile | undefined> {\n    return this.auth.me();\n  }\n\n  /**\n   * Login to Twitter as a real Twitter account. This enables running\n   * searches.\n   * @param username The username of the Twitter account to login with.\n   * @param password The password of the Twitter account to login with.\n   * @param email The email to log in with, if you have email confirmation enabled.\n   * @param twoFactorSecret The secret to generate two factor authentication tokens with, if you have two factor authentication enabled.\n   */\n  public async login(\n    username: string,\n    password: string,\n    email?: string,\n    twoFactorSecret?: string,\n    appKey?: string,\n    appSecret?: string,\n    accessToken?: string,\n    accessSecret?: string,\n  ): Promise<void> {\n    // Swap in a real authorizer for all requests\n    const userAuth = new TwitterUserAuth(this.token, this.getAuthOptions());\n    await userAuth.login(\n      username,\n      password,\n      email,\n      twoFactorSecret,\n      appKey,\n      appSecret,\n      accessToken,\n      accessSecret,\n    );\n    this.auth = userAuth;\n    this.authTrends = userAuth;\n  }\n\n  /**\n   * Log out of Twitter.\n   */\n  public async logout(): Promise<void> {\n    await this.auth.logout();\n    await this.authTrends.logout();\n\n    // Swap in guest authorizers for all requests\n    this.useGuestAuth();\n  }\n\n  /**\n   * Retrieves all cookies for the current session.\n   * @returns All cookies for the current session.\n   */\n  public async getCookies(): Promise<Cookie[]> {\n    return await this.authTrends\n      .cookieJar()\n      .getCookies(\n        typeof document !== 'undefined' ? document.location.toString() : twUrl,\n      );\n  }\n\n  /**\n   * Set cookies for the current session.\n   * @param cookies The cookies to set for the current session.\n   */\n  public async setCookies(cookies: (string | Cookie)[]): Promise<void> {\n    const userAuth = new TwitterUserAuth(this.token, this.getAuthOptions());\n    for (const cookie of cookies) {\n      await userAuth.cookieJar().setCookie(cookie, twUrl);\n    }\n\n    this.auth = userAuth;\n    this.authTrends = userAuth;\n  }\n\n  /**\n   * Clear all cookies for the current session.\n   */\n  public async clearCookies(): Promise<void> {\n    await this.auth.cookieJar().removeAllCookies();\n    await this.authTrends.cookieJar().removeAllCookies();\n  }\n\n  /**\n   * Sets the optional cookie to be used in requests.\n   * @param _cookie The cookie to be used in requests.\n   * @deprecated This function no longer represents any part of Twitter's auth flow.\n   * @returns This scraper instance.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public withCookie(_cookie: string): Scraper {\n    console.warn(\n      'Warning: Scraper#withCookie is deprecated and will be removed in a later version. Use Scraper#login or Scraper#setCookies instead.',\n    );\n    return this;\n  }\n\n  /**\n   * Sets the optional CSRF token to be used in requests.\n   * @param _token The CSRF token to be used in requests.\n   * @deprecated This function no longer represents any part of Twitter's auth flow.\n   * @returns This scraper instance.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public withXCsrfToken(_token: string): Scraper {\n    console.warn(\n      'Warning: Scraper#withXCsrfToken is deprecated and will be removed in a later version.',\n    );\n    return this;\n  }\n\n  /**\n   * Sends a quote tweet.\n   * @param text The text of the tweet.\n   * @param quotedTweetId The ID of the tweet to quote.\n   * @param options Optional parameters, such as media data.\n   * @returns The response from the Twitter API.\n   */\n  public async sendQuoteTweet(\n    text: string,\n    quotedTweetId: string,\n    options?: {\n      mediaData: { data: Buffer; mediaType: string }[];\n    },\n  ) {\n    return await createQuoteTweetRequest(\n      text,\n      quotedTweetId,\n      this.auth,\n      options?.mediaData,\n    );\n  }\n\n  /**\n   * Likes a tweet with the given tweet ID.\n   * @param tweetId The ID of the tweet to like.\n   * @returns A promise that resolves when the tweet is liked.\n   */\n  public async likeTweet(tweetId: string): Promise<void> {\n    // Call the likeTweet function from tweets.ts\n    await likeTweet(tweetId, this.auth);\n  }\n\n  /**\n   * Retweets a tweet with the given tweet ID.\n   * @param tweetId The ID of the tweet to retweet.\n   * @returns A promise that resolves when the tweet is retweeted.\n   */\n  public async retweet(tweetId: string): Promise<void> {\n    // Call the retweet function from tweets.ts\n    await retweet(tweetId, this.auth);\n  }\n\n  /**\n   * Follows a user with the given user ID.\n   * @param userId The user ID of the user to follow.\n   * @returns A promise that resolves when the user is followed.\n   */\n  public async followUser(userName: string): Promise<void> {\n    // Call the followUser function from relationships.ts\n    await followUser(userName, this.auth);\n  }\n\n  /**\n   * Fetches direct message conversations\n   * @param count Number of conversations to fetch (default: 50)\n   * @param cursor Pagination cursor for fetching more conversations\n   * @returns Array of DM conversations and other details\n   */\n  public async getDirectMessageConversations(\n    userId: string,\n    cursor?: string,\n  ): Promise<DirectMessagesResponse> {\n    return await getDirectMessageConversations(userId, this.auth, cursor);\n  }\n\n  /**\n   * Sends a direct message to a user.\n   * @param conversationId The ID of the conversation to send the message to.\n   * @param text The text of the message to send.\n   * @returns The response from the Twitter API.\n   */\n  public async sendDirectMessage(\n    conversationId: string,\n    text: string,\n  ): Promise<SendDirectMessageResponse> {\n    return await sendDirectMessage(this.auth, conversationId, text);\n  }\n\n  private getAuthOptions(): Partial<TwitterAuthOptions> {\n    return {\n      fetch: this.options?.fetch,\n      transform: this.options?.transform,\n    };\n  }\n\n  private handleResponse<T>(res: RequestApiResult<T>): T {\n    if (!res.success) {\n      throw res.err;\n    }\n\n    return res.value;\n  }\n\n  /**\n   * Retrieves the details of an Audio Space by its ID.\n   * @param id The ID of the Audio Space.\n   * @returns The details of the Audio Space.\n   */\n  public async getAudioSpaceById(id: string): Promise<AudioSpace> {\n    const variables = {\n      id,\n      isMetatagsQuery: false,\n      withReplays: true,\n      withListeners: true,\n    };\n\n    return await fetchAudioSpaceById(variables, this.auth);\n  }\n\n  /**\n   * Retrieves available space topics.\n   * @returns An array of space topics.\n   */\n  public async browseSpaceTopics(): Promise<Subtopic[]> {\n    return await fetchBrowseSpaceTopics(this.auth);\n  }\n\n  /**\n   * Retrieves available communities.\n   * @returns An array of communities.\n   */\n  public async communitySelectQuery(): Promise<Community[]> {\n    return await fetchCommunitySelectQuery(this.auth);\n  }\n\n  /**\n   * Retrieves the status of an Audio Space stream by its media key.\n   * @param mediaKey The media key of the Audio Space.\n   * @returns The status of the Audio Space stream.\n   */\n  public async getAudioSpaceStreamStatus(\n    mediaKey: string,\n  ): Promise<LiveVideoStreamStatus> {\n    return await fetchLiveVideoStreamStatus(mediaKey, this.auth);\n  }\n\n  /**\n   * Retrieves the status of an Audio Space by its ID.\n   * This method internally fetches the Audio Space to obtain the media key,\n   * then retrieves the stream status using the media key.\n   * @param audioSpaceId The ID of the Audio Space.\n   * @returns The status of the Audio Space stream.\n   */\n  public async getAudioSpaceStatus(\n    audioSpaceId: string,\n  ): Promise<LiveVideoStreamStatus> {\n    const audioSpace = await this.getAudioSpaceById(audioSpaceId);\n\n    const mediaKey = audioSpace.metadata.media_key;\n    if (!mediaKey) {\n      throw new Error('Media Key not found in Audio Space metadata.');\n    }\n\n    return await this.getAudioSpaceStreamStatus(mediaKey);\n  }\n\n  /**\n   * Authenticates Periscope to obtain a token.\n   * @returns The Periscope authentication token.\n   */\n  public async authenticatePeriscope(): Promise<string> {\n    return await fetchAuthenticatePeriscope(this.auth);\n  }\n\n  /**\n   * Logs in to Twitter via Proxsee using the Periscope JWT.\n   * @param jwt The JWT obtained from AuthenticatePeriscope.\n   * @returns The response containing the cookie and user information.\n   */\n  public async loginTwitterToken(\n    jwt: string,\n  ): Promise<LoginTwitterTokenResponse> {\n    return await fetchLoginTwitterToken(jwt, this.auth);\n  }\n\n  /**\n   * Orchestrates the flow: get token -> login -> return Periscope cookie\n   */\n  public async getPeriscopeCookie(): Promise<string> {\n    const periscopeToken = await this.authenticatePeriscope();\n\n    const loginResponse = await this.loginTwitterToken(periscopeToken);\n\n    return loginResponse.cookie;\n  }\n\n  /**\n   * Fetches a article (long form tweet) by its ID.\n   * @param id The ID of the article to fetch. In the format of (http://x.com/i/article/id)\n   * @returns The {@link TimelineArticle} object, or `null` if it couldn't be fetched.\n   */\n  public getArticle(id: string): Promise<TimelineArticle | null> {\n    return getArticle(id, this.auth);\n  }\n\n  /**\n   * Creates a new conversation with Grok.\n   * @returns A promise that resolves to the conversation ID string.\n   */\n  public async createGrokConversation(): Promise<string> {\n    return await createGrokConversation(this.auth);\n  }\n\n  /**\n   * Interact with Grok in a chat-like manner.\n   * @param options The options for the Grok chat interaction.\n   * @param {GrokMessage[]} options.messages - Array of messages in the conversation.\n   * @param {string} [options.conversationId] - Optional ID of an existing conversation.\n   * @param {boolean} [options.returnSearchResults] - Whether to return search results.\n   * @param {boolean} [options.returnCitations] - Whether to return citations.\n   * @returns A promise that resolves to the Grok chat response.\n   */\n  public async grokChat(options: GrokChatOptions): Promise<GrokChatResponse> {\n    return await grokChat(options, this.auth);\n  }\n\n  /**\n   * Retrieves all users who retweeted the given tweet.\n   * @param tweetId The ID of the tweet.\n   * @returns An array of users (retweeters).\n   */\n  public async getRetweetersOfTweet(tweetId: string): Promise<Retweeter[]> {\n    return await getAllRetweeters(tweetId, this.auth);\n  }\n\n  /**\n   * Fetches all tweets quoting a given tweet ID by chaining requests\n   * until no more pages are available.\n   * @param quotedTweetId The tweet ID to find quotes of.\n   * @param maxTweetsPerPage Max tweets per page (default 20).\n   * @returns An array of all Tweet objects referencing the given tweet.\n   */\n  public async getAllQuotedTweets(\n    quotedTweetId: string,\n    maxTweetsPerPage = 20,\n  ): Promise<Tweet[]> {\n    const allQuotes: Tweet[] = [];\n    let cursor: string | undefined;\n    let prevCursor: string | undefined;\n\n    while (true) {\n      const page = await fetchQuotedTweetsPage(\n        quotedTweetId,\n        maxTweetsPerPage,\n        this.auth,\n        cursor,\n      );\n\n      // If there's no new tweets, stop\n      if (!page.tweets || page.tweets.length === 0) {\n        break;\n      }\n\n      allQuotes.push(...page.tweets);\n\n      // If next is missing or same => stop\n      if (!page.next || page.next === cursor || page.next === prevCursor) {\n        break;\n      }\n\n      // Move cursors\n      prevCursor = cursor;\n      cursor = page.next;\n    }\n\n    return allQuotes;\n  }\n}\n","// src/core/ChatClient.ts\n\nimport WebSocket from 'ws';\nimport { EventEmitter } from 'events';\nimport type { SpeakerRequest, OccupancyUpdate } from '../types';\nimport { Logger } from '../logger';\n\n/**\n * Configuration object for ChatClient.\n */\ninterface ChatClientConfig {\n  /**\n   * The space ID (e.g., \"1vOGwAbcdE...\") for this audio space.\n   */\n  spaceId: string;\n\n  /**\n   * The access token obtained from accessChat or the live_video_stream/status.\n   */\n  accessToken: string;\n\n  /**\n   * The endpoint host for the chat server (e.g., \"https://prod-chatman-ancillary-eu-central-1.pscp.tv\").\n   */\n  endpoint: string;\n\n  /**\n   * An instance of Logger for debug/info logs.\n   */\n  logger: Logger;\n}\n\n/**\n * ChatClient handles the WebSocket connection to the Twitter/Periscope chat API.\n * It emits events such as \"speakerRequest\", \"occupancyUpdate\", \"muteStateChanged\", etc.\n */\nexport class ChatClient extends EventEmitter {\n  private ws?: WebSocket;\n  private connected = false;\n\n  private readonly logger: Logger;\n  private readonly spaceId: string;\n  private readonly accessToken: string;\n  private endpoint: string;\n\n  constructor(config: ChatClientConfig) {\n    super();\n    this.spaceId = config.spaceId;\n    this.accessToken = config.accessToken;\n    this.endpoint = config.endpoint;\n    this.logger = config.logger;\n  }\n\n  /**\n   * Establishes a WebSocket connection to the chat endpoint and sets up event handlers.\n   */\n  public async connect(): Promise<void> {\n    const wsUrl = `${this.endpoint}/chatapi/v1/chatnow`.replace(\n      'https://',\n      'wss://',\n    );\n    this.logger.info('[ChatClient] Connecting =>', wsUrl);\n\n    this.ws = new WebSocket(wsUrl, {\n      headers: {\n        Origin: 'https://x.com',\n        'User-Agent': 'Mozilla/5.0',\n      },\n    });\n\n    await this.setupHandlers();\n  }\n\n  /**\n   * Internal method to set up WebSocket event listeners (open, message, close, error).\n   */\n  private setupHandlers(): Promise<void> {\n    if (!this.ws) {\n      throw new Error('[ChatClient] No WebSocket instance available');\n    }\n\n    return new Promise((resolve, reject) => {\n      this.ws!.on('open', () => {\n        this.logger.info('[ChatClient] Connected');\n        this.connected = true;\n        this.sendAuthAndJoin();\n        resolve();\n      });\n\n      this.ws!.on('message', (data: { toString: () => string }) => {\n        this.handleMessage(data.toString());\n      });\n\n      this.ws!.on('close', () => {\n        this.logger.info('[ChatClient] Closed');\n        this.connected = false;\n        this.emit('disconnected');\n      });\n\n      this.ws!.on('error', (err) => {\n        this.logger.error('[ChatClient] Error =>', err);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Sends two WebSocket messages to authenticate and join the specified space.\n   */\n  private sendAuthAndJoin(): void {\n    if (!this.ws) return;\n\n    // 1) Send authentication (access token)\n    this.ws.send(\n      JSON.stringify({\n        payload: JSON.stringify({ access_token: this.accessToken }),\n        kind: 3,\n      }),\n    );\n\n    // 2) Send a \"join\" message specifying the room (space ID)\n    this.ws.send(\n      JSON.stringify({\n        payload: JSON.stringify({\n          body: JSON.stringify({ room: this.spaceId }),\n          kind: 1,\n        }),\n        kind: 2,\n      }),\n    );\n  }\n\n  /**\n   * Sends an emoji reaction to the chat server.\n   * @param emoji - The emoji string, e.g. '🔥', '🙏', etc.\n   */\n  public reactWithEmoji(emoji: string): void {\n    if (!this.ws || !this.connected) {\n      this.logger.warn(\n        '[ChatClient] Not connected or WebSocket missing; ignoring reactWithEmoji.',\n      );\n      return;\n    }\n\n    const payload = JSON.stringify({\n      body: JSON.stringify({ body: emoji, type: 2, v: 2 }),\n      kind: 1,\n      /*\n      // The 'sender' field is not required, it's not even verified by the server\n      // Instead of passing attributes down here it's easier to ignore it\n      sender: {\n        user_id: null,\n        twitter_id: null,\n        username: null,\n        display_name: null,\n      },\n      */\n      payload: JSON.stringify({\n        room: this.spaceId,\n        body: JSON.stringify({ body: emoji, type: 2, v: 2 }),\n      }),\n      type: 2,\n    });\n\n    this.ws.send(payload);\n  }\n\n  /**\n   * Handles inbound WebSocket messages, parsing JSON payloads\n   * and emitting relevant events (speakerRequest, occupancyUpdate, etc.).\n   */\n  private handleMessage(raw: string): void {\n    let msg: any;\n    try {\n      msg = JSON.parse(raw);\n    } catch {\n      return; // Invalid JSON, ignoring\n    }\n    if (!msg.payload) return;\n\n    const payload = safeJson(msg.payload);\n    if (!payload?.body) return;\n\n    const body = safeJson(payload.body);\n\n    // 1) Speaker request => \"guestBroadcastingEvent=1\"\n    if (body.guestBroadcastingEvent === 1) {\n      const req: SpeakerRequest = {\n        userId: body.guestRemoteID,\n        username: body.guestUsername,\n        displayName: payload.sender?.display_name || body.guestUsername,\n        sessionUUID: body.sessionUUID,\n      };\n      this.emit('speakerRequest', req);\n    }\n\n    // 2) Occupancy update => body.occupancy\n    if (typeof body.occupancy === 'number') {\n      const update: OccupancyUpdate = {\n        occupancy: body.occupancy,\n        totalParticipants: body.total_participants || 0,\n      };\n      this.emit('occupancyUpdate', update);\n    }\n\n    // 3) Mute/unmute => \"guestBroadcastingEvent=16\" (mute) or \"17\" (unmute)\n    if (body.guestBroadcastingEvent === 16) {\n      this.emit('muteStateChanged', {\n        userId: body.guestRemoteID,\n        muted: true,\n      });\n    }\n    if (body.guestBroadcastingEvent === 17) {\n      this.emit('muteStateChanged', {\n        userId: body.guestRemoteID,\n        muted: false,\n      });\n    }\n\n    // 4) \"guestBroadcastingEvent=12\" => host accepted a speaker\n    if (body.guestBroadcastingEvent === 12) {\n      this.emit('newSpeakerAccepted', {\n        userId: body.guestRemoteID,\n        username: body.guestUsername,\n        sessionUUID: body.sessionUUID,\n      });\n    }\n\n    // 5) Reaction => body.type=2\n    if (body?.type === 2) {\n      this.logger.debug('[ChatClient] Emitting guestReaction =>', body);\n      this.emit('guestReaction', {\n        displayName: body.displayName,\n        emoji: body.body,\n      });\n    }\n  }\n\n  /**\n   * Closes the WebSocket connection if open, and resets internal state.\n   */\n  public async disconnect(): Promise<void> {\n    if (this.ws) {\n      this.logger.info('[ChatClient] Disconnecting...');\n      this.ws.close();\n      this.ws = undefined;\n      this.connected = false;\n    }\n  }\n}\n\n/**\n * Helper function to safely parse JSON without throwing.\n */\nfunction safeJson(text: string): any {\n  try {\n    return JSON.parse(text);\n  } catch {\n    return null;\n  }\n}\n","// src/core/JanusAudio.ts\n\nimport { EventEmitter } from 'events';\nimport wrtc from '@roamhq/wrtc';\nconst { nonstandard } = wrtc;\nconst { RTCAudioSource, RTCAudioSink } = nonstandard;\nimport { Logger } from '../logger';\n\n/**\n * Configuration options for the JanusAudioSource.\n */\ninterface AudioSourceOptions {\n  /**\n   * Optional logger instance for debug/info/warn logs.\n   */\n  logger?: Logger;\n}\n\n/**\n * Configuration options for the JanusAudioSink.\n */\ninterface AudioSinkOptions {\n  /**\n   * Optional logger instance for debug/info/warn logs.\n   */\n  logger?: Logger;\n}\n\n/**\n * JanusAudioSource wraps a RTCAudioSource, allowing you to push\n * raw PCM frames (Int16Array) into the WebRTC pipeline.\n */\nexport class JanusAudioSource extends EventEmitter {\n  private source: any;\n  private readonly track: MediaStreamTrack;\n  private logger?: Logger;\n\n  constructor(options?: AudioSourceOptions) {\n    super();\n    this.logger = options?.logger;\n    this.source = new RTCAudioSource();\n    this.track = this.source.createTrack();\n  }\n\n  /**\n   * Returns the MediaStreamTrack associated with this audio source.\n   */\n  public getTrack(): MediaStreamTrack {\n    return this.track;\n  }\n\n  /**\n   * Pushes PCM data into the RTCAudioSource. Typically 16-bit, single- or multi-channel frames.\n   * @param samples - The Int16Array audio samples.\n   * @param sampleRate - The sampling rate (e.g., 48000).\n   * @param channels - Number of channels (e.g., 1 for mono).\n   */\n  public pushPcmData(\n    samples: Int16Array,\n    sampleRate: number,\n    channels = 1,\n  ): void {\n    if (this.logger?.isDebugEnabled()) {\n      this.logger?.debug(\n        `[JanusAudioSource] pushPcmData => sampleRate=${sampleRate}, channels=${channels}, frames=${samples.length}`,\n      );\n    }\n\n    // Feed data into the RTCAudioSource\n    this.source.onData({\n      samples,\n      sampleRate,\n      bitsPerSample: 16,\n      channelCount: channels,\n      numberOfFrames: samples.length / channels,\n    });\n  }\n}\n\n/**\n * JanusAudioSink wraps a RTCAudioSink, providing an event emitter\n * that forwards raw PCM frames (Int16Array) to listeners.\n */\nexport class JanusAudioSink extends EventEmitter {\n  private sink: any;\n  private active = true;\n  private logger?: Logger;\n\n  constructor(track: MediaStreamTrack, options?: AudioSinkOptions) {\n    super();\n    this.logger = options?.logger;\n\n    if (track.kind !== 'audio') {\n      throw new Error('[JanusAudioSink] Provided track is not an audio track');\n    }\n\n    // Create RTCAudioSink to listen for PCM frames\n    this.sink = new RTCAudioSink(track);\n\n    // Register callback for PCM frames\n    this.sink.ondata = (frame: {\n      samples: Int16Array;\n      sampleRate: number;\n      bitsPerSample: number;\n      channelCount: number;\n    }) => {\n      if (!this.active) return;\n\n      if (this.logger?.isDebugEnabled()) {\n        this.logger?.debug(\n          `[JanusAudioSink] ondata => ` +\n            `sampleRate=${frame.sampleRate}, ` +\n            `bitsPerSample=${frame.bitsPerSample}, ` +\n            `channelCount=${frame.channelCount}, ` +\n            `frames=${frame.samples.length}`,\n        );\n      }\n\n      // Emit 'audioData' event with the raw PCM frame\n      this.emit('audioData', frame);\n    };\n  }\n\n  /**\n   * Stops receiving audio data. Once called, no further 'audioData' events will be emitted.\n   */\n  public stop(): void {\n    this.active = false;\n    if (this.logger?.isDebugEnabled()) {\n      this.logger?.debug('[JanusAudioSink] stop called => stopping the sink');\n    }\n    this.sink?.stop();\n  }\n}\n","// src/core/JanusClient.ts\n\nimport { EventEmitter } from 'events';\nimport wrtc from '@roamhq/wrtc';\nconst { RTCPeerConnection, MediaStream } = wrtc;\nimport { JanusAudioSink, JanusAudioSource } from './JanusAudio';\nimport type { AudioDataWithUser, TurnServersInfo } from '../types';\nimport { Logger } from '../logger';\n\ninterface JanusConfig {\n  /**\n   * The base URL for the Janus gateway (e.g. \"https://gw-prod-hydra-eu-west-3.pscp.tv/s=prod:XX/v1/gateway\")\n   */\n  webrtcUrl: string;\n\n  /**\n   * The unique room ID (e.g., the broadcast or space ID)\n   */\n  roomId: string;\n\n  /**\n   * The token/credential used to authorize requests to Janus (often a signed JWT).\n   */\n  credential: string;\n\n  /**\n   * The user identifier (host or speaker). Used as 'display' in the Janus plugin.\n   */\n  userId: string;\n\n  /**\n   * The name of the stream (often the same as roomId for convenience).\n   */\n  streamName: string;\n\n  /**\n   * ICE / TURN server information returned by Twitter's /turnServers endpoint.\n   */\n  turnServers: TurnServersInfo;\n\n  /**\n   * Logger instance for consistent debug/info/error logs.\n   */\n  logger: Logger;\n}\n\n/**\n * Manages the Janus session for a Twitter AudioSpace:\n *  - Creates a Janus session and plugin handle\n *  - Joins the Janus videoroom as publisher/subscriber\n *  - Subscribes to other speakers\n *  - Sends local PCM frames as Opus\n *  - Polls for Janus events\n *\n * It can be used by both the host (who creates a room) or a guest speaker (who joins an existing room).\n */\nexport class JanusClient extends EventEmitter {\n  private logger: Logger;\n\n  private sessionId?: number;\n  private handleId?: number;\n  private publisherId?: number;\n\n  private pc?: RTCPeerConnection;\n  private localAudioSource?: JanusAudioSource;\n\n  private pollActive = false;\n\n  // Tracks promises waiting for specific Janus events\n  private eventWaiters: Array<{\n    predicate: (evt: any) => boolean;\n    resolve: (value: any) => void;\n    reject: (error: Error) => void;\n  }> = [];\n\n  // Tracks subscriber handle+pc for each userId we subscribe to\n  private subscribers = new Map<\n    string,\n    {\n      handleId: number;\n      pc: RTCPeerConnection;\n    }\n  >();\n\n  constructor(private readonly config: JanusConfig) {\n    super();\n    this.logger = config.logger;\n  }\n\n  /**\n   * Initializes this JanusClient for the host scenario:\n   *  1) createSession()\n   *  2) attachPlugin()\n   *  3) createRoom()\n   *  4) joinRoom()\n   *  5) configure local PeerConnection (send audio, etc.)\n   */\n  public async initialize(): Promise<void> {\n    this.logger.debug('[JanusClient] initialize() called');\n\n    this.sessionId = await this.createSession();\n    this.handleId = await this.attachPlugin();\n\n    // Start polling for Janus events\n    this.pollActive = true;\n    this.startPolling();\n\n    // Create a new Janus room (only for the host scenario)\n    await this.createRoom();\n\n    // Join that room as publisher\n    this.publisherId = await this.joinRoom();\n\n    // Set up our RTCPeerConnection for local audio\n    this.pc = new RTCPeerConnection({\n      iceServers: [\n        {\n          urls: this.config.turnServers.uris,\n          username: this.config.turnServers.username,\n          credential: this.config.turnServers.password,\n        },\n      ],\n    });\n    this.setupPeerEvents();\n\n    // Add local audio track\n    this.enableLocalAudio();\n\n    // Create an offer and configure the publisher in Janus\n    await this.configurePublisher();\n\n    this.logger.info('[JanusClient] Initialization complete');\n  }\n\n  /**\n   * Initializes this JanusClient for a guest speaker scenario:\n   *  1) createSession()\n   *  2) attachPlugin()\n   *  3) join existing room as publisher (no createRoom call)\n   *  4) configure local PeerConnection\n   *  5) subscribe to any existing publishers\n   */\n  public async initializeGuestSpeaker(sessionUUID: string): Promise<void> {\n    this.logger.debug('[JanusClient] initializeGuestSpeaker() called');\n\n    // 1) Create a new Janus session\n    this.sessionId = await this.createSession();\n    this.handleId = await this.attachPlugin();\n\n    // Start polling\n    this.pollActive = true;\n    this.startPolling();\n\n    // 2) Join the existing room as a publisher (no createRoom)\n    const evtPromise = this.waitForJanusEvent(\n      (e) =>\n        e.janus === 'event' &&\n        e.plugindata?.plugin === 'janus.plugin.videoroom' &&\n        e.plugindata?.data?.videoroom === 'joined',\n      10000,\n      'Guest Speaker joined event',\n    );\n\n    const body = {\n      request: 'join',\n      room: this.config.roomId,\n      ptype: 'publisher',\n      display: this.config.userId,\n      periscope_user_id: this.config.userId,\n    };\n    await this.sendJanusMessage(this.handleId, body);\n\n    // Wait for the joined event\n    const evt = await evtPromise;\n    const data = evt.plugindata?.data;\n    this.publisherId = data.id; // Our own publisherId\n    this.logger.debug(\n      '[JanusClient] guest joined => publisherId=',\n      this.publisherId,\n    );\n\n    // If there are existing publishers, we can subscribe to them\n    const publishers = data.publishers || [];\n    this.logger.debug('[JanusClient] existing publishers =>', publishers);\n\n    // 3) Create RTCPeerConnection for sending local audio\n    this.pc = new RTCPeerConnection({\n      iceServers: [\n        {\n          urls: this.config.turnServers.uris,\n          username: this.config.turnServers.username,\n          credential: this.config.turnServers.password,\n        },\n      ],\n    });\n    this.setupPeerEvents();\n    this.enableLocalAudio();\n\n    // 4) configurePublisher => generate offer, wait for answer\n    await this.configurePublisher(sessionUUID);\n\n    // 5) Subscribe to each existing publisher\n    await Promise.all(\n      publishers.map((pub: any) => this.subscribeSpeaker(pub.display, pub.id)),\n    );\n\n    this.logger.info('[JanusClient] Guest speaker negotiation complete');\n  }\n\n  /**\n   * Subscribes to a speaker's audio feed by userId and/or feedId.\n   * If feedId=0, we wait for a \"publishers\" event to discover feedId.\n   */\n  public async subscribeSpeaker(\n    userId: string,\n    feedId: number = 0,\n  ): Promise<void> {\n    this.logger.debug('[JanusClient] subscribeSpeaker => userId=', userId);\n\n    // 1) Attach a separate plugin handle for subscriber\n    const subscriberHandleId = await this.attachPlugin();\n    this.logger.debug('[JanusClient] subscriber handle =>', subscriberHandleId);\n\n    // If feedId was not provided, wait for an event listing publishers\n    if (feedId === 0) {\n      const publishersEvt = await this.waitForJanusEvent(\n        (e) =>\n          e.janus === 'event' &&\n          e.plugindata?.plugin === 'janus.plugin.videoroom' &&\n          e.plugindata?.data?.videoroom === 'event' &&\n          Array.isArray(e.plugindata?.data?.publishers) &&\n          e.plugindata?.data?.publishers.length > 0,\n        8000,\n        'discover feed_id from \"publishers\"',\n      );\n\n      const list = publishersEvt.plugindata.data.publishers as any[];\n      const pub = list.find(\n        (p) => p.display === userId || p.periscope_user_id === userId,\n      );\n      if (!pub) {\n        throw new Error(\n          `[JanusClient] subscribeSpeaker => No publisher found for userId=${userId}`,\n        );\n      }\n      feedId = pub.id;\n      this.logger.debug('[JanusClient] found feedId =>', feedId);\n    }\n\n    // Notify listeners that we've discovered a feed\n    this.emit('subscribedSpeaker', { userId, feedId });\n\n    // 2) Join the room as a \"subscriber\"\n    const joinBody = {\n      request: 'join',\n      room: this.config.roomId,\n      periscope_user_id: this.config.userId,\n      ptype: 'subscriber',\n      streams: [\n        {\n          feed: feedId,\n          mid: '0',\n          send: true, // indicates we might send audio?\n        },\n      ],\n    };\n    await this.sendJanusMessage(subscriberHandleId, joinBody);\n\n    // 3) Wait for \"attached\" + jsep.offer\n    const attachedEvt = await this.waitForJanusEvent(\n      (e) =>\n        e.janus === 'event' &&\n        e.sender === subscriberHandleId &&\n        e.plugindata?.plugin === 'janus.plugin.videoroom' &&\n        e.plugindata?.data?.videoroom === 'attached' &&\n        e.jsep?.type === 'offer',\n      8000,\n      'subscriber attached + offer',\n    );\n    this.logger.debug('[JanusClient] subscriber => \"attached\" with offer');\n\n    // 4) Create a new RTCPeerConnection for receiving audio from this feed\n    const offer = attachedEvt.jsep;\n    const subPc = new RTCPeerConnection({\n      iceServers: [\n        {\n          urls: this.config.turnServers.uris,\n          username: this.config.turnServers.username,\n          credential: this.config.turnServers.password,\n        },\n      ],\n    });\n\n    subPc.ontrack = (evt) => {\n      this.logger.debug(\n        '[JanusClient] subscriber track => kind=%s, readyState=%s, muted=%s',\n        evt.track.kind,\n        evt.track.readyState,\n        evt.track.muted,\n      );\n      // Attach a JanusAudioSink to capture PCM\n      const sink = new JanusAudioSink(evt.track, { logger: this.logger });\n\n      // For each audio frame, forward it to 'audioDataFromSpeaker'\n      sink.on('audioData', (frame) => {\n        if (this.logger.isDebugEnabled()) {\n          let maxVal = 0;\n          for (let i = 0; i < frame.samples.length; i++) {\n            const val = Math.abs(frame.samples[i]);\n            if (val > maxVal) maxVal = val;\n          }\n          this.logger.debug(\n            `[AudioSink] userId=${userId}, maxAmplitude=${maxVal}`,\n          );\n        }\n\n        this.emit('audioDataFromSpeaker', {\n          userId,\n          bitsPerSample: frame.bitsPerSample,\n          sampleRate: frame.sampleRate,\n          numberOfFrames: frame.numberOfFrames,\n          channelCount: frame.channelCount,\n          samples: frame.samples,\n        } as AudioDataWithUser);\n      });\n    };\n\n    // 5) Answer the subscription offer\n    await subPc.setRemoteDescription(offer);\n    const answer = await subPc.createAnswer();\n    await subPc.setLocalDescription(answer);\n\n    // 6) Send \"start\" request to begin receiving\n    await this.sendJanusMessage(\n      subscriberHandleId,\n      {\n        request: 'start',\n        room: this.config.roomId,\n        periscope_user_id: this.config.userId,\n      },\n      answer,\n    );\n\n    this.logger.debug('[JanusClient] subscriber => done (user=', userId, ')');\n\n    // Track this subscription handle+pc by userId\n    this.subscribers.set(userId, { handleId: subscriberHandleId, pc: subPc });\n  }\n\n  /**\n   * Pushes local PCM frames to Janus. If the localAudioSource isn't active, it enables it.\n   */\n  public pushLocalAudio(samples: Int16Array, sampleRate: number, channels = 1) {\n    if (!this.localAudioSource) {\n      this.logger.warn('[JanusClient] No localAudioSource => enabling now...');\n      this.enableLocalAudio();\n    }\n    this.localAudioSource?.pushPcmData(samples, sampleRate, channels);\n  }\n\n  /**\n   * Ensures a local audio track is added to the RTCPeerConnection for publishing.\n   */\n  public enableLocalAudio(): void {\n    if (!this.pc) {\n      this.logger.warn(\n        '[JanusClient] enableLocalAudio => No RTCPeerConnection',\n      );\n      return;\n    }\n    if (this.localAudioSource) {\n      this.logger.debug('[JanusClient] localAudioSource already active');\n      return;\n    }\n    // Create a JanusAudioSource that feeds PCM frames\n    this.localAudioSource = new JanusAudioSource({ logger: this.logger });\n    const track = this.localAudioSource.getTrack();\n    const localStream = new MediaStream();\n    localStream.addTrack(track);\n    this.pc.addTrack(track, localStream);\n  }\n\n  /**\n   * Stops the Janus client: ends polling, closes the RTCPeerConnection, etc.\n   * Does not destroy or leave the room automatically; call destroyRoom() or leaveRoom() if needed.\n   */\n  public async stop(): Promise<void> {\n    this.logger.info('[JanusClient] Stopping...');\n    this.pollActive = false;\n    if (this.pc) {\n      this.pc.close();\n      this.pc = undefined;\n    }\n  }\n\n  /**\n   * Returns the current Janus sessionId, if any.\n   */\n  public getSessionId(): number | undefined {\n    return this.sessionId;\n  }\n\n  /**\n   * Returns the Janus handleId for the publisher, if any.\n   */\n  public getHandleId(): number | undefined {\n    return this.handleId;\n  }\n\n  /**\n   * Returns the Janus publisherId (internal participant ID), if any.\n   */\n  public getPublisherId(): number | undefined {\n    return this.publisherId;\n  }\n\n  /**\n   * Creates a new Janus session via POST /janus (with \"janus\":\"create\").\n   */\n  private async createSession(): Promise<number> {\n    const transaction = this.randomTid();\n    const resp = await fetch(this.config.webrtcUrl, {\n      method: 'POST',\n      headers: {\n        Authorization: this.config.credential,\n        'Content-Type': 'application/json',\n        Referer: 'https://x.com',\n      },\n      body: JSON.stringify({\n        janus: 'create',\n        transaction,\n      }),\n    });\n    if (!resp.ok) {\n      throw new Error('[JanusClient] createSession failed');\n    }\n    const json = await resp.json();\n    if (json.janus !== 'success') {\n      throw new Error('[JanusClient] createSession invalid response');\n    }\n    return json.data.id;\n  }\n\n  /**\n   * Attaches to the videoroom plugin via /janus/{sessionId} (with \"janus\":\"attach\").\n   */\n  private async attachPlugin(): Promise<number> {\n    if (!this.sessionId) {\n      throw new Error('[JanusClient] attachPlugin => no sessionId');\n    }\n    const transaction = this.randomTid();\n    const resp = await fetch(`${this.config.webrtcUrl}/${this.sessionId}`, {\n      method: 'POST',\n      headers: {\n        Authorization: this.config.credential,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        janus: 'attach',\n        plugin: 'janus.plugin.videoroom',\n        transaction,\n      }),\n    });\n    if (!resp.ok) {\n      throw new Error('[JanusClient] attachPlugin failed');\n    }\n    const json = await resp.json();\n    if (json.janus !== 'success') {\n      throw new Error('[JanusClient] attachPlugin invalid response');\n    }\n    return json.data.id;\n  }\n\n  /**\n   * Creates a Janus room for the host scenario.\n   * For a guest, this step is skipped (the room already exists).\n   */\n  private async createRoom(): Promise<void> {\n    if (!this.sessionId || !this.handleId) {\n      throw new Error('[JanusClient] createRoom => No session/handle');\n    }\n    const transaction = this.randomTid();\n    const body = {\n      request: 'create',\n      room: this.config.roomId,\n      periscope_user_id: this.config.userId,\n      audiocodec: 'opus',\n      videocodec: 'h264',\n      transport_wide_cc_ext: true,\n      app_component: 'audio-room',\n      h264_profile: '42e01f',\n      dummy_publisher: false,\n    };\n    const resp = await fetch(\n      `${this.config.webrtcUrl}/${this.sessionId}/${this.handleId}`,\n      {\n        method: 'POST',\n        headers: {\n          Authorization: this.config.credential,\n          'Content-Type': 'application/json',\n          Referer: 'https://x.com',\n        },\n        body: JSON.stringify({\n          janus: 'message',\n          transaction,\n          body,\n        }),\n      },\n    );\n    if (!resp.ok) {\n      throw new Error(`[JanusClient] createRoom failed => ${resp.status}`);\n    }\n    const json = await resp.json();\n    this.logger.debug('[JanusClient] createRoom =>', JSON.stringify(json));\n\n    if (json.janus === 'error') {\n      throw new Error(\n        `[JanusClient] createRoom error => ${json.error?.reason || 'Unknown'}`,\n      );\n    }\n    if (json.plugindata?.data?.videoroom !== 'created') {\n      throw new Error(\n        `[JanusClient] unexpected createRoom response => ${JSON.stringify(\n          json,\n        )}`,\n      );\n    }\n    this.logger.debug(\n      `[JanusClient] Room '${this.config.roomId}' created successfully`,\n    );\n  }\n\n  /**\n   * Joins the created room as a publisher, for the host scenario.\n   */\n  private async joinRoom(): Promise<number> {\n    if (!this.sessionId || !this.handleId) {\n      throw new Error('[JanusClient] no session/handle for joinRoom()');\n    }\n\n    this.logger.debug('[JanusClient] joinRoom => start');\n\n    // Wait for the 'joined' event from videoroom\n    const evtPromise = this.waitForJanusEvent(\n      (e) =>\n        e.janus === 'event' &&\n        e.plugindata?.plugin === 'janus.plugin.videoroom' &&\n        e.plugindata?.data?.videoroom === 'joined',\n      12000,\n      'Host Joined Event',\n    );\n\n    const body = {\n      request: 'join',\n      room: this.config.roomId,\n      ptype: 'publisher',\n      display: this.config.userId,\n      periscope_user_id: this.config.userId,\n    };\n    await this.sendJanusMessage(this.handleId, body);\n\n    const evt = await evtPromise;\n    const publisherId = evt.plugindata.data.id;\n    this.logger.debug('[JanusClient] joined room => publisherId=', publisherId);\n    return publisherId;\n  }\n\n  /**\n   * Creates an SDP offer and sends \"configure\" to Janus with it.\n   * Used by both host and guest after attach + join.\n   */\n  private async configurePublisher(sessionUUID: string = ''): Promise<void> {\n    if (!this.pc || !this.sessionId || !this.handleId) {\n      return;\n    }\n\n    this.logger.debug('[JanusClient] createOffer...');\n    const offer = await this.pc.createOffer({\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: false,\n    });\n    await this.pc.setLocalDescription(offer);\n\n    this.logger.debug('[JanusClient] sending configure with JSEP...');\n    await this.sendJanusMessage(\n      this.handleId,\n      {\n        request: 'configure',\n        room: this.config.roomId,\n        periscope_user_id: this.config.userId,\n        session_uuid: sessionUUID,\n        stream_name: this.config.streamName,\n        vidman_token: this.config.credential,\n      },\n      offer,\n    );\n    this.logger.debug('[JanusClient] waiting for answer...');\n  }\n\n  /**\n   * Sends a \"janus\":\"message\" to the Janus handle, optionally with jsep.\n   */\n  private async sendJanusMessage(\n    handleId: number,\n    body: any,\n    jsep?: any,\n  ): Promise<void> {\n    if (!this.sessionId) {\n      throw new Error('[JanusClient] No session for sendJanusMessage');\n    }\n    const transaction = this.randomTid();\n    const resp = await fetch(\n      `${this.config.webrtcUrl}/${this.sessionId}/${handleId}`,\n      {\n        method: 'POST',\n        headers: {\n          Authorization: this.config.credential,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          janus: 'message',\n          transaction,\n          body,\n          jsep,\n        }),\n      },\n    );\n    if (!resp.ok) {\n      throw new Error(\n        `[JanusClient] sendJanusMessage failed => status=${resp.status}`,\n      );\n    }\n  }\n\n  /**\n   * Starts polling /janus/{sessionId}?maxev=1 for events. We parse keepalives, answers, etc.\n   */\n  private startPolling(): void {\n    this.logger.debug('[JanusClient] Starting polling...');\n    const doPoll = async () => {\n      if (!this.pollActive || !this.sessionId) {\n        this.logger.debug('[JanusClient] Polling stopped');\n        return;\n      }\n      try {\n        const url = `${this.config.webrtcUrl}/${\n          this.sessionId\n        }?maxev=1&_=${Date.now()}`;\n        const resp = await fetch(url, {\n          headers: { Authorization: this.config.credential },\n        });\n        if (resp.ok) {\n          const event = await resp.json();\n          this.handleJanusEvent(event);\n        } else {\n          this.logger.warn('[JanusClient] poll error =>', resp.status);\n        }\n      } catch (err) {\n        this.logger.error('[JanusClient] poll exception =>', err);\n      }\n      setTimeout(doPoll, 500);\n    };\n    doPoll();\n  }\n\n  /**\n   * Processes each Janus event received from the poll cycle.\n   */\n  private handleJanusEvent(evt: any): void {\n    if (!evt.janus) {\n      return;\n    }\n    if (evt.janus === 'keepalive') {\n      this.logger.debug('[JanusClient] keepalive received');\n      return;\n    }\n    if (evt.janus === 'webrtcup') {\n      this.logger.debug('[JanusClient] webrtcup => sender=', evt.sender);\n    }\n    // If there's a JSEP answer, set it on our RTCPeerConnection\n    if (evt.jsep && evt.jsep.type === 'answer') {\n      this.onReceivedAnswer(evt.jsep);\n    }\n    // If there's a publisherId in the data, store it\n    if (evt.plugindata?.data?.id) {\n      this.publisherId = evt.plugindata.data.id;\n    }\n    // If there's an error, emit an 'error' event\n    if (evt.error) {\n      this.logger.error('[JanusClient] Janus error =>', evt.error.reason);\n      this.emit('error', new Error(evt.error.reason));\n    }\n\n    // Resolve any waiting eventWaiters whose predicate matches\n    for (let i = 0; i < this.eventWaiters.length; i++) {\n      const waiter = this.eventWaiters[i];\n      if (waiter.predicate(evt)) {\n        this.eventWaiters.splice(i, 1);\n        waiter.resolve(evt);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Called whenever we get an SDP \"answer\" from Janus. Sets the remote description on our PC.\n   */\n  private async onReceivedAnswer(answer: any): Promise<void> {\n    if (!this.pc) {\n      return;\n    }\n    this.logger.debug('[JanusClient] got answer => setRemoteDescription');\n    await this.pc.setRemoteDescription(answer);\n  }\n\n  /**\n   * Sets up events on our main RTCPeerConnection for ICE changes, track additions, etc.\n   */\n  private setupPeerEvents(): void {\n    if (!this.pc) {\n      return;\n    }\n    this.pc.addEventListener('iceconnectionstatechange', () => {\n      this.logger.debug(\n        '[JanusClient] ICE state =>',\n        this.pc?.iceConnectionState,\n      );\n      if (this.pc?.iceConnectionState === 'failed') {\n        this.emit('error', new Error('[JanusClient] ICE connection failed'));\n      }\n    });\n    this.pc.addEventListener('track', (evt) => {\n      this.logger.debug('[JanusClient] ontrack => kind=', evt.track.kind);\n    });\n  }\n\n  /**\n   * Generates a random transaction ID for Janus requests.\n   */\n  private randomTid(): string {\n    return Math.random().toString(36).slice(2, 10);\n  }\n\n  /**\n   * Waits for a specific Janus event (e.g., \"joined\", \"attached\", etc.)\n   * that matches a given predicate. Times out after timeoutMs if not received.\n   */\n  private async waitForJanusEvent(\n    predicate: (evt: any) => boolean,\n    timeoutMs = 5000,\n    description = 'some event',\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const waiter = { predicate, resolve, reject };\n      this.eventWaiters.push(waiter);\n\n      setTimeout(() => {\n        const idx = this.eventWaiters.indexOf(waiter);\n        if (idx !== -1) {\n          this.eventWaiters.splice(idx, 1);\n          this.logger.warn(\n            `[JanusClient] waitForJanusEvent => timed out waiting for: ${description}`,\n          );\n          reject(\n            new Error(\n              `[JanusClient] waitForJanusEvent (expecting \"${description}\") timed out after ${timeoutMs}ms`,\n            ),\n          );\n        }\n      }, timeoutMs);\n    });\n  }\n\n  /**\n   * Destroys the Janus room (host only). Does not close local PC or stop polling.\n   */\n  public async destroyRoom(): Promise<void> {\n    if (!this.sessionId || !this.handleId) {\n      this.logger.warn('[JanusClient] destroyRoom => no session/handle');\n      return;\n    }\n    if (!this.config.roomId || !this.config.userId) {\n      this.logger.warn('[JanusClient] destroyRoom => no roomId/userId');\n      return;\n    }\n\n    const transaction = this.randomTid();\n    const body = {\n      request: 'destroy',\n      room: this.config.roomId,\n      periscope_user_id: this.config.userId,\n    };\n    this.logger.info('[JanusClient] destroying room =>', body);\n\n    const resp = await fetch(\n      `${this.config.webrtcUrl}/${this.sessionId}/${this.handleId}`,\n      {\n        method: 'POST',\n        headers: {\n          Authorization: this.config.credential,\n          'Content-Type': 'application/json',\n          Referer: 'https://x.com',\n        },\n        body: JSON.stringify({\n          janus: 'message',\n          transaction,\n          body,\n        }),\n      },\n    );\n    if (!resp.ok) {\n      throw new Error(`[JanusClient] destroyRoom failed => ${resp.status}`);\n    }\n    const json = await resp.json();\n    this.logger.debug('[JanusClient] destroyRoom =>', JSON.stringify(json));\n  }\n\n  /**\n   * Leaves the Janus room if we've joined. Does not close the local PC or stop polling.\n   */\n  public async leaveRoom(): Promise<void> {\n    if (!this.sessionId || !this.handleId) {\n      this.logger.warn('[JanusClient] leaveRoom => no session/handle');\n      return;\n    }\n    const transaction = this.randomTid();\n    const body = {\n      request: 'leave',\n      room: this.config.roomId,\n      periscope_user_id: this.config.userId,\n    };\n    this.logger.info('[JanusClient] leaving room =>', body);\n\n    const resp = await fetch(\n      `${this.config.webrtcUrl}/${this.sessionId}/${this.handleId}`,\n      {\n        method: 'POST',\n        headers: {\n          Authorization: this.config.credential,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          janus: 'message',\n          transaction,\n          body,\n        }),\n      },\n    );\n    if (!resp.ok) {\n      throw new Error(`[JanusClient] leaveRoom => error code ${resp.status}`);\n    }\n    const json = await resp.json();\n    this.logger.debug('[JanusClient] leaveRoom =>', JSON.stringify(json));\n  }\n}\n","// src/utils.ts\n\nimport { Headers } from 'headers-polyfill';\nimport type { BroadcastCreated, TurnServersInfo } from './types';\nimport { ChatClient } from './core/ChatClient';\nimport { Logger } from './logger';\nimport { EventEmitter } from 'events';\n\n/**\n * Authorizes a token for guest access, using the provided Periscope cookie.\n * Returns an authorization token (bearer/JWT-like).\n */\nexport async function authorizeToken(cookie: string): Promise<string> {\n  const headers = new Headers({\n    'X-Periscope-User-Agent': 'Twitter/m5',\n    'Content-Type': 'application/json',\n    'X-Idempotence': Date.now().toString(),\n    Referer: 'https://x.com/',\n    'X-Attempt': '1',\n  });\n\n  const resp = await fetch('https://proxsee.pscp.tv/api/v2/authorizeToken', {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      service: 'guest',\n      cookie: cookie,\n    }),\n  });\n\n  if (!resp.ok) {\n    throw new Error(\n      `authorizeToken => request failed with status ${resp.status}`,\n    );\n  }\n\n  const data = (await resp.json()) as { authorization_token: string };\n  if (!data.authorization_token) {\n    throw new Error(\n      'authorizeToken => Missing authorization_token in response',\n    );\n  }\n\n  return data.authorization_token;\n}\n\n/**\n * Publishes a newly created broadcast (Space) to make it live/visible.\n * Generally invoked after creating the broadcast and initializing Janus.\n */\nexport async function publishBroadcast(params: {\n  title: string;\n  broadcast: BroadcastCreated;\n  cookie: string;\n  janusSessionId?: number;\n  janusHandleId?: number;\n  janusPublisherId?: number;\n}): Promise<void> {\n  const headers = new Headers({\n    'X-Periscope-User-Agent': 'Twitter/m5',\n    'Content-Type': 'application/json',\n    Referer: 'https://x.com/',\n    'X-Idempotence': Date.now().toString(),\n    'X-Attempt': '1',\n  });\n\n  await fetch('https://proxsee.pscp.tv/api/v2/publishBroadcast', {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      accept_guests: true,\n      broadcast_id: params.broadcast.room_id,\n      webrtc_handle_id: params.janusHandleId,\n      webrtc_session_id: params.janusSessionId,\n      janus_publisher_id: params.janusPublisherId,\n      janus_room_id: params.broadcast.room_id,\n      cookie: params.cookie,\n      status: params.title,\n      conversation_controls: 0,\n    }),\n  });\n}\n\n/**\n * Retrieves TURN server credentials and URIs from Periscope.\n */\nexport async function getTurnServers(cookie: string): Promise<TurnServersInfo> {\n  const headers = new Headers({\n    'X-Periscope-User-Agent': 'Twitter/m5',\n    'Content-Type': 'application/json',\n    Referer: 'https://x.com/',\n    'X-Idempotence': Date.now().toString(),\n    'X-Attempt': '1',\n  });\n\n  const resp = await fetch('https://proxsee.pscp.tv/api/v2/turnServers', {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({ cookie }),\n  });\n  if (!resp.ok) {\n    throw new Error(\n      `getTurnServers => request failed with status ${resp.status}`,\n    );\n  }\n  return resp.json();\n}\n\n/**\n * Obtains the region from signer.pscp.tv, typically used when creating a broadcast.\n */\nexport async function getRegion(): Promise<string> {\n  const resp = await fetch('https://signer.pscp.tv/region', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Referer: 'https://x.com',\n    },\n    body: JSON.stringify({}),\n  });\n  if (!resp.ok) {\n    throw new Error(`getRegion => request failed with status ${resp.status}`);\n  }\n  const data = (await resp.json()) as { region: string };\n  return data.region;\n}\n\n/**\n * Creates a new broadcast on Periscope/Twitter.\n * Used by the host to create the underlying audio-room structure.\n */\nexport async function createBroadcast(params: {\n  description?: string;\n  languages?: string[];\n  cookie: string;\n  region: string;\n  record: boolean;\n}): Promise<BroadcastCreated> {\n  const headers = new Headers({\n    'X-Periscope-User-Agent': 'Twitter/m5',\n    'Content-Type': 'application/json',\n    'X-Idempotence': Date.now().toString(),\n    Referer: 'https://x.com/',\n    'X-Attempt': '1',\n  });\n\n  const resp = await fetch('https://proxsee.pscp.tv/api/v2/createBroadcast', {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      app_component: 'audio-room',\n      content_type: 'visual_audio',\n      cookie: params.cookie,\n      conversation_controls: 0,\n      description: params.description || '',\n      height: 1080,\n      is_360: false,\n      is_space_available_for_replay: params.record,\n      is_webrtc: true,\n      languages: params.languages ?? [],\n      region: params.region,\n      width: 1920,\n    }),\n  });\n\n  if (!resp.ok) {\n    const text = await resp.text();\n    throw new Error(\n      `createBroadcast => request failed with status ${resp.status} ${text}`,\n    );\n  }\n\n  const data = await resp.json();\n  return data as BroadcastCreated;\n}\n\n/**\n * Acquires chat access info (token, endpoint, etc.) from Periscope.\n * Needed to connect via WebSocket to the chat server.\n */\nexport async function accessChat(\n  chatToken: string,\n  cookie: string,\n): Promise<any> {\n  const url = 'https://proxsee.pscp.tv/api/v2/accessChat';\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    'X-Periscope-User-Agent': 'Twitter/m5',\n  });\n\n  const body = {\n    chat_token: chatToken,\n    cookie,\n  };\n\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n  if (!resp.ok) {\n    throw new Error(`accessChat => request failed with status ${resp.status}`);\n  }\n  return resp.json();\n}\n\n/**\n * Registers this client as a viewer (POST /startWatching), returning a watch session token.\n */\nexport async function startWatching(\n  lifecycleToken: string,\n  cookie: string,\n): Promise<string> {\n  const url = 'https://proxsee.pscp.tv/api/v2/startWatching';\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    'X-Periscope-User-Agent': 'Twitter/m5',\n  });\n\n  const body = {\n    auto_play: false,\n    life_cycle_token: lifecycleToken,\n    cookie,\n  };\n\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n  if (!resp.ok) {\n    throw new Error(\n      `startWatching => request failed with status ${resp.status}`,\n    );\n  }\n  const json = await resp.json();\n  // Typically returns { session: \"...someToken...\" }\n  return json.session;\n}\n\n/**\n * Deregisters this client from viewing the broadcast (POST /stopWatching).\n */\nexport async function stopWatching(\n  session: string,\n  cookie: string,\n): Promise<void> {\n  const url = 'https://proxsee.pscp.tv/api/v2/stopWatching';\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    'X-Periscope-User-Agent': 'Twitter/m5',\n  });\n\n  const body = { session, cookie };\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n  if (!resp.ok) {\n    throw new Error(\n      `stopWatching => request failed with status ${resp.status}`,\n    );\n  }\n}\n\n/**\n * Optional step: join an existing AudioSpace (POST /audiospace/join).\n * This might be required before you can request speaker.\n */\nexport async function joinAudioSpace(params: {\n  broadcastId: string;\n  chatToken: string;\n  authToken: string;\n  joinAsAdmin?: boolean;\n  shouldAutoJoin?: boolean;\n}): Promise<any> {\n  const url = 'https://guest.pscp.tv/api/v1/audiospace/join';\n\n  const body = {\n    ntpForBroadcasterFrame: '2208988800031000000',\n    ntpForLiveFrame: '2208988800031000000',\n    broadcast_id: params.broadcastId,\n    join_as_admin: params.joinAsAdmin ?? false,\n    should_auto_join: params.shouldAutoJoin ?? false,\n    chat_token: params.chatToken,\n  };\n\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    Authorization: params.authToken,\n  });\n\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n\n  if (!resp.ok) {\n    throw new Error(\n      `joinAudioSpace => request failed with status ${resp.status}`,\n    );\n  }\n  // Typically returns { can_auto_join: boolean } etc.\n  return resp.json();\n}\n\n/**\n * Submits a speaker request (POST /audiospace/request/submit),\n * returning the session UUID you need for negotiation.\n */\nexport async function submitSpeakerRequest(params: {\n  broadcastId: string;\n  chatToken: string;\n  authToken: string;\n}): Promise<{ session_uuid: string }> {\n  const url = 'https://guest.pscp.tv/api/v1/audiospace/request/submit';\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    Authorization: params.authToken,\n  });\n\n  const body = {\n    ntpForBroadcasterFrame: '2208988800030000000',\n    ntpForLiveFrame: '2208988800030000000',\n    broadcast_id: params.broadcastId,\n    chat_token: params.chatToken,\n  };\n\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n  if (!resp.ok) {\n    throw new Error(\n      `submitSpeakerRequest => request failed with status ${resp.status}`,\n    );\n  }\n  return resp.json();\n}\n\n/**\n * Cancels a previously submitted speaker request (POST /audiospace/request/cancel).\n * Only valid if a request/submit was made first with a sessionUUID.\n */\nexport async function cancelSpeakerRequest(params: {\n  broadcastId: string;\n  sessionUUID: string;\n  chatToken: string;\n  authToken: string;\n}): Promise<void> {\n  const url = 'https://guest.pscp.tv/api/v1/audiospace/request/cancel';\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    Authorization: params.authToken,\n  });\n\n  const body = {\n    ntpForBroadcasterFrame: '2208988800002000000',\n    ntpForLiveFrame: '2208988800002000000',\n    broadcast_id: params.broadcastId,\n    session_uuid: params.sessionUUID,\n    chat_token: params.chatToken,\n  };\n\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n  if (!resp.ok) {\n    throw new Error(\n      `cancelSpeakerRequest => request failed with status ${resp.status}`,\n    );\n  }\n  // Typically returns { \"success\": true }\n  return resp.json();\n}\n\n/**\n * Negotiates a guest streaming session (POST /audiospace/stream/negotiate),\n * returning a Janus JWT and gateway URL for WebRTC.\n */\nexport async function negotiateGuestStream(params: {\n  broadcastId: string;\n  sessionUUID: string;\n  authToken: string;\n  cookie: string;\n}): Promise<{ janus_jwt: string; webrtc_gw_url: string }> {\n  const url = 'https://guest.pscp.tv/api/v1/audiospace/stream/negotiate';\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    Authorization: params.authToken,\n  });\n\n  const body = {\n    session_uuid: params.sessionUUID,\n  };\n\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n  if (!resp.ok) {\n    throw new Error(\n      `negotiateGuestStream => request failed with status ${resp.status}`,\n    );\n  }\n  return resp.json();\n}\n\n/**\n * Mutes a speaker (POST /audiospace/muteSpeaker).\n * If called by the host, sessionUUID is \"\".\n * If called by a speaker, pass your own sessionUUID.\n */\nexport async function muteSpeaker(params: {\n  broadcastId: string;\n  sessionUUID?: string;\n  chatToken: string;\n  authToken: string;\n}): Promise<void> {\n  const url = 'https://guest.pscp.tv/api/v1/audiospace/muteSpeaker';\n\n  const body = {\n    ntpForBroadcasterFrame: 2208988800031000000,\n    ntpForLiveFrame: 2208988800031000000,\n    session_uuid: params.sessionUUID ?? '',\n    broadcast_id: params.broadcastId,\n    chat_token: params.chatToken,\n  };\n\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    Authorization: params.authToken,\n  });\n\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n  if (!resp.ok) {\n    const text = await resp.text();\n    throw new Error(`muteSpeaker => ${resp.status} ${text}`);\n  }\n}\n\n/**\n * Unmutes a speaker (POST /audiospace/unmuteSpeaker).\n * If called by the host, sessionUUID is \"\".\n * If called by a speaker, pass your own sessionUUID.\n */\nexport async function unmuteSpeaker(params: {\n  broadcastId: string;\n  sessionUUID?: string;\n  chatToken: string;\n  authToken: string;\n}): Promise<void> {\n  const url = 'https://guest.pscp.tv/api/v1/audiospace/unmuteSpeaker';\n\n  const body = {\n    ntpForBroadcasterFrame: 2208988800031000000,\n    ntpForLiveFrame: 2208988800031000000,\n    session_uuid: params.sessionUUID ?? '',\n    broadcast_id: params.broadcastId,\n    chat_token: params.chatToken,\n  };\n\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    Authorization: params.authToken,\n  });\n\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n  if (!resp.ok) {\n    const text = await resp.text();\n    throw new Error(`unmuteSpeaker => ${resp.status} ${text}`);\n  }\n}\n\n/**\n * Common chat events helper. Attaches listeners to a ChatClient, then re-emits them\n * through a given EventEmitter (e.g. Space or SpaceParticipant).\n */\nexport function setupCommonChatEvents(\n  chatClient: ChatClient,\n  logger: Logger,\n  emitter: EventEmitter,\n): void {\n  // Occupancy updates\n  chatClient.on('occupancyUpdate', (upd) => {\n    logger.debug('[ChatEvents] occupancyUpdate =>', upd);\n    emitter.emit('occupancyUpdate', upd);\n  });\n\n  // Reaction events\n  chatClient.on('guestReaction', (reaction) => {\n    logger.debug('[ChatEvents] guestReaction =>', reaction);\n    emitter.emit('guestReaction', reaction);\n  });\n\n  // Mute state changes\n  chatClient.on('muteStateChanged', (evt) => {\n    logger.debug('[ChatEvents] muteStateChanged =>', evt);\n    emitter.emit('muteStateChanged', evt);\n  });\n\n  // Speaker requests\n  chatClient.on('speakerRequest', (req) => {\n    logger.debug('[ChatEvents] speakerRequest =>', req);\n    emitter.emit('speakerRequest', req);\n  });\n\n  // Additional event example: new speaker accepted\n  chatClient.on('newSpeakerAccepted', (info) => {\n    logger.debug('[ChatEvents] newSpeakerAccepted =>', info);\n    emitter.emit('newSpeakerAccepted', info);\n  });\n}\n","// src/logger.ts\n\nexport class Logger {\n  private readonly debugEnabled: boolean;\n\n  constructor(debugEnabled: boolean) {\n    this.debugEnabled = debugEnabled;\n  }\n\n  info(msg: string, ...args: any[]) {\n    console.log(msg, ...args);\n  }\n\n  debug(msg: string, ...args: any[]) {\n    if (this.debugEnabled) {\n      console.log(msg, ...args);\n    }\n  }\n\n  warn(msg: string, ...args: any[]) {\n    console.warn('[WARN]', msg, ...args);\n  }\n\n  error(msg: string, ...args: any[]) {\n    console.error(msg, ...args);\n  }\n\n  isDebugEnabled(): boolean {\n    return this.debugEnabled;\n  }\n}\n","// src/core/Space.ts\n\nimport { EventEmitter } from 'events';\nimport { ChatClient } from './ChatClient';\nimport { JanusClient } from './JanusClient';\nimport {\n  getTurnServers,\n  createBroadcast,\n  publishBroadcast,\n  authorizeToken,\n  getRegion,\n  muteSpeaker,\n  unmuteSpeaker,\n  setupCommonChatEvents,\n} from '../utils';\nimport type {\n  BroadcastCreated,\n  Plugin,\n  AudioDataWithUser,\n  PluginRegistration,\n  SpeakerInfo,\n} from '../types';\nimport { Scraper } from '../../scraper';\nimport { Logger } from '../logger';\n\nexport interface SpaceConfig {\n  mode: 'BROADCAST' | 'LISTEN' | 'INTERACTIVE';\n  title?: string;\n  description?: string;\n  languages?: string[];\n  debug?: boolean;\n  record: boolean;\n}\n\n/**\n * Manages the creation of a new Space (broadcast host):\n * 1) Creates the broadcast on Periscope\n * 2) Sets up Janus WebRTC for audio\n * 3) Optionally creates a ChatClient for interactive mode\n * 4) Allows managing (approve/remove) speakers, pushing audio, etc.\n */\nexport class Space extends EventEmitter {\n  private readonly debug: boolean;\n  private readonly logger: Logger;\n\n  private janusClient?: JanusClient;\n  private chatClient?: ChatClient;\n\n  private authToken?: string;\n  private broadcastInfo?: BroadcastCreated;\n  private isInitialized = false;\n\n  private plugins = new Set<PluginRegistration>();\n  private speakers = new Map<string, SpeakerInfo>();\n\n  constructor(\n    private readonly scraper: Scraper,\n    options?: { debug?: boolean },\n  ) {\n    super();\n    this.debug = options?.debug ?? false;\n    this.logger = new Logger(this.debug);\n  }\n\n  /**\n   * Registers a plugin and calls its onAttach(...).\n   * init(...) will be invoked once initialization is complete.\n   */\n  public use(plugin: Plugin, config?: Record<string, any>) {\n    const registration: PluginRegistration = { plugin, config };\n    this.plugins.add(registration);\n\n    this.logger.debug('[Space] Plugin added =>', plugin.constructor.name);\n    plugin.onAttach?.({ space: this, pluginConfig: config });\n\n    // If we've already initialized this Space, immediately call plugin.init(...)\n    if (this.isInitialized && plugin.init) {\n      plugin.init({ space: this, pluginConfig: config });\n      // If Janus is also up, call onJanusReady\n      if (this.janusClient) {\n        plugin.onJanusReady?.(this.janusClient);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Main entry point to create and initialize the Space broadcast.\n   */\n  public async initialize(config: SpaceConfig) {\n    this.logger.debug('[Space] Initializing...');\n\n    // 1) Obtain the Periscope cookie + region\n    const cookie = await this.scraper.getPeriscopeCookie();\n    const region = await getRegion();\n    this.logger.debug('[Space] Got region =>', region);\n\n    // 2) Create a broadcast\n    this.logger.debug('[Space] Creating broadcast...');\n    const broadcast = await createBroadcast({\n      description: config.description,\n      languages: config.languages,\n      cookie,\n      region,\n      record: config.record,\n    });\n    this.broadcastInfo = broadcast;\n\n    // 3) Authorize to get an auth token\n    this.logger.debug('[Space] Authorizing token...');\n    this.authToken = await authorizeToken(cookie);\n\n    // 4) Gather TURN servers\n    this.logger.debug('[Space] Getting turn servers...');\n    const turnServers = await getTurnServers(cookie);\n\n    // 5) Create and initialize Janus for hosting\n    this.janusClient = new JanusClient({\n      webrtcUrl: broadcast.webrtc_gw_url,\n      roomId: broadcast.room_id,\n      credential: broadcast.credential,\n      userId: broadcast.broadcast.user_id,\n      streamName: broadcast.stream_name,\n      turnServers,\n      logger: this.logger,\n    });\n    await this.janusClient.initialize();\n\n    // Forward PCM from Janus to plugin.onAudioData\n    this.janusClient.on('audioDataFromSpeaker', (data: AudioDataWithUser) => {\n      this.logger.debug('[Space] Received PCM from speaker =>', data.userId);\n      this.handleAudioData(data);\n    });\n\n    // Update speaker info once we subscribe\n    this.janusClient.on('subscribedSpeaker', ({ userId, feedId }) => {\n      const speaker = this.speakers.get(userId);\n      if (!speaker) {\n        this.logger.debug(\n          '[Space] subscribedSpeaker => no speaker found',\n          userId,\n        );\n        return;\n      }\n      speaker.janusParticipantId = feedId;\n      this.logger.debug(\n        `[Space] updated speaker => userId=${userId}, feedId=${feedId}`,\n      );\n    });\n\n    // 6) Publish the broadcast so it's live\n    this.logger.debug('[Space] Publishing broadcast...');\n    await publishBroadcast({\n      title: config.title || '',\n      broadcast,\n      cookie,\n      janusSessionId: this.janusClient.getSessionId(),\n      janusHandleId: this.janusClient.getHandleId(),\n      janusPublisherId: this.janusClient.getPublisherId(),\n    });\n\n    // 7) If interactive => set up ChatClient\n    if (config.mode === 'INTERACTIVE') {\n      this.logger.debug('[Space] Connecting chat...');\n      this.chatClient = new ChatClient({\n        spaceId: broadcast.room_id,\n        accessToken: broadcast.access_token,\n        endpoint: broadcast.endpoint,\n        logger: this.logger,\n      });\n      await this.chatClient.connect();\n      this.setupChatEvents();\n    }\n\n    this.logger.info(\n      '[Space] Initialized =>',\n      broadcast.share_url.replace('broadcasts', 'spaces'),\n    );\n    this.isInitialized = true;\n\n    // Call plugin.init(...) and onJanusReady(...) for all plugins now that we're set\n    for (const { plugin, config: pluginConfig } of this.plugins) {\n      plugin.init?.({ space: this, pluginConfig });\n      plugin.onJanusReady?.(this.janusClient);\n    }\n\n    this.logger.debug('[Space] All plugins initialized');\n    return broadcast;\n  }\n\n  /**\n   * Send an emoji reaction via chat, if interactive.\n   */\n  public reactWithEmoji(emoji: string) {\n    if (!this.chatClient) return;\n    this.chatClient.reactWithEmoji(emoji);\n  }\n\n  /**\n   * Internal method to wire up chat events if interactive.\n   */\n  private setupChatEvents() {\n    if (!this.chatClient) return;\n    setupCommonChatEvents(this.chatClient, this.logger, this);\n  }\n\n  /**\n   * Approves a speaker request on Twitter side, then calls Janus to subscribe their audio.\n   */\n  public async approveSpeaker(userId: string, sessionUUID: string) {\n    if (!this.isInitialized || !this.broadcastInfo) {\n      throw new Error('[Space] Not initialized or missing broadcastInfo');\n    }\n    if (!this.authToken) {\n      throw new Error('[Space] No auth token available');\n    }\n\n    // Store in our local speaker map\n    this.speakers.set(userId, { userId, sessionUUID });\n\n    // 1) Call Twitter's /request/approve\n    await this.callApproveEndpoint(\n      this.broadcastInfo,\n      this.authToken,\n      userId,\n      sessionUUID,\n    );\n\n    // 2) Subscribe to their audio in Janus\n    await this.janusClient?.subscribeSpeaker(userId);\n  }\n\n  /**\n   * Approve request => calls /api/v1/audiospace/request/approve\n   */\n  private async callApproveEndpoint(\n    broadcast: BroadcastCreated,\n    authorizationToken: string,\n    userId: string,\n    sessionUUID: string,\n  ): Promise<void> {\n    const endpoint = 'https://guest.pscp.tv/api/v1/audiospace/request/approve';\n    const headers = {\n      'Content-Type': 'application/json',\n      Referer: 'https://x.com/',\n      Authorization: authorizationToken,\n    };\n    const body = {\n      ntpForBroadcasterFrame: '2208988800024000300',\n      ntpForLiveFrame: '2208988800024000300',\n      chat_token: broadcast.access_token,\n      session_uuid: sessionUUID,\n    };\n\n    this.logger.debug('[Space] Approving speaker =>', endpoint, body);\n\n    const resp = await fetch(endpoint, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body),\n    });\n\n    if (!resp.ok) {\n      const error = await resp.text();\n      throw new Error(\n        `[Space] Failed to approve speaker => ${resp.status}: ${error}`,\n      );\n    }\n\n    this.logger.info('[Space] Speaker approved =>', userId);\n  }\n\n  /**\n   * Removes a speaker from the Twitter side, then unsubscribes in Janus if needed.\n   */\n  public async removeSpeaker(userId: string) {\n    if (!this.isInitialized || !this.broadcastInfo) {\n      throw new Error('[Space] Not initialized or missing broadcastInfo');\n    }\n    if (!this.authToken) {\n      throw new Error('[Space] No auth token');\n    }\n    if (!this.janusClient) {\n      throw new Error('[Space] No Janus client');\n    }\n\n    // Find this speaker in local map\n    const speaker = this.speakers.get(userId);\n    if (!speaker) {\n      throw new Error(\n        `[Space] removeSpeaker => no speaker found for userId=${userId}`,\n      );\n    }\n\n    const { sessionUUID, janusParticipantId } = speaker;\n    this.logger.debug(\n      '[Space] removeSpeaker =>',\n      sessionUUID,\n      janusParticipantId,\n      speaker,\n    );\n\n    if (!sessionUUID || janusParticipantId === undefined) {\n      throw new Error(\n        `[Space] removeSpeaker => missing sessionUUID or feedId for userId=${userId}`,\n      );\n    }\n\n    // 1) Eject on Twitter side\n    const janusHandleId = this.janusClient.getHandleId();\n    const janusSessionId = this.janusClient.getSessionId();\n    if (!janusHandleId || !janusSessionId) {\n      throw new Error(\n        `[Space] removeSpeaker => missing Janus handle/session for userId=${userId}`,\n      );\n    }\n\n    await this.callRemoveEndpoint(\n      this.broadcastInfo,\n      this.authToken,\n      sessionUUID,\n      janusParticipantId,\n      this.broadcastInfo.room_id,\n      janusHandleId,\n      janusSessionId,\n    );\n\n    // 2) Remove from local map\n    this.speakers.delete(userId);\n    this.logger.info(`[Space] removeSpeaker => removed userId=${userId}`);\n  }\n\n  /**\n   * Twitter's /api/v1/audiospace/stream/eject call\n   */\n  private async callRemoveEndpoint(\n    broadcast: BroadcastCreated,\n    authorizationToken: string,\n    sessionUUID: string,\n    janusParticipantId: number,\n    janusRoomId: string,\n    webrtcHandleId: number,\n    webrtcSessionId: number,\n  ): Promise<void> {\n    const endpoint = 'https://guest.pscp.tv/api/v1/audiospace/stream/eject';\n    const headers = {\n      'Content-Type': 'application/json',\n      Referer: 'https://x.com/',\n      Authorization: authorizationToken,\n    };\n    const body = {\n      ntpForBroadcasterFrame: '2208988800024000300',\n      ntpForLiveFrame: '2208988800024000300',\n      session_uuid: sessionUUID,\n      chat_token: broadcast.access_token,\n      janus_room_id: janusRoomId,\n      janus_participant_id: janusParticipantId,\n      webrtc_handle_id: webrtcHandleId,\n      webrtc_session_id: webrtcSessionId,\n    };\n\n    this.logger.debug('[Space] Removing speaker =>', endpoint, body);\n\n    const resp = await fetch(endpoint, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body),\n    });\n\n    if (!resp.ok) {\n      const error = await resp.text();\n      throw new Error(\n        `[Space] Failed to remove speaker => ${resp.status}: ${error}`,\n      );\n    }\n\n    this.logger.debug('[Space] Speaker removed => sessionUUID=', sessionUUID);\n  }\n\n  /**\n   * Push PCM audio frames if you're the host. Usually you'd do this if you're capturing\n   * microphone input from the host side.\n   */\n  public pushAudio(samples: Int16Array, sampleRate: number) {\n    this.janusClient?.pushLocalAudio(samples, sampleRate);\n  }\n\n  /**\n   * Handler for PCM from other speakers, forwarded to plugin.onAudioData\n   */\n  private handleAudioData(data: AudioDataWithUser) {\n    for (const { plugin } of this.plugins) {\n      plugin.onAudioData?.(data);\n    }\n  }\n\n  /**\n   * Gracefully shut down this Space: destroy the Janus room, end the broadcast, etc.\n   */\n  public async finalizeSpace(): Promise<void> {\n    this.logger.info('[Space] finalizeSpace => stopping broadcast gracefully');\n\n    const tasks: Array<Promise<any>> = [];\n\n    if (this.janusClient) {\n      tasks.push(\n        this.janusClient.destroyRoom().catch((err) => {\n          this.logger.error('[Space] destroyRoom error =>', err);\n        }),\n      );\n    }\n\n    if (this.broadcastInfo) {\n      tasks.push(\n        this.endAudiospace({\n          broadcastId: this.broadcastInfo.room_id,\n          chatToken: this.broadcastInfo.access_token,\n        }).catch((err) => {\n          this.logger.error('[Space] endAudiospace error =>', err);\n        }),\n      );\n    }\n\n    if (this.janusClient) {\n      tasks.push(\n        this.janusClient.leaveRoom().catch((err) => {\n          this.logger.error('[Space] leaveRoom error =>', err);\n        }),\n      );\n    }\n\n    await Promise.all(tasks);\n    this.logger.info('[Space] finalizeSpace => done.');\n  }\n\n  /**\n   * Calls /api/v1/audiospace/admin/endAudiospace on Twitter side.\n   */\n  private async endAudiospace(params: {\n    broadcastId: string;\n    chatToken: string;\n  }): Promise<void> {\n    const url = 'https://guest.pscp.tv/api/v1/audiospace/admin/endAudiospace';\n    const headers = {\n      'Content-Type': 'application/json',\n      Referer: 'https://x.com/',\n      Authorization: this.authToken || '',\n    };\n    const body = {\n      broadcast_id: params.broadcastId,\n      chat_token: params.chatToken,\n    };\n\n    this.logger.debug('[Space] endAudiospace =>', body);\n\n    const resp = await fetch(url, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body),\n    });\n\n    if (!resp.ok) {\n      const errText = await resp.text();\n      throw new Error(`[Space] endAudiospace => ${resp.status} ${errText}`);\n    }\n\n    const json = await resp.json();\n    this.logger.debug('[Space] endAudiospace => success =>', json);\n  }\n\n  /**\n   * Retrieves an array of known speakers in this Space (by userId and sessionUUID).\n   */\n  public getSpeakers(): SpeakerInfo[] {\n    return Array.from(this.speakers.values());\n  }\n\n  /**\n   * Mute the host (yourself). For the host, session_uuid = '' (empty).\n   */\n  public async muteHost() {\n    if (!this.authToken) {\n      throw new Error('[Space] No auth token available');\n    }\n    if (!this.broadcastInfo) {\n      throw new Error('[Space] No broadcastInfo');\n    }\n\n    await muteSpeaker({\n      broadcastId: this.broadcastInfo.room_id,\n      sessionUUID: '', // host => empty\n      chatToken: this.broadcastInfo.access_token,\n      authToken: this.authToken,\n    });\n    this.logger.info('[Space] Host muted successfully.');\n  }\n\n  /**\n   * Unmute the host (yourself).\n   */\n  public async unmuteHost() {\n    if (!this.authToken) {\n      throw new Error('[Space] No auth token');\n    }\n    if (!this.broadcastInfo) {\n      throw new Error('[Space] No broadcastInfo');\n    }\n\n    await unmuteSpeaker({\n      broadcastId: this.broadcastInfo.room_id,\n      sessionUUID: '',\n      chatToken: this.broadcastInfo.access_token,\n      authToken: this.authToken,\n    });\n    this.logger.info('[Space] Host unmuted successfully.');\n  }\n\n  /**\n   * Mute a specific speaker. We'll retrieve sessionUUID from our local map.\n   */\n  public async muteSpeaker(userId: string) {\n    if (!this.authToken) {\n      throw new Error('[Space] No auth token available');\n    }\n    if (!this.broadcastInfo) {\n      throw new Error('[Space] No broadcastInfo');\n    }\n\n    const speaker = this.speakers.get(userId);\n    if (!speaker) {\n      throw new Error(`[Space] Speaker not found for userId=${userId}`);\n    }\n\n    await muteSpeaker({\n      broadcastId: this.broadcastInfo.room_id,\n      sessionUUID: speaker.sessionUUID,\n      chatToken: this.broadcastInfo.access_token,\n      authToken: this.authToken,\n    });\n    this.logger.info(`[Space] Muted speaker => userId=${userId}`);\n  }\n\n  /**\n   * Unmute a specific speaker. We'll retrieve sessionUUID from local map.\n   */\n  public async unmuteSpeaker(userId: string) {\n    if (!this.authToken) {\n      throw new Error('[Space] No auth token available');\n    }\n    if (!this.broadcastInfo) {\n      throw new Error('[Space] No broadcastInfo');\n    }\n\n    const speaker = this.speakers.get(userId);\n    if (!speaker) {\n      throw new Error(`[Space] Speaker not found for userId=${userId}`);\n    }\n\n    await unmuteSpeaker({\n      broadcastId: this.broadcastInfo.room_id,\n      sessionUUID: speaker.sessionUUID,\n      chatToken: this.broadcastInfo.access_token,\n      authToken: this.authToken,\n    });\n    this.logger.info(`[Space] Unmuted speaker => userId=${userId}`);\n  }\n\n  /**\n   * Stop the broadcast entirely, performing finalizeSpace() plus plugin cleanup.\n   */\n  public async stop() {\n    this.logger.info('[Space] Stopping...');\n\n    await this.finalizeSpace().catch((err) => {\n      this.logger.error('[Space] finalizeBroadcast error =>', err);\n    });\n\n    // Disconnect chat if present\n    if (this.chatClient) {\n      await this.chatClient.disconnect();\n      this.chatClient = undefined;\n    }\n\n    // Stop Janus if running\n    if (this.janusClient) {\n      await this.janusClient.stop();\n      this.janusClient = undefined;\n    }\n\n    // Cleanup all plugins\n    for (const { plugin } of this.plugins) {\n      plugin.cleanup?.();\n    }\n    this.plugins.clear();\n\n    this.isInitialized = false;\n  }\n}\n","// src/core/SpaceParticipant.ts\n\nimport { EventEmitter } from 'events';\nimport { Logger } from '../logger';\nimport { ChatClient } from './ChatClient';\nimport { JanusClient } from './JanusClient';\nimport { Scraper } from '../../scraper';\nimport type {\n  TurnServersInfo,\n  Plugin,\n  PluginRegistration,\n  AudioDataWithUser,\n} from '../types';\nimport {\n  accessChat,\n  authorizeToken,\n  getTurnServers,\n  muteSpeaker,\n  negotiateGuestStream,\n  setupCommonChatEvents,\n  startWatching,\n  stopWatching,\n  submitSpeakerRequest,\n  unmuteSpeaker,\n  cancelSpeakerRequest,\n} from '../utils';\n\ninterface SpaceParticipantConfig {\n  spaceId: string;\n  debug?: boolean;\n}\n\n/**\n * Manages joining an existing Space in listener mode,\n * and optionally becoming a speaker via WebRTC (Janus).\n */\nexport class SpaceParticipant extends EventEmitter {\n  private readonly spaceId: string;\n  private readonly debug: boolean;\n  private readonly logger: Logger;\n\n  // Basic auth/cookie data\n  private cookie?: string;\n  private authToken?: string;\n\n  // Chat\n  private chatJwtToken?: string;\n  private chatToken?: string;\n  private chatClient?: ChatClient;\n\n  // Watch session\n  private lifecycleToken?: string;\n  private watchSession?: string;\n\n  // HLS stream\n  private hlsUrl?: string;\n\n  // Speaker request + Janus\n  private sessionUUID?: string;\n  private janusJwt?: string;\n  private webrtcGwUrl?: string;\n  private janusClient?: JanusClient;\n\n  // Plugin management\n  private plugins = new Set<PluginRegistration>();\n\n  constructor(\n    private readonly scraper: Scraper,\n    config: SpaceParticipantConfig,\n  ) {\n    super();\n    this.spaceId = config.spaceId;\n    this.debug = config.debug ?? false;\n    this.logger = new Logger(this.debug);\n  }\n\n  /**\n   * Adds a plugin and calls its onAttach immediately.\n   * init() or onJanusReady() will be invoked later at the appropriate time.\n   */\n  public use(plugin: Plugin, config?: Record<string, any>) {\n    const registration: PluginRegistration = { plugin, config };\n    this.plugins.add(registration);\n\n    this.logger.debug(\n      '[SpaceParticipant] Plugin added =>',\n      plugin.constructor.name,\n    );\n\n    // Call the plugin's onAttach if it exists\n    plugin.onAttach?.({ space: this, pluginConfig: config });\n\n    return this;\n  }\n\n  /**\n   * Joins the Space as a listener: obtains HLS, chat token, etc.\n   */\n  public async joinAsListener(): Promise<void> {\n    this.logger.info(\n      '[SpaceParticipant] Joining space as listener =>',\n      this.spaceId,\n    );\n\n    // 1) Get cookie and authorize\n    this.cookie = await this.scraper.getPeriscopeCookie();\n    this.authToken = await authorizeToken(this.cookie);\n\n    // 2) Retrieve the space metadata for mediaKey\n    const spaceMeta = await this.scraper.getAudioSpaceById(this.spaceId);\n    const mediaKey = spaceMeta?.metadata?.media_key;\n    if (!mediaKey) {\n      throw new Error('[SpaceParticipant] No mediaKey found in metadata');\n    }\n    this.logger.debug('[SpaceParticipant] mediaKey =>', mediaKey);\n\n    // 3) Query live_video_stream/status for HLS URL and chat token\n    const status = await this.scraper.getAudioSpaceStreamStatus(mediaKey);\n    this.hlsUrl = status?.source?.location;\n    this.chatJwtToken = status?.chatToken;\n    this.lifecycleToken = status?.lifecycleToken;\n    this.logger.debug('[SpaceParticipant] HLS =>', this.hlsUrl);\n\n    // 4) Access the chat\n    if (!this.chatJwtToken) {\n      throw new Error('[SpaceParticipant] No chatToken found');\n    }\n    const chatInfo = await accessChat(this.chatJwtToken, this.cookie!);\n    this.chatToken = chatInfo.access_token;\n\n    // 5) Create and connect the ChatClient\n    this.chatClient = new ChatClient({\n      spaceId: chatInfo.room_id,\n      accessToken: chatInfo.access_token,\n      endpoint: chatInfo.endpoint,\n      logger: this.logger,\n    });\n    await this.chatClient.connect();\n    this.setupChatEvents();\n\n    // 6) startWatching (to appear as a viewer)\n    this.watchSession = await startWatching(this.lifecycleToken!, this.cookie!);\n\n    this.logger.info('[SpaceParticipant] Joined as listener.');\n\n    // Call plugin.init(...) now that we have basic \"listener\" mode set up\n    for (const { plugin, config } of this.plugins) {\n      plugin.init?.({ space: this, pluginConfig: config });\n    }\n  }\n\n  /**\n   * Returns the HLS URL if you want to consume the stream as a listener.\n   */\n  public getHlsUrl(): string | undefined {\n    return this.hlsUrl;\n  }\n\n  /**\n   * Submits a speaker request using /audiospace/request/submit.\n   * Returns the sessionUUID used to track approval.\n   */\n  public async requestSpeaker(): Promise<{ sessionUUID: string }> {\n    if (!this.chatJwtToken) {\n      throw new Error(\n        '[SpaceParticipant] Must join as listener first (no chat token).',\n      );\n    }\n    if (!this.authToken) {\n      throw new Error('[SpaceParticipant] No auth token available.');\n    }\n    if (!this.chatToken) {\n      throw new Error('[SpaceParticipant] No chat token available.');\n    }\n\n    this.logger.info('[SpaceParticipant] Submitting speaker request...');\n\n    const { session_uuid } = await submitSpeakerRequest({\n      broadcastId: this.spaceId,\n      chatToken: this.chatToken,\n      authToken: this.authToken,\n    });\n    this.sessionUUID = session_uuid;\n\n    this.logger.info(\n      '[SpaceParticipant] Speaker request submitted =>',\n      session_uuid,\n    );\n    return { sessionUUID: session_uuid };\n  }\n\n  /**\n   * Cancels a previously submitted speaker request using /audiospace/request/cancel.\n   * This requires a valid sessionUUID from requestSpeaker() first.\n   */\n  public async cancelSpeakerRequest(): Promise<void> {\n    if (!this.sessionUUID) {\n      throw new Error(\n        '[SpaceParticipant] No sessionUUID; cannot cancel a speaker request that was never submitted.',\n      );\n    }\n    if (!this.authToken) {\n      throw new Error('[SpaceParticipant] No auth token available.');\n    }\n    if (!this.chatToken) {\n      throw new Error('[SpaceParticipant] No chat token available.');\n    }\n\n    await cancelSpeakerRequest({\n      broadcastId: this.spaceId,\n      sessionUUID: this.sessionUUID,\n      chatToken: this.chatToken,\n      authToken: this.authToken,\n    });\n\n    this.logger.info(\n      '[SpaceParticipant] Speaker request canceled =>',\n      this.sessionUUID,\n    );\n    this.sessionUUID = undefined;\n  }\n\n  /**\n   * Once the host approves our speaker request, we perform Janus negotiation\n   * to become a speaker.\n   */\n  public async becomeSpeaker(): Promise<void> {\n    if (!this.sessionUUID) {\n      throw new Error(\n        '[SpaceParticipant] No sessionUUID (did you call requestSpeaker()?).',\n      );\n    }\n    this.logger.info(\n      '[SpaceParticipant] Negotiating speaker role via Janus...',\n    );\n\n    // 1) Retrieve TURN servers\n    const turnServers: TurnServersInfo = await getTurnServers(this.cookie!);\n    this.logger.debug('[SpaceParticipant] turnServers =>', turnServers);\n\n    // 2) Negotiate with /audiospace/stream/negotiate\n    const nego = await negotiateGuestStream({\n      broadcastId: this.spaceId,\n      sessionUUID: this.sessionUUID,\n      authToken: this.authToken!,\n      cookie: this.cookie!,\n    });\n    this.janusJwt = nego.janus_jwt;\n    this.webrtcGwUrl = nego.webrtc_gw_url;\n    this.logger.debug('[SpaceParticipant] webrtcGwUrl =>', this.webrtcGwUrl);\n\n    // 3) Create JanusClient\n    this.janusClient = new JanusClient({\n      webrtcUrl: this.webrtcGwUrl!,\n      roomId: this.spaceId,\n      credential: this.janusJwt!,\n      userId: turnServers.username.split(':')[1],\n      streamName: this.spaceId,\n      turnServers,\n      logger: this.logger,\n    });\n\n    // 4) Initialize the guest speaker session in Janus\n    await this.janusClient.initializeGuestSpeaker(this.sessionUUID);\n\n    this.janusClient.on('audioDataFromSpeaker', (data: AudioDataWithUser) => {\n      this.logger.debug(\n        '[SpaceParticipant] Received speaker audio =>',\n        data.userId,\n      );\n      this.handleAudioData(data);\n    });\n\n    this.logger.info(\n      '[SpaceParticipant] Now speaker on the Space =>',\n      this.spaceId,\n    );\n\n    // For plugins that need direct Janus references, call onJanusReady\n    for (const { plugin } of this.plugins) {\n      plugin.onJanusReady?.(this.janusClient);\n    }\n  }\n\n  /**\n   * Leaves the Space gracefully:\n   * - Stop Janus if we were a speaker\n   * - Stop watching as a viewer\n   * - Disconnect chat\n   */\n  public async leaveSpace(): Promise<void> {\n    this.logger.info('[SpaceParticipant] Leaving space...');\n\n    // If speaker, stop Janus\n    if (this.janusClient) {\n      await this.janusClient.stop();\n      this.janusClient = undefined;\n    }\n\n    // Stop watching\n    if (this.watchSession && this.cookie) {\n      await stopWatching(this.watchSession, this.cookie);\n    }\n\n    // Disconnect chat\n    if (this.chatClient) {\n      await this.chatClient.disconnect();\n      this.chatClient = undefined;\n    }\n\n    this.logger.info('[SpaceParticipant] Left space =>', this.spaceId);\n  }\n\n  /**\n   * Pushes PCM audio frames if we're speaker; otherwise logs a warning.\n   */\n  public pushAudio(samples: Int16Array, sampleRate: number) {\n    if (!this.janusClient) {\n      this.logger.warn(\n        '[SpaceParticipant] Not a speaker yet; ignoring pushAudio.',\n      );\n      return;\n    }\n    this.janusClient.pushLocalAudio(samples, sampleRate);\n  }\n\n  /**\n   * Internal handler for incoming PCM frames from Janus, forwarded to plugin.onAudioData if present.\n   */\n  private handleAudioData(data: AudioDataWithUser) {\n    for (const { plugin } of this.plugins) {\n      plugin.onAudioData?.(data);\n    }\n  }\n\n  /**\n   * Sets up chat events: \"occupancyUpdate\", \"newSpeakerAccepted\", etc.\n   */\n  private setupChatEvents() {\n    if (!this.chatClient) return;\n    setupCommonChatEvents(this.chatClient, this.logger, this);\n\n    this.chatClient.on('newSpeakerAccepted', ({ userId }) => {\n      this.logger.debug('[SpaceParticipant] newSpeakerAccepted =>', userId);\n\n      // If we haven't created Janus yet, skip\n      if (!this.janusClient) {\n        this.logger.warn(\n          '[SpaceParticipant] No janusClient yet; ignoring new speaker...',\n        );\n        return;\n      }\n      // If this is our own handle, skip\n      if (userId === this.janusClient.getHandleId()) {\n        return;\n      }\n\n      // Subscribe to this new speaker's audio\n      this.janusClient.subscribeSpeaker(userId).catch((err) => {\n        this.logger.error('[SpaceParticipant] subscribeSpeaker error =>', err);\n      });\n    });\n  }\n\n  /**\n   * Mute self if we are speaker: calls /audiospace/muteSpeaker with our sessionUUID.\n   */\n  public async muteSelf(): Promise<void> {\n    if (!this.authToken || !this.chatToken) {\n      throw new Error('[SpaceParticipant] Missing authToken or chatToken.');\n    }\n    if (!this.sessionUUID) {\n      throw new Error('[SpaceParticipant] No sessionUUID; are you a speaker?');\n    }\n\n    await muteSpeaker({\n      broadcastId: this.spaceId,\n      sessionUUID: this.sessionUUID,\n      chatToken: this.chatToken,\n      authToken: this.authToken,\n    });\n    this.logger.info('[SpaceParticipant] Successfully muted self.');\n  }\n\n  /**\n   * Unmute self if we are speaker: calls /audiospace/unmuteSpeaker with our sessionUUID.\n   */\n  public async unmuteSelf(): Promise<void> {\n    if (!this.authToken || !this.chatToken) {\n      throw new Error('[SpaceParticipant] Missing authToken or chatToken.');\n    }\n    if (!this.sessionUUID) {\n      throw new Error('[SpaceParticipant] No sessionUUID; are you a speaker?');\n    }\n\n    await unmuteSpeaker({\n      broadcastId: this.spaceId,\n      sessionUUID: this.sessionUUID,\n      chatToken: this.chatToken,\n      authToken: this.authToken,\n    });\n    this.logger.info('[SpaceParticipant] Successfully unmuted self.');\n  }\n}\n","// src/plugins/SttTtsPlugin.ts\n\nimport fs from 'fs';\nimport path from 'path';\nimport { spawn } from 'child_process';\nimport { AudioDataWithUser, Plugin } from '../types';\nimport { Space } from '../core/Space';\nimport { SpaceParticipant } from '../core/SpaceParticipant';\nimport { JanusClient } from '../core/JanusClient';\nimport { Logger } from '../logger';\n\ninterface PluginConfig {\n  openAiApiKey?: string; // for STT & ChatGPT\n  elevenLabsApiKey?: string; // for TTS\n  sttLanguage?: string; // e.g., \"en\" for Whisper\n  gptModel?: string; // e.g., \"gpt-3.5-turbo\" or \"gpt-4\"\n  silenceThreshold?: number; // amplitude threshold for ignoring silence\n  voiceId?: string; // specify which ElevenLabs voice to use\n  elevenLabsModel?: string; // e.g., \"eleven_monolingual_v1\"\n  systemPrompt?: string; // e.g., \"You are a helpful AI assistant\"\n  chatContext?: Array<{\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n  }>;\n  debug?: boolean;\n}\n\n/**\n * SttTtsPlugin\n * ------------\n * Provides an end-to-end flow of:\n *  - Speech-to-Text (OpenAI Whisper)\n *  - ChatGPT conversation\n *  - Text-to-Speech (ElevenLabs)\n *  - Streams TTS audio frames back to Janus\n *\n * Lifecycle:\n *  - onAttach(...) => minimal references\n *  - init(...) => space or participant has joined in basic mode\n *  - onJanusReady(...) => we have a JanusClient\n *  - onAudioData(...) => receiving PCM frames from speakers\n *  - cleanup(...) => release resources, stop timers, etc.\n */\nexport class SttTtsPlugin implements Plugin {\n  // References to the space/participant and the Janus client\n  private spaceOrParticipant?: Space | SpaceParticipant;\n  private janus?: JanusClient;\n\n  // Optional logger retrieved from the space or participant\n  private logger?: Logger;\n\n  // Credentials & config\n  private openAiApiKey?: string;\n  private elevenLabsApiKey?: string;\n  private sttLanguage: string = 'en';\n  private gptModel: string = 'gpt-3.5-turbo';\n  private voiceId: string = '21m00Tcm4TlvDq8ikWAM';\n  private elevenLabsModel: string = 'eleven_monolingual_v1';\n  private systemPrompt: string = 'You are a helpful AI assistant.';\n  private silenceThreshold: number = 50;\n\n  /**\n   * chatContext accumulates the conversation for GPT:\n   *  - system: persona instructions\n   *  - user/assistant: running conversation\n   */\n  private chatContext: Array<{\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n  }> = [];\n\n  /**\n   * Maps each userId => array of Int16Array PCM chunks\n   * Only accumulates data if the speaker is unmuted\n   */\n  private pcmBuffers = new Map<string, Int16Array[]>();\n\n  /**\n   * Tracks which speakers are currently unmuted:\n   * userId => true/false\n   */\n  private speakerUnmuted = new Map<string, boolean>();\n\n  /**\n   * TTS queue for sequential playback\n   */\n  private ttsQueue: string[] = [];\n  private isSpeaking: boolean = false;\n\n  /**\n   * Called immediately after `.use(plugin)`.\n   * Usually used for storing references or minimal setup.\n   */\n  onAttach(params: {\n    space: Space | SpaceParticipant;\n    pluginConfig?: Record<string, any>;\n  }): void {\n    // Store a reference to the space or participant\n    this.spaceOrParticipant = params.space;\n\n    const debugEnabled = params.pluginConfig?.debug ?? false;\n    this.logger = new Logger(debugEnabled);\n\n    console.log('[SttTtsPlugin] onAttach => plugin attached');\n  }\n\n  /**\n   * Called after the space/participant has joined in basic mode (listener + chat).\n   * This is where we can finalize setup that doesn't require Janus or speaker mode.\n   */\n  init(params: {\n    space: Space | SpaceParticipant;\n    pluginConfig?: Record<string, any>;\n  }): void {\n    const config = params.pluginConfig as PluginConfig;\n\n    this.logger?.debug('[SttTtsPlugin] init => finalizing basic setup');\n\n    // Overwrite the local reference with a strong typed one\n    this.spaceOrParticipant = params.space;\n\n    // If space/participant has a Janus client already, we can store it,\n    // but typically we rely on \"onJanusReady\" for that.\n    this.janus = (this.spaceOrParticipant as any).janusClient;\n\n    // Merge plugin configuration\n    this.openAiApiKey = config?.openAiApiKey;\n    this.elevenLabsApiKey = config?.elevenLabsApiKey;\n    if (config?.sttLanguage) this.sttLanguage = config.sttLanguage;\n    if (config?.gptModel) this.gptModel = config.gptModel;\n    if (typeof config?.silenceThreshold === 'number') {\n      this.silenceThreshold = config.silenceThreshold;\n    }\n    if (config?.voiceId) this.voiceId = config.voiceId;\n    if (config?.elevenLabsModel) this.elevenLabsModel = config.elevenLabsModel;\n    if (config?.systemPrompt) this.systemPrompt = config.systemPrompt;\n    if (config?.chatContext) {\n      this.chatContext = config.chatContext;\n    }\n\n    this.logger?.debug('[SttTtsPlugin] Merged config =>', config);\n\n    // Example: watch for \"muteStateChanged\" events from the space or participant\n    this.spaceOrParticipant.on(\n      'muteStateChanged',\n      (evt: { userId: string; muted: boolean }) => {\n        this.logger?.debug('[SttTtsPlugin] muteStateChanged =>', evt);\n        if (evt.muted) {\n          // If the user just muted, flush STT\n          this.handleMute(evt.userId).catch((err) => {\n            this.logger?.error('[SttTtsPlugin] handleMute error =>', err);\n          });\n        } else {\n          // Mark user as unmuted\n          this.speakerUnmuted.set(evt.userId, true);\n          if (!this.pcmBuffers.has(evt.userId)) {\n            this.pcmBuffers.set(evt.userId, []);\n          }\n        }\n      },\n    );\n  }\n\n  /**\n   * Called if/when the plugin needs direct access to a JanusClient.\n   * For example, once the participant becomes a speaker or if a host\n   * has finished setting up Janus.\n   */\n  onJanusReady(janusClient: JanusClient): void {\n    this.logger?.debug(\n      '[SttTtsPlugin] onJanusReady => JanusClient is now available',\n    );\n    this.janus = janusClient;\n  }\n\n  /**\n   * onAudioData: triggered for every incoming PCM frame from a speaker.\n   * We'll accumulate them if that speaker is currently unmuted.\n   */\n  onAudioData(data: AudioDataWithUser): void {\n    const { userId, samples } = data;\n    if (!this.speakerUnmuted.get(userId)) return;\n\n    // Basic amplitude check\n    let maxVal = 0;\n    for (let i = 0; i < samples.length; i++) {\n      const val = Math.abs(samples[i]);\n      if (val > maxVal) maxVal = val;\n    }\n    if (maxVal < this.silenceThreshold) return;\n\n    // Accumulate frames\n    const chunks = this.pcmBuffers.get(userId) ?? [];\n    chunks.push(samples);\n    this.pcmBuffers.set(userId, chunks);\n  }\n\n  /**\n   * handleMute: called when a speaker goes from unmuted to muted.\n   * We'll flush their collected PCM => STT => GPT => TTS => push to Janus\n   */\n  private async handleMute(userId: string): Promise<void> {\n    this.speakerUnmuted.set(userId, false);\n\n    const chunks = this.pcmBuffers.get(userId) || [];\n    this.pcmBuffers.set(userId, []); // reset\n\n    if (!chunks.length) {\n      this.logger?.debug('[SttTtsPlugin] No audio data => userId=', userId);\n      return;\n    }\n\n    this.logger?.info(\n      `[SttTtsPlugin] Flushing STT buffer => userId=${userId}, chunkCount=${chunks.length}`,\n    );\n\n    // Merge into one Int16Array\n    const totalLen = chunks.reduce((acc, c) => acc + c.length, 0);\n    const merged = new Int16Array(totalLen);\n    let offset = 0;\n    for (const c of chunks) {\n      merged.set(c, offset);\n      offset += c.length;\n    }\n\n    // Convert to WAV\n    const wavPath = await this.convertPcmToWav(merged, 48000);\n    this.logger?.debug('[SttTtsPlugin] WAV created =>', wavPath);\n\n    // Whisper STT\n    const sttText = await this.transcribeWithOpenAI(wavPath, this.sttLanguage);\n    fs.unlinkSync(wavPath); // remove temp\n\n    if (!sttText.trim()) {\n      this.logger?.debug(\n        '[SttTtsPlugin] No speech recognized => userId=',\n        userId,\n      );\n      return;\n    }\n    this.logger?.info(\n      `[SttTtsPlugin] STT => userId=${userId}, text=\"${sttText}\"`,\n    );\n\n    // GPT response\n    const replyText = await this.askChatGPT(sttText);\n    this.logger?.info(\n      `[SttTtsPlugin] GPT => userId=${userId}, reply=\"${replyText}\"`,\n    );\n\n    // Send TTS\n    await this.speakText(replyText);\n  }\n\n  /**\n   * speakText: Public method to enqueue a text message for TTS output\n   */\n  public async speakText(text: string): Promise<void> {\n    this.ttsQueue.push(text);\n\n    if (!this.isSpeaking) {\n      this.isSpeaking = true;\n      this.processTtsQueue().catch((err) => {\n        this.logger?.error('[SttTtsPlugin] processTtsQueue error =>', err);\n      });\n    }\n  }\n\n  /**\n   * processTtsQueue: Drains the TTS queue in order, sending frames to Janus\n   */\n  private async processTtsQueue(): Promise<void> {\n    while (this.ttsQueue.length > 0) {\n      const text = this.ttsQueue.shift();\n      if (!text) continue;\n      try {\n        const mp3Buf = await this.elevenLabsTts(text);\n        const pcm = await this.convertMp3ToPcm(mp3Buf, 48000);\n        await this.streamToJanus(pcm, 48000);\n      } catch (err) {\n        this.logger?.error('[SttTtsPlugin] TTS streaming error =>', err);\n      }\n    }\n    this.isSpeaking = false;\n  }\n\n  /**\n   * convertPcmToWav: Creates a temporary WAV file from raw PCM samples\n   */\n  private convertPcmToWav(\n    samples: Int16Array,\n    sampleRate: number,\n  ): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const tmpPath = path.resolve('/tmp', `stt-${Date.now()}.wav`);\n      const ff = spawn('ffmpeg', [\n        '-f',\n        's16le',\n        '-ar',\n        sampleRate.toString(),\n        '-ac',\n        '1',\n        '-i',\n        'pipe:0',\n        '-y',\n        tmpPath,\n      ]);\n\n      ff.stdin.write(Buffer.from(samples.buffer));\n      ff.stdin.end();\n\n      ff.on('close', (code) => {\n        if (code === 0) {\n          resolve(tmpPath);\n        } else {\n          reject(new Error(`ffmpeg pcm->wav error code=${code}`));\n        }\n      });\n    });\n  }\n\n  /**\n   * transcribeWithOpenAI: sends the WAV file to OpenAI Whisper\n   */\n  private async transcribeWithOpenAI(\n    wavPath: string,\n    language: string,\n  ): Promise<string> {\n    if (!this.openAiApiKey) {\n      throw new Error('[SttTtsPlugin] No OpenAI API key');\n    }\n\n    this.logger?.info('[SttTtsPlugin] Transcribing =>', wavPath);\n    const fileBuffer = fs.readFileSync(wavPath);\n    this.logger?.debug('[SttTtsPlugin] WAV size =>', fileBuffer.length);\n\n    const blob = new Blob([fileBuffer], { type: 'audio/wav' });\n    const formData = new FormData();\n    formData.append('file', blob, path.basename(wavPath));\n    formData.append('model', 'whisper-1');\n    formData.append('language', language);\n    formData.append('temperature', '0');\n\n    const resp = await fetch('https://api.openai.com/v1/audio/transcriptions', {\n      method: 'POST',\n      headers: { Authorization: `Bearer ${this.openAiApiKey}` },\n      body: formData,\n    });\n\n    if (!resp.ok) {\n      const errText = await resp.text();\n      this.logger?.error('[SttTtsPlugin] OpenAI STT error =>', errText);\n      throw new Error(`OpenAI STT => ${resp.status} ${errText}`);\n    }\n\n    const data = (await resp.json()) as { text: string };\n    return data.text.trim();\n  }\n\n  /**\n   * askChatGPT: sends user text to GPT, returns the assistant reply\n   */\n  private async askChatGPT(userText: string): Promise<string> {\n    if (!this.openAiApiKey) {\n      throw new Error('[SttTtsPlugin] No OpenAI API key (GPT) provided');\n    }\n\n    const messages = [\n      { role: 'system', content: this.systemPrompt },\n      ...this.chatContext,\n      { role: 'user', content: userText },\n    ];\n\n    const resp = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${this.openAiApiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ model: this.gptModel, messages }),\n    });\n\n    if (!resp.ok) {\n      const errText = await resp.text();\n      throw new Error(\n        `[SttTtsPlugin] ChatGPT error => ${resp.status} ${errText}`,\n      );\n    }\n\n    const json = await resp.json();\n    const reply = json.choices?.[0]?.message?.content || '';\n    // Keep conversation context\n    this.chatContext.push({ role: 'user', content: userText });\n    this.chatContext.push({ role: 'assistant', content: reply });\n    return reply.trim();\n  }\n\n  /**\n   * elevenLabsTts: fetches MP3 audio from ElevenLabs for a given text\n   */\n  private async elevenLabsTts(text: string): Promise<Buffer> {\n    if (!this.elevenLabsApiKey) {\n      throw new Error('[SttTtsPlugin] No ElevenLabs API key');\n    }\n\n    const url = `https://api.elevenlabs.io/v1/text-to-speech/${this.voiceId}`;\n    const resp = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'xi-api-key': this.elevenLabsApiKey,\n      },\n      body: JSON.stringify({\n        text,\n        model_id: this.elevenLabsModel,\n        voice_settings: { stability: 0.4, similarity_boost: 0.8 },\n      }),\n    });\n\n    if (!resp.ok) {\n      const errText = await resp.text();\n      throw new Error(\n        `[SttTtsPlugin] ElevenLabs error => ${resp.status} ${errText}`,\n      );\n    }\n\n    const arrayBuffer = await resp.arrayBuffer();\n    return Buffer.from(arrayBuffer);\n  }\n\n  /**\n   * convertMp3ToPcm: uses ffmpeg to convert an MP3 buffer to raw PCM\n   */\n  private convertMp3ToPcm(\n    mp3Buf: Buffer,\n    outRate: number,\n  ): Promise<Int16Array> {\n    return new Promise((resolve, reject) => {\n      const ff = spawn('ffmpeg', [\n        '-i',\n        'pipe:0',\n        '-f',\n        's16le',\n        '-ar',\n        outRate.toString(),\n        '-ac',\n        '1',\n        'pipe:1',\n      ]);\n\n      let raw = Buffer.alloc(0);\n\n      ff.stdout.on('data', (chunk: Buffer) => {\n        raw = Buffer.concat([raw, chunk]);\n      });\n      ff.stderr.on('data', () => {\n        // ignoring ffmpeg stderr\n      });\n      ff.on('close', (code) => {\n        if (code !== 0) {\n          reject(new Error(`ffmpeg mp3->pcm error code=${code}`));\n          return;\n        }\n        const samples = new Int16Array(\n          raw.buffer,\n          raw.byteOffset,\n          raw.byteLength / 2,\n        );\n        resolve(samples);\n      });\n\n      ff.stdin.write(mp3Buf);\n      ff.stdin.end();\n    });\n  }\n\n  /**\n   * streamToJanus: push PCM frames to Janus in small increments (~10ms).\n   */\n  private async streamToJanus(\n    samples: Int16Array,\n    sampleRate: number,\n  ): Promise<void> {\n    if (!this.janus) {\n      this.logger?.warn(\n        '[SttTtsPlugin] No JanusClient available, cannot send TTS audio',\n      );\n      return;\n    }\n\n    const frameSize = Math.floor(sampleRate * 0.01); // 10ms => e.g. 480 @ 48kHz\n\n    for (\n      let offset = 0;\n      offset + frameSize <= samples.length;\n      offset += frameSize\n    ) {\n      const frame = new Int16Array(frameSize);\n      frame.set(samples.subarray(offset, offset + frameSize));\n      this.janus.pushLocalAudio(frame, sampleRate, 1);\n      await new Promise((r) => setTimeout(r, 10));\n    }\n  }\n\n  /**\n   * setSystemPrompt: update the GPT system prompt at runtime\n   */\n  public setSystemPrompt(prompt: string): void {\n    this.systemPrompt = prompt;\n    this.logger?.info('[SttTtsPlugin] setSystemPrompt =>', prompt);\n  }\n\n  /**\n   * setGptModel: switch GPT model (e.g. \"gpt-4\")\n   */\n  public setGptModel(model: string): void {\n    this.gptModel = model;\n    this.logger?.info('[SttTtsPlugin] setGptModel =>', model);\n  }\n\n  /**\n   * addMessage: manually add a system/user/assistant message to the chat context\n   */\n  public addMessage(\n    role: 'system' | 'user' | 'assistant',\n    content: string,\n  ): void {\n    this.chatContext.push({ role, content });\n    this.logger?.debug(\n      `[SttTtsPlugin] addMessage => role=${role}, content=\"${content}\"`,\n    );\n  }\n\n  /**\n   * clearChatContext: resets the GPT conversation\n   */\n  public clearChatContext(): void {\n    this.chatContext = [];\n    this.logger?.debug('[SttTtsPlugin] clearChatContext => done');\n  }\n\n  /**\n   * cleanup: release resources when the space/participant is stopping or plugin removed\n   */\n  cleanup(): void {\n    this.logger?.info('[SttTtsPlugin] cleanup => releasing resources');\n\n    this.pcmBuffers.clear();\n    this.speakerUnmuted.clear();\n    this.ttsQueue = [];\n    this.isSpeaking = false;\n  }\n}\n","import * as fs from 'fs';\nimport { AudioDataWithUser, Plugin } from '../types';\nimport { Space } from '../core/Space';\nimport { SpaceParticipant } from '../core/SpaceParticipant';\nimport { Logger } from '../logger';\n\ninterface RecordToDiskPluginConfig {\n  filePath?: string;\n  debug?: boolean; // whether to enable verbose logs\n}\n\n/**\n * RecordToDiskPlugin\n * ------------------\n * A simple plugin that writes all incoming PCM frames to a local .raw file.\n *\n * Lifecycle:\n *  - onAttach(...) => minimal references, logger config\n *  - init(...) => finalize file path, open stream\n *  - onAudioData(...) => append PCM frames to the file\n *  - cleanup(...) => close file stream\n */\nexport class RecordToDiskPlugin implements Plugin {\n  private filePath: string = '/tmp/speaker_audio.raw';\n  private outStream?: fs.WriteStream;\n  private logger?: Logger;\n\n  /**\n   * Called immediately after .use(plugin).\n   * We create a logger based on pluginConfig.debug and store the file path if provided.\n   */\n  onAttach(params: {\n    space: Space | SpaceParticipant;\n    pluginConfig?: Record<string, any>;\n  }): void {\n    const debugEnabled = params.pluginConfig?.debug ?? false;\n    this.logger = new Logger(debugEnabled);\n\n    this.logger.info('[RecordToDiskPlugin] onAttach => plugin attached');\n\n    if (params.pluginConfig?.filePath) {\n      this.filePath = params.pluginConfig.filePath;\n    }\n    this.logger.debug('[RecordToDiskPlugin] Using filePath =>', this.filePath);\n  }\n\n  /**\n   * Called after the space/participant has joined in basic mode.\n   * We open the WriteStream to our file path here.\n   */\n  init(params: {\n    space: Space | SpaceParticipant;\n    pluginConfig?: Record<string, any>;\n  }): void {\n    // If filePath was re-defined in pluginConfig, re-check:\n    if (params.pluginConfig?.filePath) {\n      this.filePath = params.pluginConfig.filePath;\n    }\n\n    this.logger?.info('[RecordToDiskPlugin] init => opening output stream');\n    this.outStream = fs.createWriteStream(this.filePath, { flags: 'w' });\n  }\n\n  /**\n   * Called whenever PCM audio frames arrive from a speaker.\n   * We write them to the file as raw 16-bit PCM.\n   */\n  onAudioData(data: AudioDataWithUser): void {\n    if (!this.outStream) {\n      this.logger?.warn('[RecordToDiskPlugin] No outStream yet; ignoring data');\n      return;\n    }\n    const buf = Buffer.from(data.samples.buffer);\n    this.outStream.write(buf);\n    this.logger?.debug(\n      `[RecordToDiskPlugin] Wrote ${buf.byteLength} bytes from userId=${data.userId} to disk`,\n    );\n  }\n\n  /**\n   * Called when the plugin is cleaned up (e.g. space/participant stop).\n   * We close our file stream.\n   */\n  cleanup(): void {\n    this.logger?.info('[RecordToDiskPlugin] cleanup => closing output stream');\n    if (this.outStream) {\n      this.outStream.end();\n      this.outStream = undefined;\n    }\n  }\n}\n","import { spawn, ChildProcessWithoutNullStreams } from 'child_process';\nimport { Plugin, AudioDataWithUser } from '../types';\nimport { Logger } from '../logger';\n\n/**\n * MonitorAudioPlugin\n * ------------------\n * A simple plugin that spawns an `ffplay` process to play raw PCM audio in real time.\n * It reads frames from `onAudioData()` and writes them to ffplay via stdin.\n *\n * Usage:\n *   const plugin = new MonitorAudioPlugin(48000, /* debug= *\\/ true);\n *   space.use(plugin);\n */\nexport class MonitorAudioPlugin implements Plugin {\n  private ffplay?: ChildProcessWithoutNullStreams;\n  private logger: Logger;\n\n  /**\n   * @param sampleRate  The expected PCM sample rate (e.g. 16000 or 48000).\n   * @param debug       If true, enables debug logging via Logger.\n   */\n  constructor(private readonly sampleRate = 48000, debug = false) {\n    this.logger = new Logger(debug);\n\n    // Spawn ffplay to read raw PCM (s16le) on stdin\n    this.ffplay = spawn('ffplay', [\n      '-f',\n      's16le',\n      '-ar',\n      this.sampleRate.toString(),\n      '-ac',\n      '1', // mono\n      '-nodisp',\n      '-loglevel',\n      'quiet',\n      '-i',\n      'pipe:0',\n    ]);\n\n    this.ffplay.on('error', (err) => {\n      this.logger.error('[MonitorAudioPlugin] ffplay error =>', err);\n    });\n\n    this.ffplay.on('close', (code) => {\n      this.logger.info('[MonitorAudioPlugin] ffplay closed => code=', code);\n      this.ffplay = undefined;\n    });\n\n    this.logger.info(\n      `[MonitorAudioPlugin] Started ffplay for real-time monitoring (sampleRate=${this.sampleRate})`,\n    );\n  }\n\n  /**\n   * Called whenever PCM frames arrive (from a speaker).\n   * Writes frames to ffplay's stdin to play them in real time.\n   */\n  onAudioData(data: AudioDataWithUser): void {\n    // Log debug info\n    this.logger.debug(\n      `[MonitorAudioPlugin] onAudioData => userId=${data.userId}, samples=${data.samples.length}, sampleRate=${data.sampleRate}`,\n    );\n\n    if (!this.ffplay?.stdin.writable) {\n      return;\n    }\n\n    // In this plugin, we assume data.sampleRate matches our expected sampleRate.\n    // Convert the Int16Array to a Buffer, then write to ffplay stdin.\n    const pcmBuffer = Buffer.from(data.samples.buffer);\n    this.ffplay.stdin.write(pcmBuffer);\n  }\n\n  /**\n   * Cleanup is called when the plugin is removed or when the space/participant stops.\n   * Ends the ffplay process and closes its stdin pipe.\n   */\n  cleanup(): void {\n    this.logger.info('[MonitorAudioPlugin] Cleanup => stopping ffplay');\n    if (this.ffplay) {\n      this.ffplay.stdin.end();\n      this.ffplay.kill();\n      this.ffplay = undefined;\n    }\n  }\n}\n","import { Plugin, AudioDataWithUser } from '../types';\nimport { Space } from '../core/Space';\nimport { Logger } from '../logger';\n\n/**\n * IdleMonitorPlugin\n * -----------------\n * Monitors silence in both remote speaker audio and local (pushed) audio.\n * If no audio is detected for a specified duration, it emits an 'idleTimeout' event on the space.\n */\nexport class IdleMonitorPlugin implements Plugin {\n  private space?: Space;\n  private logger?: Logger;\n\n  private lastSpeakerAudioMs = Date.now();\n  private lastLocalAudioMs = Date.now();\n  private checkInterval?: NodeJS.Timeout;\n\n  /**\n   * @param idleTimeoutMs The duration (in ms) of total silence before triggering idle. (Default: 60s)\n   * @param checkEveryMs  How frequently (in ms) to check for silence. (Default: 10s)\n   */\n  constructor(\n    private idleTimeoutMs: number = 60_000,\n    private checkEveryMs: number = 10_000,\n  ) {}\n\n  /**\n   * Called immediately after .use(plugin).\n   * Allows for minimal setup, including obtaining a debug logger if desired.\n   */\n  onAttach(params: { space: Space; pluginConfig?: Record<string, any> }): void {\n    this.space = params.space;\n    const debug = params.pluginConfig?.debug ?? false;\n    this.logger = new Logger(debug);\n\n    this.logger.info('[IdleMonitorPlugin] onAttach => plugin attached');\n  }\n\n  /**\n   * Called once the space has fully initialized (basic mode).\n   * We set up idle checks and override pushAudio to detect local audio activity.\n   */\n  init(params: { space: Space; pluginConfig?: Record<string, any> }): void {\n    this.space = params.space;\n    this.logger?.info('[IdleMonitorPlugin] init => setting up idle checks');\n\n    // Update lastSpeakerAudioMs on incoming speaker audio\n    // (Here we're hooking into an event triggered by Space for each speaker's PCM data.)\n    this.space.on('audioDataFromSpeaker', (_data: AudioDataWithUser) => {\n      this.lastSpeakerAudioMs = Date.now();\n    });\n\n    // Patch space.pushAudio to track local audio\n    const originalPushAudio = this.space.pushAudio.bind(this.space);\n    this.space.pushAudio = (samples, sampleRate) => {\n      this.lastLocalAudioMs = Date.now();\n      originalPushAudio(samples, sampleRate);\n    };\n\n    // Periodically check for silence\n    this.checkInterval = setInterval(() => this.checkIdle(), this.checkEveryMs);\n  }\n\n  /**\n   * Checks if we've exceeded idleTimeoutMs with no audio activity.\n   * If so, emits an 'idleTimeout' event on the space with { idleMs } info.\n   */\n  private checkIdle() {\n    const now = Date.now();\n    const lastAudio = Math.max(this.lastSpeakerAudioMs, this.lastLocalAudioMs);\n    const idleMs = now - lastAudio;\n\n    if (idleMs >= this.idleTimeoutMs) {\n      this.logger?.warn(\n        `[IdleMonitorPlugin] idleTimeout => no audio for ${idleMs}ms`,\n      );\n      this.space?.emit('idleTimeout', { idleMs });\n    }\n  }\n\n  /**\n   * Returns how many milliseconds have passed since any audio was detected (local or speaker).\n   */\n  public getIdleTimeMs(): number {\n    const now = Date.now();\n    const lastAudio = Math.max(this.lastSpeakerAudioMs, this.lastLocalAudioMs);\n    return now - lastAudio;\n  }\n\n  /**\n   * Cleans up resources (interval) when the plugin is removed or space stops.\n   */\n  cleanup(): void {\n    this.logger?.info('[IdleMonitorPlugin] cleanup => stopping idle checks');\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n      this.checkInterval = undefined;\n    }\n  }\n}\n","import { spawn, ChildProcessWithoutNullStreams } from 'child_process';\nimport { Plugin, OccupancyUpdate } from '../types';\nimport { Space } from '../core/Space';\nimport { Logger } from '../logger';\n\n/**\n * HlsRecordPlugin\n * ---------------\n * Records the final Twitter Spaces HLS mix to a local .ts file using ffmpeg.\n *\n * Workflow:\n *  - Wait for occupancy > 0 (i.e., at least one listener).\n *  - Attempt to retrieve the HLS URL from Twitter (via scraper).\n *  - If valid (HTTP 200), spawn ffmpeg to record the stream.\n *  - If HLS not ready yet (HTTP 404), wait for next occupancy event.\n *\n * Lifecycle:\n *  - onAttach(...) => minimal references, logger setup\n *  - init(...) => fully runs once the Space is created (broadcastInfo ready)\n *  - cleanup() => stop ffmpeg if running\n */\nexport class HlsRecordPlugin implements Plugin {\n  private logger?: Logger;\n  private recordingProcess?: ChildProcessWithoutNullStreams;\n  private isRecording = false;\n\n  private outputPath?: string;\n  private mediaKey?: string;\n  private space?: Space;\n\n  /**\n   * You can optionally provide an outputPath in the constructor.\n   * Alternatively, it can be set via pluginConfig in onAttach/init.\n   */\n  constructor(outputPath?: string) {\n    this.outputPath = outputPath;\n  }\n\n  /**\n   * Called immediately after .use(plugin). We store references here\n   * (e.g., the space) and create a Logger based on pluginConfig.debug.\n   */\n  onAttach(params: { space: Space; pluginConfig?: Record<string, any> }): void {\n    this.space = params.space;\n\n    const debug = params.pluginConfig?.debug ?? false;\n    this.logger = new Logger(debug);\n\n    this.logger.info('[HlsRecordPlugin] onAttach => plugin attached');\n\n    // If outputPath was not passed in constructor, check pluginConfig\n    if (params.pluginConfig?.outputPath) {\n      this.outputPath = params.pluginConfig.outputPath;\n    }\n  }\n\n  /**\n   * Called once the Space has fully initialized (broadcastInfo is ready).\n   * We retrieve the media_key from the broadcast, subscribe to occupancy,\n   * and prepare for recording if occupancy > 0.\n   */\n  async init(params: { space: Space; pluginConfig?: Record<string, any> }) {\n    // Merge plugin config again (in case it was not set in onAttach).\n    if (params.pluginConfig?.outputPath) {\n      this.outputPath = params.pluginConfig.outputPath;\n    }\n\n    // Use the same logger from onAttach\n    const broadcastInfo = (this.space as any)?.broadcastInfo;\n    if (!broadcastInfo || !broadcastInfo.broadcast?.media_key) {\n      this.logger?.warn(\n        '[HlsRecordPlugin] No media_key found in broadcastInfo',\n      );\n      return;\n    }\n    this.mediaKey = broadcastInfo.broadcast.media_key;\n\n    // If no custom output path was provided, use a default\n    const roomId = broadcastInfo.room_id || 'unknown_room';\n    if (!this.outputPath) {\n      this.outputPath = `/tmp/record_${roomId}.ts`;\n    }\n\n    this.logger?.info(\n      `[HlsRecordPlugin] init => ready to record. Output path=\"${this.outputPath}\"`,\n    );\n\n    // Listen for occupancy updates\n    this.space?.on('occupancyUpdate', (update: OccupancyUpdate) => {\n      this.handleOccupancyUpdate(update).catch((err) => {\n        this.logger?.error('[HlsRecordPlugin] handleOccupancyUpdate =>', err);\n      });\n    });\n  }\n\n  /**\n   * If occupancy > 0 and we're not recording yet, attempt to fetch the HLS URL\n   * from Twitter. If it's ready, spawn ffmpeg to record.\n   */\n  private async handleOccupancyUpdate(update: OccupancyUpdate) {\n    if (!this.space || !this.mediaKey) return;\n    if (this.isRecording) return;\n    if (update.occupancy <= 0) {\n      this.logger?.debug('[HlsRecordPlugin] occupancy=0 => ignoring');\n      return;\n    }\n\n    this.logger?.debug(\n      `[HlsRecordPlugin] occupancy=${update.occupancy} => trying to fetch HLS URL...`,\n    );\n\n    const scraper = (this.space as any).scraper;\n    if (!scraper) {\n      this.logger?.warn('[HlsRecordPlugin] No scraper found on space');\n      return;\n    }\n\n    try {\n      const status = await scraper.getAudioSpaceStreamStatus(this.mediaKey);\n      if (!status?.source?.location) {\n        this.logger?.debug(\n          '[HlsRecordPlugin] occupancy>0 but no HLS URL => wait next update',\n        );\n        return;\n      }\n\n      const hlsUrl = status.source.location;\n      const isReady = await this.waitForHlsReady(hlsUrl, 1);\n      if (!isReady) {\n        this.logger?.debug(\n          '[HlsRecordPlugin] HLS URL 404 => waiting next occupancy update...',\n        );\n        return;\n      }\n      await this.startRecording(hlsUrl);\n    } catch (err) {\n      this.logger?.error('[HlsRecordPlugin] handleOccupancyUpdate =>', err);\n    }\n  }\n\n  /**\n   * HEAD request to see if the HLS URL is returning 200 OK.\n   * maxRetries=1 => only try once here; rely on occupancy re-calls otherwise.\n   */\n  private async waitForHlsReady(\n    hlsUrl: string,\n    maxRetries: number,\n  ): Promise<boolean> {\n    let attempt = 0;\n    while (attempt < maxRetries) {\n      try {\n        const resp = await fetch(hlsUrl, { method: 'HEAD' });\n        if (resp.ok) {\n          this.logger?.debug(\n            `[HlsRecordPlugin] HLS is ready (attempt #${attempt + 1})`,\n          );\n          return true;\n        } else {\n          this.logger?.debug(\n            `[HlsRecordPlugin] HLS status=${resp.status}, retrying...`,\n          );\n        }\n      } catch (error) {\n        this.logger?.debug(\n          '[HlsRecordPlugin] HLS fetch error =>',\n          (error as Error).message,\n        );\n      }\n      attempt++;\n      await new Promise((r) => setTimeout(r, 2000));\n    }\n    return false;\n  }\n\n  /**\n   * Spawns ffmpeg to record the HLS stream at the given URL.\n   */\n  private async startRecording(hlsUrl: string): Promise<void> {\n    if (this.isRecording) {\n      this.logger?.debug('[HlsRecordPlugin] Already recording, skipping...');\n      return;\n    }\n    this.isRecording = true;\n\n    if (!this.outputPath) {\n      this.logger?.warn(\n        '[HlsRecordPlugin] No output path set, using /tmp/space_record.ts',\n      );\n      this.outputPath = '/tmp/space_record.ts';\n    }\n\n    this.logger?.info('[HlsRecordPlugin] Starting HLS recording =>', hlsUrl);\n\n    this.recordingProcess = spawn('ffmpeg', [\n      '-y',\n      '-i',\n      hlsUrl,\n      '-c',\n      'copy',\n      this.outputPath,\n    ]);\n\n    // Capture stderr for errors or debug info\n    this.recordingProcess.stderr.on('data', (chunk) => {\n      const msg = chunk.toString();\n      if (msg.toLowerCase().includes('error')) {\n        this.logger?.error('[HlsRecordPlugin][ffmpeg error] =>', msg.trim());\n      } else {\n        this.logger?.debug('[HlsRecordPlugin][ffmpeg]', msg.trim());\n      }\n    });\n\n    this.recordingProcess.on('close', (code) => {\n      this.isRecording = false;\n      this.logger?.info(\n        '[HlsRecordPlugin] Recording process closed => code=',\n        code,\n      );\n    });\n\n    this.recordingProcess.on('error', (err) => {\n      this.logger?.error('[HlsRecordPlugin] Recording process failed =>', err);\n    });\n  }\n\n  /**\n   * Called when the plugin is cleaned up (e.g. space.stop()).\n   * Kills ffmpeg if still running.\n   */\n  cleanup(): void {\n    if (this.isRecording && this.recordingProcess) {\n      this.logger?.info('[HlsRecordPlugin] Stopping HLS recording...');\n      this.recordingProcess.kill();\n      this.recordingProcess = undefined;\n      this.isRecording = false;\n    }\n  }\n}\n"],"names":["Headers","SearchMode","endpoints","user","place","data","mediaData","mediaType","features","fs"],"mappings":"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"}